
demo_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a24  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b5c  08002b5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b5c  08002b5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b5c  08002b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002b70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002b70  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000167b  00000000  00000000  0002791b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00028f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  000296d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000143c4  00000000  00000000  00029d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000718b  00000000  00000000  0003e114  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e629  00000000  00000000  0004529f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c38c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001874  00000000  00000000  000c3944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002ac4 	.word	0x08002ac4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002ac4 	.word	0x08002ac4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 f9eb 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f823 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 f8cf 	bl	80005ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800040e:	f000 f87f 	bl	8000510 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char *msg = "Hello world!\r\n";
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <main+0x48>)
 8000414:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000416:	23a0      	movs	r3, #160	; 0xa0
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	2120      	movs	r1, #32
 800041c:	0018      	movs	r0, r3
 800041e:	f000 fcce 	bl	8000dbe <HAL_GPIO_TogglePin>

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff fe6b 	bl	8000100 <strlen>
 800042a:	0003      	movs	r3, r0
 800042c:	b29a      	uxth	r2, r3
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <main+0x4c>)
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <main+0x50>)
 8000434:	f001 fb76 	bl	8001b24 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000438:	23fa      	movs	r3, #250	; 0xfa
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fa51 	bl	80008e4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000442:	e7e8      	b.n	8000416 <main+0x1a>
 8000444:	08002adc 	.word	0x08002adc
 8000448:	0000ffff 	.word	0x0000ffff
 800044c:	20000028 	.word	0x20000028

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b099      	sub	sp, #100	; 0x64
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	242c      	movs	r4, #44	; 0x2c
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2334      	movs	r3, #52	; 0x34
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f002 fb27 	bl	8002ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000466:	231c      	movs	r3, #28
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	0018      	movs	r0, r3
 800046c:	2310      	movs	r3, #16
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f002 fb1f 	bl	8002ab4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000476:	003b      	movs	r3, r7
 8000478:	0018      	movs	r0, r3
 800047a:	231c      	movs	r3, #28
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f002 fb18 	bl	8002ab4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fcb3 	bl	8000df4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2202      	movs	r2, #2
 8000492:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2240      	movs	r2, #64	; 0x40
 80004a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fceb 	bl	8000e8c <HAL_RCC_OscConfig>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f8c7 	bl	800064c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	211c      	movs	r1, #28
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2207      	movs	r2, #7
 80004c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2100      	movs	r1, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 ffeb 	bl	80014b8 <HAL_RCC_ClockConfig>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004e6:	f000 f8b1 	bl	800064c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2202      	movs	r2, #2
 80004ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 f987 	bl	800180c <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000502:	f000 f8a3 	bl	800064c <Error_Handler>
  }
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b019      	add	sp, #100	; 0x64
 800050c:	bd90      	pop	{r4, r7, pc}
	...

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000516:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <MX_USART2_UART_Init+0x98>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800051c:	22e1      	movs	r2, #225	; 0xe1
 800051e:	0252      	lsls	r2, r2, #9
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000554:	2200      	movs	r2, #0
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fa8c 	bl	8001a78 <HAL_UART_Init>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000564:	f000 f872 	bl	800064c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f002 f991 	bl	8002894 <HAL_UARTEx_SetTxFifoThreshold>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000576:	f000 f869 	bl	800064c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800057c:	2100      	movs	r1, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f002 f9c8 	bl	8002914 <HAL_UARTEx_SetRxFifoThreshold>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000588:	f000 f860 	bl	800064c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800058e:	0018      	movs	r0, r3
 8000590:	f002 f946 	bl	8002820 <HAL_UARTEx_DisableFifoMode>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000598:	f000 f858 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000028 	.word	0x20000028
 80005a8:	40004400 	.word	0x40004400

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	240c      	movs	r4, #12
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	2314      	movs	r3, #20
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f002 fa79 	bl	8002ab4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005c8:	2104      	movs	r1, #4
 80005ca:	430a      	orrs	r2, r1
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d2:	2204      	movs	r2, #4
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005e0:	2120      	movs	r1, #32
 80005e2:	430a      	orrs	r2, r1
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ea:	2220      	movs	r2, #32
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_GPIO_Init+0x9c>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_GPIO_Init+0x9c>)
 8000600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000602:	2201      	movs	r2, #1
 8000604:	4013      	ands	r3, r2
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800060a:	23a0      	movs	r3, #160	; 0xa0
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fbb6 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000618:	0021      	movs	r1, r4
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2220      	movs	r2, #32
 800061e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2201      	movs	r2, #1
 8000624:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2202      	movs	r2, #2
 8000630:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000632:	187a      	adds	r2, r7, r1
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fa3e 	bl	8000abc <HAL_GPIO_Init>

}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b009      	add	sp, #36	; 0x24
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_MspInit+0x4c>)
 8000660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_MspInit+0x4c>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	641a      	str	r2, [r3, #64]	; 0x40
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_MspInit+0x4c>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <HAL_MspInit+0x4c>)
 8000678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_MspInit+0x4c>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0549      	lsls	r1, r1, #21
 8000680:	430a      	orrs	r2, r1
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_MspInit+0x4c>)
 8000686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	055b      	lsls	r3, r3, #21
 800068c:	4013      	ands	r3, r2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000692:	23c0      	movs	r3, #192	; 0xc0
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f946 	bl	8000928 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	2314      	movs	r3, #20
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f002 f9fa 	bl	8002ab4 <memset>
  if(huart->Instance==USART2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <HAL_UART_MspInit+0x8c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d130      	bne.n	800072c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <HAL_UART_MspInit+0x90>)
 80006cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <HAL_UART_MspInit+0x90>)
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0289      	lsls	r1, r1, #10
 80006d4:	430a      	orrs	r2, r1
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_UART_MspInit+0x90>)
 80006da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	029b      	lsls	r3, r3, #10
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_UART_MspInit+0x90>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_UART_MspInit+0x90>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_UART_MspInit+0x90>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006fe:	2114      	movs	r1, #20
 8000700:	187b      	adds	r3, r7, r1
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2202      	movs	r2, #2
 800070a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2201      	movs	r2, #1
 8000710:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2201      	movs	r2, #1
 800071c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	187a      	adds	r2, r7, r1
 8000720:	23a0      	movs	r3, #160	; 0xa0
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f9c8 	bl	8000abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b00a      	add	sp, #40	; 0x28
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40004400 	.word	0x40004400
 8000738:	40021000 	.word	0x40021000

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f8a4 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <SystemInit+0x14>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	0512      	lsls	r2, r2, #20
 800077a:	609a      	str	r2, [r3, #8]
#endif
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800078c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800078e:	e003      	b.n	8000798 <LoopCopyDataInit>

08000790 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000792:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000794:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000796:	3104      	adds	r1, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <LoopForever+0xa>)
  ldr r3, =_edata
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <LoopForever+0xe>)
  adds r2, r0, r1
 800079c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800079e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a0:	d3f6      	bcc.n	8000790 <CopyDataInit>
  ldr r2, =_sbss
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <LoopForever+0x12>)
  b LoopFillZerobss
 80007a4:	e002      	b.n	80007ac <LoopFillZerobss>

080007a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80007a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007aa:	3204      	adds	r2, #4

080007ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <LoopForever+0x16>)
  cmp r2, r3
 80007ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b0:	d3f9      	bcc.n	80007a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007b2:	f7ff ffdd 	bl	8000770 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007b6:	f002 f959 	bl	8002a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fe1f 	bl	80003fc <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   r0, =_estack
 80007c0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80007c4:	08002b64 	.word	0x08002b64
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007d4:	200000b8 	.word	0x200000b8

080007d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_IRQHandler>
	...

080007dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_Init+0x3c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_Init+0x3c>)
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	0049      	lsls	r1, r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 f810 	bl	800081c <HAL_InitTick>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d003      	beq.n	8000808 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e001      	b.n	800080c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff ff26 	bl	8000658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	b002      	add	sp, #8
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <HAL_InitTick+0x88>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d02b      	beq.n	800088c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_InitTick+0x8c>)
 8000836:	681c      	ldr	r4, [r3, #0]
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_InitTick+0x88>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	0019      	movs	r1, r3
 800083e:	23fa      	movs	r3, #250	; 0xfa
 8000840:	0098      	lsls	r0, r3, #2
 8000842:	f7ff fc65 	bl	8000110 <__udivsi3>
 8000846:	0003      	movs	r3, r0
 8000848:	0019      	movs	r1, r3
 800084a:	0020      	movs	r0, r4
 800084c:	f7ff fc60 	bl	8000110 <__udivsi3>
 8000850:	0003      	movs	r3, r0
 8000852:	0018      	movs	r0, r3
 8000854:	f000 f925 	bl	8000aa2 <HAL_SYSTICK_Config>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d112      	bne.n	8000882 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d80a      	bhi.n	8000878 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f000 f904 	bl	8000a78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_InitTick+0x90>)
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	e00d      	b.n	8000894 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000878:	230f      	movs	r3, #15
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e008      	b.n	8000894 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000882:	230f      	movs	r3, #15
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	e003      	b.n	8000894 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800088c:	230f      	movs	r3, #15
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000894:	230f      	movs	r3, #15
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	781b      	ldrb	r3, [r3, #0]
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b005      	add	sp, #20
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <HAL_IncTick+0x18>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_IncTick+0x1c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	18d2      	adds	r2, r2, r3
 80008be:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <HAL_IncTick+0x18>)
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000b4 	.word	0x200000b4
 80008cc:	20000008 	.word	0x20000008

080008d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <HAL_GetTick+0x10>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	200000b4 	.word	0x200000b4

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff fff0 	bl	80008d0 <HAL_GetTick>
 80008f0:	0003      	movs	r3, r0
 80008f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	d004      	beq.n	8000908 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_Delay+0x40>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	f7ff ffe1 	bl	80008d0 <HAL_GetTick>
 800090e:	0002      	movs	r2, r0
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	429a      	cmp	r2, r3
 8000918:	d8f7      	bhi.n	800090a <HAL_Delay+0x26>
  {
  }
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000008 	.word	0x20000008

08000928 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000936:	4013      	ands	r3, r2
 8000938:	0019      	movs	r1, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40010000 	.word	0x40010000
 8000950:	fffff9ff 	.word	0xfffff9ff

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	0002      	movs	r2, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b7f      	cmp	r3, #127	; 0x7f
 8000968:	d828      	bhi.n	80009bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096a:	4a2f      	ldr	r2, [pc, #188]	; (8000a28 <__NVIC_SetPriority+0xd4>)
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	33c0      	adds	r3, #192	; 0xc0
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	589b      	ldr	r3, [r3, r2]
 800097a:	1dfa      	adds	r2, r7, #7
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	0011      	movs	r1, r2
 8000980:	2203      	movs	r2, #3
 8000982:	400a      	ands	r2, r1
 8000984:	00d2      	lsls	r2, r2, #3
 8000986:	21ff      	movs	r1, #255	; 0xff
 8000988:	4091      	lsls	r1, r2
 800098a:	000a      	movs	r2, r1
 800098c:	43d2      	mvns	r2, r2
 800098e:	401a      	ands	r2, r3
 8000990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	22ff      	movs	r2, #255	; 0xff
 8000998:	401a      	ands	r2, r3
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0018      	movs	r0, r3
 80009a0:	2303      	movs	r3, #3
 80009a2:	4003      	ands	r3, r0
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a8:	481f      	ldr	r0, [pc, #124]	; (8000a28 <__NVIC_SetPriority+0xd4>)
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	430a      	orrs	r2, r1
 80009b4:	33c0      	adds	r3, #192	; 0xc0
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ba:	e031      	b.n	8000a20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <__NVIC_SetPriority+0xd8>)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0019      	movs	r1, r3
 80009c4:	230f      	movs	r3, #15
 80009c6:	400b      	ands	r3, r1
 80009c8:	3b08      	subs	r3, #8
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3306      	adds	r3, #6
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	18d3      	adds	r3, r2, r3
 80009d2:	3304      	adds	r3, #4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1dfa      	adds	r2, r7, #7
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	0011      	movs	r1, r2
 80009dc:	2203      	movs	r2, #3
 80009de:	400a      	ands	r2, r1
 80009e0:	00d2      	lsls	r2, r2, #3
 80009e2:	21ff      	movs	r1, #255	; 0xff
 80009e4:	4091      	lsls	r1, r2
 80009e6:	000a      	movs	r2, r1
 80009e8:	43d2      	mvns	r2, r2
 80009ea:	401a      	ands	r2, r3
 80009ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	019b      	lsls	r3, r3, #6
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	401a      	ands	r2, r3
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	0018      	movs	r0, r3
 80009fc:	2303      	movs	r3, #3
 80009fe:	4003      	ands	r3, r0
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <__NVIC_SetPriority+0xd8>)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	001c      	movs	r4, r3
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	4023      	ands	r3, r4
 8000a10:	3b08      	subs	r3, #8
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	430a      	orrs	r2, r1
 8000a16:	3306      	adds	r3, #6
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	18c3      	adds	r3, r0, r3
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b003      	add	sp, #12
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <SysTick_Config+0x40>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d901      	bls.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e010      	b.n	8000a68 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <SysTick_Config+0x44>)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	3a01      	subs	r2, #1
 8000a4c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	425b      	negs	r3, r3
 8000a52:	2103      	movs	r1, #3
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff ff7d 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SysTick_Config+0x44>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SysTick_Config+0x44>)
 8000a62:	2207      	movs	r2, #7
 8000a64:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b002      	add	sp, #8
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	00ffffff 	.word	0x00ffffff
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	210f      	movs	r1, #15
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	1c02      	adds	r2, r0, #0
 8000a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff5d 	bl	8000954 <__NVIC_SetPriority>
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ffbf 	bl	8000a30 <SysTick_Config>
 8000ab2:	0003      	movs	r3, r0
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	e147      	b.n	8000d5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d100      	bne.n	8000ae4 <HAL_GPIO_Init+0x28>
 8000ae2:	e138      	b.n	8000d56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x38>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b12      	cmp	r3, #18
 8000af2:	d123      	bne.n	8000b3c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	58d3      	ldr	r3, [r2, r3]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2207      	movs	r2, #7
 8000b06:	4013      	ands	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	43da      	mvns	r2, r3
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691a      	ldr	r2, [r3, #16]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2107      	movs	r1, #7
 8000b20:	400b      	ands	r3, r1
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	409a      	lsls	r2, r3
 8000b26:	0013      	movs	r3, r2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	08da      	lsrs	r2, r3, #3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3208      	adds	r2, #8
 8000b36:	0092      	lsls	r2, r2, #2
 8000b38:	6939      	ldr	r1, [r7, #16]
 8000b3a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	43da      	mvns	r2, r3
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2203      	movs	r2, #3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d00b      	beq.n	8000b90 <HAL_GPIO_Init+0xd4>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d007      	beq.n	8000b90 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b84:	2b11      	cmp	r3, #17
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b12      	cmp	r3, #18
 8000b8e:	d130      	bne.n	8000bf2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	43da      	mvns	r2, r3
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	0013      	movs	r3, r2
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	091b      	lsrs	r3, r3, #4
 8000bdc:	2201      	movs	r2, #1
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	43da      	mvns	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	055b      	lsls	r3, r3, #21
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d100      	bne.n	8000c30 <HAL_GPIO_Init+0x174>
 8000c2e:	e092      	b.n	8000d56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c30:	4a50      	ldr	r2, [pc, #320]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3318      	adds	r3, #24
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	589b      	ldr	r3, [r3, r2]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	220f      	movs	r2, #15
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0x1ca>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a45      	ldr	r2, [pc, #276]	; (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00d      	beq.n	8000c82 <HAL_GPIO_Init+0x1c6>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a44      	ldr	r2, [pc, #272]	; (8000d7c <HAL_GPIO_Init+0x2c0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <HAL_GPIO_Init+0x1c2>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a43      	ldr	r2, [pc, #268]	; (8000d80 <HAL_GPIO_Init+0x2c4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_GPIO_Init+0x1be>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x1cc>
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	e004      	b.n	8000c88 <HAL_GPIO_Init+0x1cc>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_Init+0x1cc>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_Init+0x1cc>
 8000c86:	2300      	movs	r3, #0
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	00d2      	lsls	r2, r2, #3
 8000c90:	4093      	lsls	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c98:	4936      	ldr	r1, [pc, #216]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3318      	adds	r3, #24
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ca6:	4a33      	ldr	r2, [pc, #204]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	58d3      	ldr	r3, [r2, r3]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ccc:	4929      	ldr	r1, [pc, #164]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000cd4:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	2384      	movs	r3, #132	; 0x84
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cfa:	491e      	ldr	r1, [pc, #120]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000cfc:	2284      	movs	r2, #132	; 0x84
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	035b      	lsls	r3, r3, #13
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	039b      	lsls	r3, r3, #14
 8000d44:	4013      	ands	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	40da      	lsrs	r2, r3
 8000d64:	1e13      	subs	r3, r2, #0
 8000d66:	d000      	beq.n	8000d6a <HAL_GPIO_Init+0x2ae>
 8000d68:	e6b0      	b.n	8000acc <HAL_GPIO_Init+0x10>
  }
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b006      	add	sp, #24
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021800 	.word	0x40021800
 8000d78:	50000400 	.word	0x50000400
 8000d7c:	50000800 	.word	0x50000800
 8000d80:	50000c00 	.word	0x50000c00

08000d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	0011      	movs	r1, r2
 8000d90:	1cbb      	adds	r3, r7, #2
 8000d92:	1c02      	adds	r2, r0, #0
 8000d94:	801a      	strh	r2, [r3, #0]
 8000d96:	1c7b      	adds	r3, r7, #1
 8000d98:	1c0a      	adds	r2, r1, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9c:	1c7b      	adds	r3, r7, #1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881a      	ldrh	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	1cbb      	adds	r3, r7, #2
 8000dca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	1cba      	adds	r2, r7, #2
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d004      	beq.n	8000de2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dd8:	1cbb      	adds	r3, r7, #2
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000de0:	e003      	b.n	8000dea <HAL_GPIO_TogglePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de2:	1cbb      	adds	r3, r7, #2
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	619a      	str	r2, [r3, #24]
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	0019      	movs	r1, r3
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d11f      	bne.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	189b      	adds	r3, r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4912      	ldr	r1, [pc, #72]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff f972 	bl	8000110 <__udivsi3>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e32:	e008      	b.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e001      	b.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e009      	b.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e48:	695a      	ldr	r2, [r3, #20]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d0ed      	beq.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40007000 	.word	0x40007000
 8000e68:	fffff9ff 	.word	0xfffff9ff
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	000f4240 	.word	0x000f4240

08000e74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	23e0      	movs	r3, #224	; 0xe0
 8000e7e:	01db      	lsls	r3, r3, #7
 8000e80:	4013      	ands	r3, r2
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e2f9      	b.n	8001492 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <HAL_RCC_OscConfig+0x1e>
 8000ea8:	e07c      	b.n	8000fa4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eaa:	4bc3      	ldr	r3, [pc, #780]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2238      	movs	r2, #56	; 0x38
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb4:	4bc0      	ldr	r3, [pc, #768]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2b10      	cmp	r3, #16
 8000ec2:	d102      	bne.n	8000eca <HAL_RCC_OscConfig+0x3e>
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d002      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x44>
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d10b      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed0:	4bb9      	ldr	r3, [pc, #740]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	029b      	lsls	r3, r3, #10
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d062      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x116>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d15e      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e2d4      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	025b      	lsls	r3, r3, #9
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d107      	bne.n	8000f04 <HAL_RCC_OscConfig+0x78>
 8000ef4:	4bb0      	ldr	r3, [pc, #704]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4baf      	ldr	r3, [pc, #700]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	430a      	orrs	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e020      	b.n	8000f46 <HAL_RCC_OscConfig+0xba>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	23a0      	movs	r3, #160	; 0xa0
 8000f0a:	02db      	lsls	r3, r3, #11
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d10e      	bne.n	8000f2e <HAL_RCC_OscConfig+0xa2>
 8000f10:	4ba9      	ldr	r3, [pc, #676]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4ba8      	ldr	r3, [pc, #672]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	02c9      	lsls	r1, r1, #11
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	4ba6      	ldr	r3, [pc, #664]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4ba5      	ldr	r3, [pc, #660]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0249      	lsls	r1, r1, #9
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e00b      	b.n	8000f46 <HAL_RCC_OscConfig+0xba>
 8000f2e:	4ba2      	ldr	r3, [pc, #648]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4ba1      	ldr	r3, [pc, #644]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f34:	49a1      	ldr	r1, [pc, #644]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000f36:	400a      	ands	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	4b9f      	ldr	r3, [pc, #636]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b9e      	ldr	r3, [pc, #632]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f40:	499f      	ldr	r1, [pc, #636]	; (80011c0 <HAL_RCC_OscConfig+0x334>)
 8000f42:	400a      	ands	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d014      	beq.n	8000f78 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fcbf 	bl	80008d0 <HAL_GetTick>
 8000f52:	0003      	movs	r3, r0
 8000f54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fcba 	bl	80008d0 <HAL_GetTick>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e293      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f6a:	4b93      	ldr	r3, [pc, #588]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	4013      	ands	r3, r2
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0xcc>
 8000f76:	e015      	b.n	8000fa4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fcaa 	bl	80008d0 <HAL_GetTick>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f82:	f7ff fca5 	bl	80008d0 <HAL_GetTick>
 8000f86:	0002      	movs	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b64      	cmp	r3, #100	; 0x64
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e27e      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f94:	4b88      	ldr	r3, [pc, #544]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	029b      	lsls	r3, r3, #10
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d1f0      	bne.n	8000f82 <HAL_RCC_OscConfig+0xf6>
 8000fa0:	e000      	b.n	8000fa4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4013      	ands	r3, r2
 8000fac:	d100      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x124>
 8000fae:	e099      	b.n	80010e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb0:	4b81      	ldr	r3, [pc, #516]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2238      	movs	r2, #56	; 0x38
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fba:	4b7f      	ldr	r3, [pc, #508]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d102      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x144>
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d002      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x14a>
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d135      	bne.n	8001042 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd6:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x162>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e251      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4b72      	ldr	r3, [pc, #456]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a74      	ldr	r2, [pc, #464]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	021a      	lsls	r2, r3, #8
 8000ffe:	4b6e      	ldr	r3, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001000:	430a      	orrs	r2, r1
 8001002:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d112      	bne.n	8001030 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800100a:	4b6b      	ldr	r3, [pc, #428]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a6e      	ldr	r2, [pc, #440]	; (80011c8 <HAL_RCC_OscConfig+0x33c>)
 8001010:	4013      	ands	r3, r2
 8001012:	0019      	movs	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800101e:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	0adb      	lsrs	r3, r3, #11
 8001024:	2207      	movs	r2, #7
 8001026:	4013      	ands	r3, r2
 8001028:	4a68      	ldr	r2, [pc, #416]	; (80011cc <HAL_RCC_OscConfig+0x340>)
 800102a:	40da      	lsrs	r2, r3
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <HAL_RCC_OscConfig+0x344>)
 800102e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001030:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <HAL_RCC_OscConfig+0x348>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff fbf1 	bl	800081c <HAL_InitTick>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d051      	beq.n	80010e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e227      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d030      	beq.n	80010ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a5e      	ldr	r2, [pc, #376]	; (80011c8 <HAL_RCC_OscConfig+0x33c>)
 8001050:	4013      	ands	r3, r2
 8001052:	0019      	movs	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800105e:	4b56      	ldr	r3, [pc, #344]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b55      	ldr	r3, [pc, #340]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0049      	lsls	r1, r1, #1
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106c:	f7ff fc30 	bl	80008d0 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001076:	f7ff fc2b 	bl	80008d0 <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e204      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001088:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4013      	ands	r3, r2
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a4a      	ldr	r2, [pc, #296]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 800109a:	4013      	ands	r3, r2
 800109c:	0019      	movs	r1, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	021a      	lsls	r2, r3, #8
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	e01b      	b.n	80010e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80010ac:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	4949      	ldr	r1, [pc, #292]	; (80011d8 <HAL_RCC_OscConfig+0x34c>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc0a 	bl	80008d0 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fc05 	bl	80008d0 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1de      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d4:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4013      	ands	r3, r2
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x236>
 80010e0:	e000      	b.n	80010e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2208      	movs	r2, #8
 80010ea:	4013      	ands	r3, r2
 80010ec:	d047      	beq.n	800117e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80010ee:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2238      	movs	r2, #56	; 0x38
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b18      	cmp	r3, #24
 80010f8:	d10a      	bne.n	8001110 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	d03c      	beq.n	800117e <HAL_RCC_OscConfig+0x2f2>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d138      	bne.n	800117e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e1c0      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d019      	beq.n	800114c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800111a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800111e:	2101      	movs	r1, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fbd4 	bl	80008d0 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fbcf 	bl	80008d0 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1a8      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d0f1      	beq.n	800112e <HAL_RCC_OscConfig+0x2a2>
 800114a:	e018      	b.n	800117e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 800114e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001152:	2101      	movs	r1, #1
 8001154:	438a      	bics	r2, r1
 8001156:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fbba 	bl	80008d0 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fbb5 	bl	80008d0 <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e18e      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d1f1      	bne.n	8001162 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2204      	movs	r2, #4
 8001184:	4013      	ands	r3, r2
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x2fe>
 8001188:	e0c6      	b.n	8001318 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	231f      	movs	r3, #31
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2238      	movs	r2, #56	; 0x38
 8001198:	4013      	ands	r3, r2
 800119a:	2b20      	cmp	r3, #32
 800119c:	d11e      	bne.n	80011dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x31e>
 80011a8:	e0b6      	b.n	8001318 <HAL_RCC_OscConfig+0x48c>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d000      	beq.n	80011b4 <HAL_RCC_OscConfig+0x328>
 80011b2:	e0b1      	b.n	8001318 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e16c      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
 80011b8:	40021000 	.word	0x40021000
 80011bc:	fffeffff 	.word	0xfffeffff
 80011c0:	fffbffff 	.word	0xfffbffff
 80011c4:	ffff80ff 	.word	0xffff80ff
 80011c8:	ffffc7ff 	.word	0xffffc7ff
 80011cc:	00f42400 	.word	0x00f42400
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004
 80011d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011dc:	4baf      	ldr	r3, [pc, #700]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80011de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	055b      	lsls	r3, r3, #21
 80011e4:	4013      	ands	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_OscConfig+0x360>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_RCC_OscConfig+0x362>
 80011ec:	2300      	movs	r3, #0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d011      	beq.n	8001216 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4baa      	ldr	r3, [pc, #680]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80011f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f6:	4ba9      	ldr	r3, [pc, #676]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0549      	lsls	r1, r1, #21
 80011fc:	430a      	orrs	r2, r1
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001200:	4ba6      	ldr	r3, [pc, #664]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	055b      	lsls	r3, r3, #21
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800120e:	231f      	movs	r3, #31
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001216:	4ba2      	ldr	r3, [pc, #648]	; (80014a0 <HAL_RCC_OscConfig+0x614>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4013      	ands	r3, r2
 8001220:	d11a      	bne.n	8001258 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001222:	4b9f      	ldr	r3, [pc, #636]	; (80014a0 <HAL_RCC_OscConfig+0x614>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b9e      	ldr	r3, [pc, #632]	; (80014a0 <HAL_RCC_OscConfig+0x614>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0049      	lsls	r1, r1, #1
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001230:	f7ff fb4e 	bl	80008d0 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff fb49 	bl	80008d0 <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e122      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800124c:	4b94      	ldr	r3, [pc, #592]	; (80014a0 <HAL_RCC_OscConfig+0x614>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4013      	ands	r3, r2
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x3e2>
 8001260:	4b8e      	ldr	r3, [pc, #568]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001264:	4b8d      	ldr	r3, [pc, #564]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001266:	2101      	movs	r1, #1
 8001268:	430a      	orrs	r2, r1
 800126a:	65da      	str	r2, [r3, #92]	; 0x5c
 800126c:	e01c      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x404>
 8001276:	4b89      	ldr	r3, [pc, #548]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001278:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800127a:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800127c:	2104      	movs	r1, #4
 800127e:	430a      	orrs	r2, r1
 8001280:	65da      	str	r2, [r3, #92]	; 0x5c
 8001282:	4b86      	ldr	r3, [pc, #536]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001286:	4b85      	ldr	r3, [pc, #532]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	65da      	str	r2, [r3, #92]	; 0x5c
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
 8001290:	4b82      	ldr	r3, [pc, #520]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001294:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001296:	2101      	movs	r1, #1
 8001298:	438a      	bics	r2, r1
 800129a:	65da      	str	r2, [r3, #92]	; 0x5c
 800129c:	4b7f      	ldr	r3, [pc, #508]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800129e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012a0:	4b7e      	ldr	r3, [pc, #504]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80012a2:	2104      	movs	r1, #4
 80012a4:	438a      	bics	r2, r1
 80012a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d014      	beq.n	80012da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fb0e 	bl	80008d0 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b8:	e009      	b.n	80012ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fb09 	bl	80008d0 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	4a77      	ldr	r2, [pc, #476]	; (80014a4 <HAL_RCC_OscConfig+0x618>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e0e1      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ce:	4b73      	ldr	r3, [pc, #460]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80012d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x42e>
 80012d8:	e013      	b.n	8001302 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff faf9 	bl	80008d0 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e2:	e009      	b.n	80012f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f7ff faf4 	bl	80008d0 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a6d      	ldr	r2, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x618>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0cc      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001302:	231f      	movs	r3, #31
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	4b63      	ldr	r3, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800130e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001310:	4b62      	ldr	r3, [pc, #392]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001312:	4965      	ldr	r1, [pc, #404]	; (80014a8 <HAL_RCC_OscConfig+0x61c>)
 8001314:	400a      	ands	r2, r1
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d100      	bne.n	8001322 <HAL_RCC_OscConfig+0x496>
 8001320:	e0b6      	b.n	8001490 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001322:	4b5e      	ldr	r3, [pc, #376]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2238      	movs	r2, #56	; 0x38
 8001328:	4013      	ands	r3, r2
 800132a:	2b10      	cmp	r3, #16
 800132c:	d100      	bne.n	8001330 <HAL_RCC_OscConfig+0x4a4>
 800132e:	e07e      	b.n	800142e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d153      	bne.n	80013e0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001338:	4b58      	ldr	r3, [pc, #352]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b57      	ldr	r3, [pc, #348]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800133e:	495b      	ldr	r1, [pc, #364]	; (80014ac <HAL_RCC_OscConfig+0x620>)
 8001340:	400a      	ands	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fac4 	bl	80008d0 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fabf 	bl	80008d0 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e098      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001360:	4b4e      	ldr	r3, [pc, #312]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	049b      	lsls	r3, r3, #18
 8001368:	4013      	ands	r3, r2
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800136c:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_RCC_OscConfig+0x624>)
 8001372:	4013      	ands	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	431a      	orrs	r2, r3
 8001394:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001396:	430a      	orrs	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	0449      	lsls	r1, r1, #17
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	0549      	lsls	r1, r1, #21
 80013b2:	430a      	orrs	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fa8b 	bl	80008d0 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff fa86 	bl	80008d0 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e05f      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	049b      	lsls	r3, r3, #18
 80013da:	4013      	ands	r3, r2
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x534>
 80013de:	e057      	b.n	8001490 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013e6:	4931      	ldr	r1, [pc, #196]	; (80014ac <HAL_RCC_OscConfig+0x620>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013f2:	2103      	movs	r1, #3
 80013f4:	438a      	bics	r2, r1
 80013f6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_RCC_OscConfig+0x610>)
 80013fe:	492d      	ldr	r1, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x628>)
 8001400:	400a      	ands	r2, r1
 8001402:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fa64 	bl	80008d0 <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff fa5f 	bl	80008d0 <HAL_GetTick>
 8001412:	0002      	movs	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e038      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_RCC_OscConfig+0x610>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	049b      	lsls	r3, r3, #18
 8001428:	4013      	ands	r3, r2
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x582>
 800142c:	e030      	b.n	8001490 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e02b      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_RCC_OscConfig+0x610>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2203      	movs	r2, #3
 8001444:	401a      	ands	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	429a      	cmp	r2, r3
 800144c:	d11e      	bne.n	800148c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2270      	movs	r2, #112	; 0x70
 8001452:	401a      	ands	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001458:	429a      	cmp	r2, r3
 800145a:	d117      	bne.n	800148c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	23fe      	movs	r3, #254	; 0xfe
 8001460:	01db      	lsls	r3, r3, #7
 8001462:	401a      	ands	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d10e      	bne.n	800148c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	23f8      	movs	r3, #248	; 0xf8
 8001472:	039b      	lsls	r3, r3, #14
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	0f5b      	lsrs	r3, r3, #29
 8001482:	075a      	lsls	r2, r3, #29
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b008      	add	sp, #32
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	40021000 	.word	0x40021000
 80014a0:	40007000 	.word	0x40007000
 80014a4:	00001388 	.word	0x00001388
 80014a8:	efffffff 	.word	0xefffffff
 80014ac:	feffffff 	.word	0xfeffffff
 80014b0:	1fc1808c 	.word	0x1fc1808c
 80014b4:	effeffff 	.word	0xeffeffff

080014b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0e9      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2207      	movs	r2, #7
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d91e      	bls.n	8001518 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2207      	movs	r2, #7
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014ec:	f7ff f9f0 	bl	80008d0 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014f4:	e009      	b.n	800150a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f6:	f7ff f9eb 	bl	80008d0 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_RCC_ClockConfig+0x1f4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0ca      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2207      	movs	r2, #7
 8001510:	4013      	ands	r3, r2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d1ee      	bne.n	80014f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d015      	beq.n	800154e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2204      	movs	r2, #4
 8001528:	4013      	ands	r3, r2
 800152a:	d006      	beq.n	800153a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800152c:	4b60      	ldr	r3, [pc, #384]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001532:	21e0      	movs	r1, #224	; 0xe0
 8001534:	01c9      	lsls	r1, r1, #7
 8001536:	430a      	orrs	r2, r1
 8001538:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153a:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4a5d      	ldr	r2, [pc, #372]	; (80016b4 <HAL_RCC_ClockConfig+0x1fc>)
 8001540:	4013      	ands	r3, r2
 8001542:	0019      	movs	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	4013      	ands	r3, r2
 8001556:	d057      	beq.n	8001608 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	029b      	lsls	r3, r3, #10
 8001568:	4013      	ands	r3, r2
 800156a:	d12b      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e097      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d107      	bne.n	8001588 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001578:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	049b      	lsls	r3, r3, #18
 8001580:	4013      	ands	r3, r2
 8001582:	d11f      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e08b      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4013      	ands	r3, r2
 800159a:	d113      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e07f      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e074      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e06d      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2207      	movs	r2, #7
 80015ca:	4393      	bics	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015d8:	f7ff f97a 	bl	80008d0 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e2:	f7ff f975 	bl	80008d0 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <HAL_RCC_ClockConfig+0x1f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e054      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2238      	movs	r2, #56	; 0x38
 80015fc:	401a      	ands	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	429a      	cmp	r2, r3
 8001606:	d1ec      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2207      	movs	r2, #7
 800160e:	4013      	ands	r3, r2
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d21e      	bcs.n	8001654 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2207      	movs	r2, #7
 800161c:	4393      	bics	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001628:	f7ff f952 	bl	80008d0 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001630:	e009      	b.n	8001646 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001632:	f7ff f94d 	bl	80008d0 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_RCC_ClockConfig+0x1f4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e02c      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2207      	movs	r2, #7
 800164c:	4013      	ands	r3, r2
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2204      	movs	r2, #4
 800165a:	4013      	ands	r3, r2
 800165c:	d009      	beq.n	8001672 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <HAL_RCC_ClockConfig+0x200>)
 8001664:	4013      	ands	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001672:	f000 f829 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001676:	0001      	movs	r1, r0
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_RCC_ClockConfig+0x1f8>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	220f      	movs	r2, #15
 8001680:	401a      	ands	r2, r3
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_RCC_ClockConfig+0x204>)
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	58d3      	ldr	r3, [r2, r3]
 8001688:	221f      	movs	r2, #31
 800168a:	4013      	ands	r3, r2
 800168c:	000a      	movs	r2, r1
 800168e:	40da      	lsrs	r2, r3
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_ClockConfig+0x208>)
 8001692:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_ClockConfig+0x20c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff f8bf 	bl	800081c <HAL_InitTick>
 800169e:	0003      	movs	r3, r0
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40022000 	.word	0x40022000
 80016ac:	00001388 	.word	0x00001388
 80016b0:	40021000 	.word	0x40021000
 80016b4:	fffff0ff 	.word	0xfffff0ff
 80016b8:	ffff8fff 	.word	0xffff8fff
 80016bc:	08002afc 	.word	0x08002afc
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2238      	movs	r2, #56	; 0x38
 80016d4:	4013      	ands	r3, r2
 80016d6:	d10f      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0adb      	lsrs	r3, r3, #11
 80016de:	2207      	movs	r2, #7
 80016e0:	4013      	ands	r3, r2
 80016e2:	2201      	movs	r2, #1
 80016e4:	409a      	lsls	r2, r3
 80016e6:	0013      	movs	r3, r2
 80016e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	4835      	ldr	r0, [pc, #212]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016ee:	f7fe fd0f 	bl	8000110 <__udivsi3>
 80016f2:	0003      	movs	r3, r0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e05d      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2238      	movs	r2, #56	; 0x38
 80016fe:	4013      	ands	r3, r2
 8001700:	2b08      	cmp	r3, #8
 8001702:	d102      	bne.n	800170a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	e054      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2238      	movs	r2, #56	; 0x38
 8001710:	4013      	ands	r3, r2
 8001712:	2b10      	cmp	r3, #16
 8001714:	d138      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2203      	movs	r2, #3
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	2207      	movs	r2, #7
 8001728:	4013      	ands	r3, r2
 800172a:	3301      	adds	r3, #1
 800172c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d10d      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001738:	f7fe fcea 	bl	8000110 <__udivsi3>
 800173c:	0003      	movs	r3, r0
 800173e:	0019      	movs	r1, r3
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	227f      	movs	r2, #127	; 0x7f
 8001748:	4013      	ands	r3, r2
 800174a:	434b      	muls	r3, r1
 800174c:	617b      	str	r3, [r7, #20]
        break;
 800174e:	e00d      	b.n	800176c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	481c      	ldr	r0, [pc, #112]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001754:	f7fe fcdc 	bl	8000110 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	0019      	movs	r1, r3
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	227f      	movs	r2, #127	; 0x7f
 8001764:	4013      	ands	r3, r2
 8001766:	434b      	muls	r3, r1
 8001768:	617b      	str	r3, [r7, #20]
        break;
 800176a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0f5b      	lsrs	r3, r3, #29
 8001772:	2207      	movs	r2, #7
 8001774:	4013      	ands	r3, r2
 8001776:	3301      	adds	r3, #1
 8001778:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	6978      	ldr	r0, [r7, #20]
 800177e:	f7fe fcc7 	bl	8000110 <__udivsi3>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	e015      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2238      	movs	r2, #56	; 0x38
 800178e:	4013      	ands	r3, r2
 8001790:	2b20      	cmp	r3, #32
 8001792:	d103      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2238      	movs	r2, #56	; 0x38
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b18      	cmp	r3, #24
 80017a6:	d103      	bne.n	80017b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017a8:	23fa      	movs	r3, #250	; 0xfa
 80017aa:	01db      	lsls	r3, r3, #7
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	e001      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017b4:	693b      	ldr	r3, [r7, #16]
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b006      	add	sp, #24
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000
 80017c4:	00f42400 	.word	0x00f42400
 80017c8:	007a1200 	.word	0x007a1200

080017cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_RCC_GetHCLKFreq+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000000 	.word	0x20000000

080017e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80017e4:	f7ff fff2 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 80017e8:	0004      	movs	r4, r0
 80017ea:	f7ff fb43 	bl	8000e74 <LL_RCC_GetAPB1Prescaler>
 80017ee:	0003      	movs	r3, r0
 80017f0:	0b1a      	lsrs	r2, r3, #12
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	58d3      	ldr	r3, [r2, r3]
 80017f8:	221f      	movs	r2, #31
 80017fa:	4013      	ands	r3, r2
 80017fc:	40dc      	lsrs	r4, r3
 80017fe:	0023      	movs	r3, r4
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bdb0      	pop	{r4, r5, r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	08002b3c 	.word	0x08002b3c

0800180c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001814:	2313      	movs	r3, #19
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800181c:	2312      	movs	r3, #18
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	029b      	lsls	r3, r3, #10
 800182c:	4013      	ands	r3, r2
 800182e:	d100      	bne.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001830:	e0a4      	b.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2311      	movs	r3, #17
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b87      	ldr	r3, [pc, #540]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800183c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	055b      	lsls	r3, r3, #21
 8001842:	4013      	ands	r3, r2
 8001844:	d111      	bne.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800184a:	4b83      	ldr	r3, [pc, #524]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0549      	lsls	r1, r1, #21
 8001850:	430a      	orrs	r2, r1
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	055b      	lsls	r3, r3, #21
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2311      	movs	r3, #17
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800186a:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0049      	lsls	r1, r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001878:	f7ff f82a 	bl	80008d0 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001880:	e00b      	b.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff f825 	bl	80008d0 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d904      	bls.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001890:	2313      	movs	r3, #19
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	2203      	movs	r2, #3
 8001896:	701a      	strb	r2, [r3, #0]
        break;
 8001898:	e005      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800189a:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	d0ed      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80018a6:	2313      	movs	r3, #19
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d154      	bne.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018b0:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d019      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d014      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018cc:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	4a63      	ldr	r2, [pc, #396]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018d6:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0249      	lsls	r1, r1, #9
 80018e0:	430a      	orrs	r2, r1
 80018e2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018e4:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018e8:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018ea:	495e      	ldr	r1, [pc, #376]	; (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d016      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7fe ffe7 	bl	80008d0 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001906:	e00c      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7fe ffe2 	bl	80008d0 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d904      	bls.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001918:	2313      	movs	r3, #19
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	2203      	movs	r2, #3
 800191e:	701a      	strb	r2, [r3, #0]
            break;
 8001920:	e004      	b.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2202      	movs	r2, #2
 8001928:	4013      	ands	r3, r2
 800192a:	d0ed      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800192c:	2313      	movs	r3, #19
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001936:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	4a49      	ldr	r2, [pc, #292]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800193c:	4013      	ands	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001946:	430a      	orrs	r2, r1
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c
 800194a:	e00c      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800194c:	2312      	movs	r3, #18
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2213      	movs	r2, #19
 8001952:	18ba      	adds	r2, r7, r2
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e005      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800195a:	2312      	movs	r3, #18
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2213      	movs	r2, #19
 8001960:	18ba      	adds	r2, r7, r2
 8001962:	7812      	ldrb	r2, [r2, #0]
 8001964:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001966:	2311      	movs	r3, #17
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001974:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001976:	493d      	ldr	r1, [pc, #244]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001978:	400a      	ands	r2, r1
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	4013      	ands	r3, r2
 8001984:	d009      	beq.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198a:	2203      	movs	r2, #3
 800198c:	4393      	bics	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001996:	430a      	orrs	r2, r1
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	220c      	movs	r2, #12
 80019aa:	4393      	bics	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2240      	movs	r2, #64	; 0x40
 80019be:	4013      	ands	r3, r2
 80019c0:	d009      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	4a2a      	ldr	r2, [pc, #168]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	01db      	lsls	r3, r3, #7
 80019de:	4013      	ands	r3, r2
 80019e0:	d015      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	0899      	lsrs	r1, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0249      	lsls	r1, r1, #9
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4013      	ands	r3, r2
 8001a18:	d016      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	01db      	lsls	r3, r3, #7
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d106      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	0249      	lsls	r1, r1, #9
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b006      	add	sp, #24
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	fffffcff 	.word	0xfffffcff
 8001a64:	fffeffff 	.word	0xfffeffff
 8001a68:	00001388 	.word	0x00001388
 8001a6c:	efffffff 	.word	0xefffffff
 8001a70:	ffffcfff 	.word	0xffffcfff
 8001a74:	ffff3fff 	.word	0xffff3fff

08001a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e046      	b.n	8001b18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	589b      	ldr	r3, [r3, r2]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d107      	bne.n	8001aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	227c      	movs	r2, #124	; 0x7c
 8001a98:	2100      	movs	r1, #0
 8001a9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7fe fe02 	bl	80006a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	2124      	movs	r1, #36	; 0x24
 8001aaa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 f8dc 	bl	8001c7c <UART_SetConfig>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e024      	b.n	8001b18 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 fd57 	bl	800258c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	490d      	ldr	r1, [pc, #52]	; (8001b20 <HAL_UART_Init+0xa8>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	212a      	movs	r1, #42	; 0x2a
 8001afa:	438a      	bics	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 fdef 	bl	80026f4 <UART_CheckIdleState>
 8001b16:	0003      	movs	r3, r0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	ffffb7ff 	.word	0xffffb7ff

08001b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	1dbb      	adds	r3, r7, #6
 8001b32:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	589b      	ldr	r3, [r3, r2]
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d000      	beq.n	8001b40 <HAL_UART_Transmit+0x1c>
 8001b3e:	e097      	b.n	8001c70 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_UART_Transmit+0x2a>
 8001b46:	1dbb      	adds	r3, r7, #6
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e08f      	b.n	8001c72 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	015b      	lsls	r3, r3, #5
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d109      	bne.n	8001b72 <HAL_UART_Transmit+0x4e>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d001      	beq.n	8001b72 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	227c      	movs	r2, #124	; 0x7c
 8001b76:	5c9b      	ldrb	r3, [r3, r2]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_UART_Transmit+0x5c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e078      	b.n	8001c72 <HAL_UART_Transmit+0x14e>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	227c      	movs	r2, #124	; 0x7c
 8001b84:	2101      	movs	r1, #1
 8001b86:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2288      	movs	r2, #136	; 0x88
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	2121      	movs	r1, #33	; 0x21
 8001b96:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001b98:	f7fe fe9a 	bl	80008d0 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1dba      	adds	r2, r7, #6
 8001ba4:	2154      	movs	r1, #84	; 0x54
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1dba      	adds	r2, r7, #6
 8001bae:	2156      	movs	r1, #86	; 0x56
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	015b      	lsls	r3, r3, #5
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d108      	bne.n	8001bd2 <HAL_UART_Transmit+0xae>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	e003      	b.n	8001bda <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bda:	e02c      	b.n	8001c36 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	0013      	movs	r3, r2
 8001be6:	2200      	movs	r2, #0
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	f000 fdcd 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e03d      	b.n	8001c72 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10b      	bne.n	8001c14 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	001a      	movs	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	05d2      	lsls	r2, r2, #23
 8001c08:	0dd2      	lsrs	r2, r2, #23
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e007      	b.n	8001c24 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2256      	movs	r2, #86	; 0x56
 8001c28:	5a9b      	ldrh	r3, [r3, r2]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b299      	uxth	r1, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2256      	movs	r2, #86	; 0x56
 8001c34:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2256      	movs	r2, #86	; 0x56
 8001c3a:	5a9b      	ldrh	r3, [r3, r2]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1cc      	bne.n	8001bdc <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2140      	movs	r1, #64	; 0x40
 8001c50:	f000 fd9a 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e00a      	b.n	8001c72 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	2120      	movs	r1, #32
 8001c62:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	227c      	movs	r2, #124	; 0x7c
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b008      	add	sp, #32
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c88:	231e      	movs	r3, #30
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4aba      	ldr	r2, [pc, #744]	; (8001fa8 <UART_SetConfig+0x32c>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4ab6      	ldr	r2, [pc, #728]	; (8001fac <UART_SetConfig+0x330>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4aad      	ldr	r2, [pc, #692]	; (8001fb0 <UART_SetConfig+0x334>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	220f      	movs	r2, #15
 8001d12:	4393      	bics	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4aa3      	ldr	r2, [pc, #652]	; (8001fb4 <UART_SetConfig+0x338>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d125      	bne.n	8001d78 <UART_SetConfig+0xfc>
 8001d2c:	4ba2      	ldr	r3, [pc, #648]	; (8001fb8 <UART_SetConfig+0x33c>)
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	2203      	movs	r2, #3
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d00f      	beq.n	8001d58 <UART_SetConfig+0xdc>
 8001d38:	d304      	bcc.n	8001d44 <UART_SetConfig+0xc8>
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d007      	beq.n	8001d4e <UART_SetConfig+0xd2>
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d00f      	beq.n	8001d62 <UART_SetConfig+0xe6>
 8001d42:	e013      	b.n	8001d6c <UART_SetConfig+0xf0>
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e05a      	b.n	8001e04 <UART_SetConfig+0x188>
 8001d4e:	231f      	movs	r3, #31
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e055      	b.n	8001e04 <UART_SetConfig+0x188>
 8001d58:	231f      	movs	r3, #31
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e050      	b.n	8001e04 <UART_SetConfig+0x188>
 8001d62:	231f      	movs	r3, #31
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2208      	movs	r2, #8
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	e04b      	b.n	8001e04 <UART_SetConfig+0x188>
 8001d6c:	231f      	movs	r3, #31
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2210      	movs	r2, #16
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	e045      	b.n	8001e04 <UART_SetConfig+0x188>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a8f      	ldr	r2, [pc, #572]	; (8001fbc <UART_SetConfig+0x340>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d128      	bne.n	8001dd4 <UART_SetConfig+0x158>
 8001d82:	4b8d      	ldr	r3, [pc, #564]	; (8001fb8 <UART_SetConfig+0x33c>)
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	220c      	movs	r2, #12
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d012      	beq.n	8001db4 <UART_SetConfig+0x138>
 8001d8e:	d802      	bhi.n	8001d96 <UART_SetConfig+0x11a>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <UART_SetConfig+0x124>
 8001d94:	e018      	b.n	8001dc8 <UART_SetConfig+0x14c>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d007      	beq.n	8001daa <UART_SetConfig+0x12e>
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d00f      	beq.n	8001dbe <UART_SetConfig+0x142>
 8001d9e:	e013      	b.n	8001dc8 <UART_SetConfig+0x14c>
 8001da0:	231f      	movs	r3, #31
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e02c      	b.n	8001e04 <UART_SetConfig+0x188>
 8001daa:	231f      	movs	r3, #31
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e027      	b.n	8001e04 <UART_SetConfig+0x188>
 8001db4:	231f      	movs	r3, #31
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2204      	movs	r2, #4
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e022      	b.n	8001e04 <UART_SetConfig+0x188>
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e01d      	b.n	8001e04 <UART_SetConfig+0x188>
 8001dc8:	231f      	movs	r3, #31
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2210      	movs	r2, #16
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	e017      	b.n	8001e04 <UART_SetConfig+0x188>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a79      	ldr	r2, [pc, #484]	; (8001fc0 <UART_SetConfig+0x344>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d104      	bne.n	8001de8 <UART_SetConfig+0x16c>
 8001dde:	231f      	movs	r3, #31
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e00d      	b.n	8001e04 <UART_SetConfig+0x188>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <UART_SetConfig+0x348>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d104      	bne.n	8001dfc <UART_SetConfig+0x180>
 8001df2:	231f      	movs	r3, #31
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e003      	b.n	8001e04 <UART_SetConfig+0x188>
 8001dfc:	231f      	movs	r3, #31
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2210      	movs	r2, #16
 8001e02:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d000      	beq.n	8001e12 <UART_SetConfig+0x196>
 8001e10:	e1de      	b.n	80021d0 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8001e12:	231f      	movs	r3, #31
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d100      	bne.n	8001e1e <UART_SetConfig+0x1a2>
 8001e1c:	e06c      	b.n	8001ef8 <UART_SetConfig+0x27c>
 8001e1e:	dc02      	bgt.n	8001e26 <UART_SetConfig+0x1aa>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <UART_SetConfig+0x1b8>
 8001e24:	e1ab      	b.n	800217e <UART_SetConfig+0x502>
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d100      	bne.n	8001e2c <UART_SetConfig+0x1b0>
 8001e2a:	e0e5      	b.n	8001ff8 <UART_SetConfig+0x37c>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d100      	bne.n	8001e32 <UART_SetConfig+0x1b6>
 8001e30:	e144      	b.n	80020bc <UART_SetConfig+0x440>
 8001e32:	e1a4      	b.n	800217e <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e34:	f7ff fcd4 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d044      	beq.n	8001ece <UART_SetConfig+0x252>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d03e      	beq.n	8001eca <UART_SetConfig+0x24e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d038      	beq.n	8001ec6 <UART_SetConfig+0x24a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d032      	beq.n	8001ec2 <UART_SetConfig+0x246>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d02c      	beq.n	8001ebe <UART_SetConfig+0x242>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d026      	beq.n	8001eba <UART_SetConfig+0x23e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d020      	beq.n	8001eb6 <UART_SetConfig+0x23a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	2b07      	cmp	r3, #7
 8001e7a:	d01a      	beq.n	8001eb2 <UART_SetConfig+0x236>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d014      	beq.n	8001eae <UART_SetConfig+0x232>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d00e      	beq.n	8001eaa <UART_SetConfig+0x22e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2b0a      	cmp	r3, #10
 8001e92:	d008      	beq.n	8001ea6 <UART_SetConfig+0x22a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2b0b      	cmp	r3, #11
 8001e9a:	d102      	bne.n	8001ea2 <UART_SetConfig+0x226>
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	e016      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e014      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	e012      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001eaa:	2340      	movs	r3, #64	; 0x40
 8001eac:	e010      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e00e      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	e00c      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	e00a      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001eba:	230a      	movs	r3, #10
 8001ebc:	e008      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	e006      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	e004      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e002      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e000      	b.n	8001ed0 <UART_SetConfig+0x254>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7fe f91c 	bl	8000110 <__udivsi3>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	005a      	lsls	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	18d2      	adds	r2, r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	0019      	movs	r1, r3
 8001eea:	0010      	movs	r0, r2
 8001eec:	f7fe f910 	bl	8000110 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	617b      	str	r3, [r7, #20]
        break;
 8001ef6:	e147      	b.n	8002188 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d043      	beq.n	8001f88 <UART_SetConfig+0x30c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d03d      	beq.n	8001f84 <UART_SetConfig+0x308>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d037      	beq.n	8001f80 <UART_SetConfig+0x304>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d031      	beq.n	8001f7c <UART_SetConfig+0x300>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d02b      	beq.n	8001f78 <UART_SetConfig+0x2fc>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d025      	beq.n	8001f74 <UART_SetConfig+0x2f8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2b06      	cmp	r3, #6
 8001f2e:	d01f      	beq.n	8001f70 <UART_SetConfig+0x2f4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	d019      	beq.n	8001f6c <UART_SetConfig+0x2f0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d013      	beq.n	8001f68 <UART_SetConfig+0x2ec>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2b09      	cmp	r3, #9
 8001f46:	d00d      	beq.n	8001f64 <UART_SetConfig+0x2e8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	2b0a      	cmp	r3, #10
 8001f4e:	d007      	beq.n	8001f60 <UART_SetConfig+0x2e4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2b0b      	cmp	r3, #11
 8001f56:	d101      	bne.n	8001f5c <UART_SetConfig+0x2e0>
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <UART_SetConfig+0x34c>)
 8001f5a:	e016      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <UART_SetConfig+0x350>)
 8001f5e:	e014      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <UART_SetConfig+0x354>)
 8001f62:	e012      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <UART_SetConfig+0x358>)
 8001f66:	e010      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <UART_SetConfig+0x35c>)
 8001f6a:	e00e      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <UART_SetConfig+0x360>)
 8001f6e:	e00c      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <UART_SetConfig+0x364>)
 8001f72:	e00a      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <UART_SetConfig+0x368>)
 8001f76:	e008      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <UART_SetConfig+0x36c>)
 8001f7a:	e006      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <UART_SetConfig+0x370>)
 8001f7e:	e004      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <UART_SetConfig+0x374>)
 8001f82:	e002      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <UART_SetConfig+0x378>)
 8001f86:	e000      	b.n	8001f8a <UART_SetConfig+0x30e>
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <UART_SetConfig+0x350>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6852      	ldr	r2, [r2, #4]
 8001f8e:	0852      	lsrs	r2, r2, #1
 8001f90:	189a      	adds	r2, r3, r2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0019      	movs	r1, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	f7fe f8b9 	bl	8000110 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	617b      	str	r3, [r7, #20]
        break;
 8001fa4:	e0f0      	b.n	8002188 <UART_SetConfig+0x50c>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	cfff69f3 	.word	0xcfff69f3
 8001fac:	ffffcfff 	.word	0xffffcfff
 8001fb0:	11fff4ff 	.word	0x11fff4ff
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40004400 	.word	0x40004400
 8001fc0:	40004800 	.word	0x40004800
 8001fc4:	40004c00 	.word	0x40004c00
 8001fc8:	0001e848 	.word	0x0001e848
 8001fcc:	01e84800 	.word	0x01e84800
 8001fd0:	0003d090 	.word	0x0003d090
 8001fd4:	0007a120 	.word	0x0007a120
 8001fd8:	000f4240 	.word	0x000f4240
 8001fdc:	001e8480 	.word	0x001e8480
 8001fe0:	0028b0aa 	.word	0x0028b0aa
 8001fe4:	0030d400 	.word	0x0030d400
 8001fe8:	003d0900 	.word	0x003d0900
 8001fec:	00516154 	.word	0x00516154
 8001ff0:	007a1200 	.word	0x007a1200
 8001ff4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ff8:	f7ff fb66 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	2b00      	cmp	r3, #0
 8002006:	d044      	beq.n	8002092 <UART_SetConfig+0x416>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2b01      	cmp	r3, #1
 800200e:	d03e      	beq.n	800208e <UART_SetConfig+0x412>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2b02      	cmp	r3, #2
 8002016:	d038      	beq.n	800208a <UART_SetConfig+0x40e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b03      	cmp	r3, #3
 800201e:	d032      	beq.n	8002086 <UART_SetConfig+0x40a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2b04      	cmp	r3, #4
 8002026:	d02c      	beq.n	8002082 <UART_SetConfig+0x406>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2b05      	cmp	r3, #5
 800202e:	d026      	beq.n	800207e <UART_SetConfig+0x402>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2b06      	cmp	r3, #6
 8002036:	d020      	beq.n	800207a <UART_SetConfig+0x3fe>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	2b07      	cmp	r3, #7
 800203e:	d01a      	beq.n	8002076 <UART_SetConfig+0x3fa>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	2b08      	cmp	r3, #8
 8002046:	d014      	beq.n	8002072 <UART_SetConfig+0x3f6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b09      	cmp	r3, #9
 800204e:	d00e      	beq.n	800206e <UART_SetConfig+0x3f2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2b0a      	cmp	r3, #10
 8002056:	d008      	beq.n	800206a <UART_SetConfig+0x3ee>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	2b0b      	cmp	r3, #11
 800205e:	d102      	bne.n	8002066 <UART_SetConfig+0x3ea>
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	e016      	b.n	8002094 <UART_SetConfig+0x418>
 8002066:	2301      	movs	r3, #1
 8002068:	e014      	b.n	8002094 <UART_SetConfig+0x418>
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	e012      	b.n	8002094 <UART_SetConfig+0x418>
 800206e:	2340      	movs	r3, #64	; 0x40
 8002070:	e010      	b.n	8002094 <UART_SetConfig+0x418>
 8002072:	2320      	movs	r3, #32
 8002074:	e00e      	b.n	8002094 <UART_SetConfig+0x418>
 8002076:	2310      	movs	r3, #16
 8002078:	e00c      	b.n	8002094 <UART_SetConfig+0x418>
 800207a:	230c      	movs	r3, #12
 800207c:	e00a      	b.n	8002094 <UART_SetConfig+0x418>
 800207e:	230a      	movs	r3, #10
 8002080:	e008      	b.n	8002094 <UART_SetConfig+0x418>
 8002082:	2308      	movs	r3, #8
 8002084:	e006      	b.n	8002094 <UART_SetConfig+0x418>
 8002086:	2306      	movs	r3, #6
 8002088:	e004      	b.n	8002094 <UART_SetConfig+0x418>
 800208a:	2304      	movs	r3, #4
 800208c:	e002      	b.n	8002094 <UART_SetConfig+0x418>
 800208e:	2302      	movs	r3, #2
 8002090:	e000      	b.n	8002094 <UART_SetConfig+0x418>
 8002092:	2301      	movs	r3, #1
 8002094:	0019      	movs	r1, r3
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7fe f83a 	bl	8000110 <__udivsi3>
 800209c:	0003      	movs	r3, r0
 800209e:	005a      	lsls	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	18d2      	adds	r2, r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	0019      	movs	r1, r3
 80020ae:	0010      	movs	r0, r2
 80020b0:	f7fe f82e 	bl	8000110 <__udivsi3>
 80020b4:	0003      	movs	r3, r0
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	617b      	str	r3, [r7, #20]
        break;
 80020ba:	e065      	b.n	8002188 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d04c      	beq.n	800215e <UART_SetConfig+0x4e2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d045      	beq.n	8002158 <UART_SetConfig+0x4dc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d03e      	beq.n	8002152 <UART_SetConfig+0x4d6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d038      	beq.n	800214e <UART_SetConfig+0x4d2>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d031      	beq.n	8002148 <UART_SetConfig+0x4cc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d02b      	beq.n	8002144 <UART_SetConfig+0x4c8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d025      	beq.n	8002140 <UART_SetConfig+0x4c4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2b07      	cmp	r3, #7
 80020fa:	d01e      	beq.n	800213a <UART_SetConfig+0x4be>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2b08      	cmp	r3, #8
 8002102:	d017      	beq.n	8002134 <UART_SetConfig+0x4b8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2b09      	cmp	r3, #9
 800210a:	d010      	beq.n	800212e <UART_SetConfig+0x4b2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b0a      	cmp	r3, #10
 8002112:	d009      	beq.n	8002128 <UART_SetConfig+0x4ac>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2b0b      	cmp	r3, #11
 800211a:	d102      	bne.n	8002122 <UART_SetConfig+0x4a6>
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	e01f      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	e01c      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	e019      	b.n	8002162 <UART_SetConfig+0x4e6>
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	e016      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	e013      	b.n	8002162 <UART_SetConfig+0x4e6>
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	e010      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002140:	4bb9      	ldr	r3, [pc, #740]	; (8002428 <UART_SetConfig+0x7ac>)
 8002142:	e00e      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002144:	4bb9      	ldr	r3, [pc, #740]	; (800242c <UART_SetConfig+0x7b0>)
 8002146:	e00c      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	019b      	lsls	r3, r3, #6
 800214c:	e009      	b.n	8002162 <UART_SetConfig+0x4e6>
 800214e:	4bb8      	ldr	r3, [pc, #736]	; (8002430 <UART_SetConfig+0x7b4>)
 8002150:	e007      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	01db      	lsls	r3, r3, #7
 8002156:	e004      	b.n	8002162 <UART_SetConfig+0x4e6>
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	e001      	b.n	8002162 <UART_SetConfig+0x4e6>
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	025b      	lsls	r3, r3, #9
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6852      	ldr	r2, [r2, #4]
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	189a      	adds	r2, r3, r2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f7fd ffcd 	bl	8000110 <__udivsi3>
 8002176:	0003      	movs	r3, r0
 8002178:	b29b      	uxth	r3, r3
 800217a:	617b      	str	r3, [r7, #20]
        break;
 800217c:	e004      	b.n	8002188 <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 800217e:	231e      	movs	r3, #30
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
        break;
 8002186:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d91b      	bls.n	80021c6 <UART_SetConfig+0x54a>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4aa8      	ldr	r2, [pc, #672]	; (8002434 <UART_SetConfig+0x7b8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d817      	bhi.n	80021c6 <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	b29a      	uxth	r2, r3
 800219a:	200a      	movs	r0, #10
 800219c:	183b      	adds	r3, r7, r0
 800219e:	210f      	movs	r1, #15
 80021a0:	438a      	bics	r2, r1
 80021a2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2207      	movs	r2, #7
 80021ac:	4013      	ands	r3, r2
 80021ae:	b299      	uxth	r1, r3
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	183a      	adds	r2, r7, r0
 80021b4:	8812      	ldrh	r2, [r2, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	183a      	adds	r2, r7, r0
 80021c0:	8812      	ldrh	r2, [r2, #0]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	e1c5      	b.n	8002552 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 80021c6:	231e      	movs	r3, #30
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e1c0      	b.n	8002552 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 80021d0:	231f      	movs	r3, #31
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d100      	bne.n	80021dc <UART_SetConfig+0x560>
 80021da:	e06c      	b.n	80022b6 <UART_SetConfig+0x63a>
 80021dc:	dc02      	bgt.n	80021e4 <UART_SetConfig+0x568>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <UART_SetConfig+0x576>
 80021e2:	e1a1      	b.n	8002528 <UART_SetConfig+0x8ac>
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d100      	bne.n	80021ea <UART_SetConfig+0x56e>
 80021e8:	e0bc      	b.n	8002364 <UART_SetConfig+0x6e8>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d100      	bne.n	80021f0 <UART_SetConfig+0x574>
 80021ee:	e13b      	b.n	8002468 <UART_SetConfig+0x7ec>
 80021f0:	e19a      	b.n	8002528 <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021f2:	f7ff faf5 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
 80021f6:	0003      	movs	r3, r0
 80021f8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d044      	beq.n	800228c <UART_SetConfig+0x610>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2b01      	cmp	r3, #1
 8002208:	d03e      	beq.n	8002288 <UART_SetConfig+0x60c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2b02      	cmp	r3, #2
 8002210:	d038      	beq.n	8002284 <UART_SetConfig+0x608>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b03      	cmp	r3, #3
 8002218:	d032      	beq.n	8002280 <UART_SetConfig+0x604>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b04      	cmp	r3, #4
 8002220:	d02c      	beq.n	800227c <UART_SetConfig+0x600>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	2b05      	cmp	r3, #5
 8002228:	d026      	beq.n	8002278 <UART_SetConfig+0x5fc>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b06      	cmp	r3, #6
 8002230:	d020      	beq.n	8002274 <UART_SetConfig+0x5f8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b07      	cmp	r3, #7
 8002238:	d01a      	beq.n	8002270 <UART_SetConfig+0x5f4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b08      	cmp	r3, #8
 8002240:	d014      	beq.n	800226c <UART_SetConfig+0x5f0>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b09      	cmp	r3, #9
 8002248:	d00e      	beq.n	8002268 <UART_SetConfig+0x5ec>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b0a      	cmp	r3, #10
 8002250:	d008      	beq.n	8002264 <UART_SetConfig+0x5e8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b0b      	cmp	r3, #11
 8002258:	d102      	bne.n	8002260 <UART_SetConfig+0x5e4>
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	e016      	b.n	800228e <UART_SetConfig+0x612>
 8002260:	2301      	movs	r3, #1
 8002262:	e014      	b.n	800228e <UART_SetConfig+0x612>
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	e012      	b.n	800228e <UART_SetConfig+0x612>
 8002268:	2340      	movs	r3, #64	; 0x40
 800226a:	e010      	b.n	800228e <UART_SetConfig+0x612>
 800226c:	2320      	movs	r3, #32
 800226e:	e00e      	b.n	800228e <UART_SetConfig+0x612>
 8002270:	2310      	movs	r3, #16
 8002272:	e00c      	b.n	800228e <UART_SetConfig+0x612>
 8002274:	230c      	movs	r3, #12
 8002276:	e00a      	b.n	800228e <UART_SetConfig+0x612>
 8002278:	230a      	movs	r3, #10
 800227a:	e008      	b.n	800228e <UART_SetConfig+0x612>
 800227c:	2308      	movs	r3, #8
 800227e:	e006      	b.n	800228e <UART_SetConfig+0x612>
 8002280:	2306      	movs	r3, #6
 8002282:	e004      	b.n	800228e <UART_SetConfig+0x612>
 8002284:	2304      	movs	r3, #4
 8002286:	e002      	b.n	800228e <UART_SetConfig+0x612>
 8002288:	2302      	movs	r3, #2
 800228a:	e000      	b.n	800228e <UART_SetConfig+0x612>
 800228c:	2301      	movs	r3, #1
 800228e:	0019      	movs	r1, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fd ff3d 	bl	8000110 <__udivsi3>
 8002296:	0003      	movs	r3, r0
 8002298:	001a      	movs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	18d2      	adds	r2, r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0019      	movs	r1, r3
 80022a8:	0010      	movs	r0, r2
 80022aa:	f7fd ff31 	bl	8000110 <__udivsi3>
 80022ae:	0003      	movs	r3, r0
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	617b      	str	r3, [r7, #20]
        break;
 80022b4:	e13d      	b.n	8002532 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d043      	beq.n	8002346 <UART_SetConfig+0x6ca>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d03d      	beq.n	8002342 <UART_SetConfig+0x6c6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d037      	beq.n	800233e <UART_SetConfig+0x6c2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d031      	beq.n	800233a <UART_SetConfig+0x6be>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d02b      	beq.n	8002336 <UART_SetConfig+0x6ba>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d025      	beq.n	8002332 <UART_SetConfig+0x6b6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d01f      	beq.n	800232e <UART_SetConfig+0x6b2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2b07      	cmp	r3, #7
 80022f4:	d019      	beq.n	800232a <UART_SetConfig+0x6ae>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d013      	beq.n	8002326 <UART_SetConfig+0x6aa>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	2b09      	cmp	r3, #9
 8002304:	d00d      	beq.n	8002322 <UART_SetConfig+0x6a6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b0a      	cmp	r3, #10
 800230c:	d007      	beq.n	800231e <UART_SetConfig+0x6a2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b0b      	cmp	r3, #11
 8002314:	d101      	bne.n	800231a <UART_SetConfig+0x69e>
 8002316:	4b48      	ldr	r3, [pc, #288]	; (8002438 <UART_SetConfig+0x7bc>)
 8002318:	e016      	b.n	8002348 <UART_SetConfig+0x6cc>
 800231a:	4b48      	ldr	r3, [pc, #288]	; (800243c <UART_SetConfig+0x7c0>)
 800231c:	e014      	b.n	8002348 <UART_SetConfig+0x6cc>
 800231e:	4b48      	ldr	r3, [pc, #288]	; (8002440 <UART_SetConfig+0x7c4>)
 8002320:	e012      	b.n	8002348 <UART_SetConfig+0x6cc>
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <UART_SetConfig+0x7c8>)
 8002324:	e010      	b.n	8002348 <UART_SetConfig+0x6cc>
 8002326:	4b48      	ldr	r3, [pc, #288]	; (8002448 <UART_SetConfig+0x7cc>)
 8002328:	e00e      	b.n	8002348 <UART_SetConfig+0x6cc>
 800232a:	4b48      	ldr	r3, [pc, #288]	; (800244c <UART_SetConfig+0x7d0>)
 800232c:	e00c      	b.n	8002348 <UART_SetConfig+0x6cc>
 800232e:	4b48      	ldr	r3, [pc, #288]	; (8002450 <UART_SetConfig+0x7d4>)
 8002330:	e00a      	b.n	8002348 <UART_SetConfig+0x6cc>
 8002332:	4b48      	ldr	r3, [pc, #288]	; (8002454 <UART_SetConfig+0x7d8>)
 8002334:	e008      	b.n	8002348 <UART_SetConfig+0x6cc>
 8002336:	4b48      	ldr	r3, [pc, #288]	; (8002458 <UART_SetConfig+0x7dc>)
 8002338:	e006      	b.n	8002348 <UART_SetConfig+0x6cc>
 800233a:	4b48      	ldr	r3, [pc, #288]	; (800245c <UART_SetConfig+0x7e0>)
 800233c:	e004      	b.n	8002348 <UART_SetConfig+0x6cc>
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <UART_SetConfig+0x7e4>)
 8002340:	e002      	b.n	8002348 <UART_SetConfig+0x6cc>
 8002342:	4b48      	ldr	r3, [pc, #288]	; (8002464 <UART_SetConfig+0x7e8>)
 8002344:	e000      	b.n	8002348 <UART_SetConfig+0x6cc>
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <UART_SetConfig+0x7c0>)
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6852      	ldr	r2, [r2, #4]
 800234c:	0852      	lsrs	r2, r2, #1
 800234e:	189a      	adds	r2, r3, r2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0019      	movs	r1, r3
 8002356:	0010      	movs	r0, r2
 8002358:	f7fd feda 	bl	8000110 <__udivsi3>
 800235c:	0003      	movs	r3, r0
 800235e:	b29b      	uxth	r3, r3
 8002360:	617b      	str	r3, [r7, #20]
        break;
 8002362:	e0e6      	b.n	8002532 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002364:	f7ff f9b0 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8002368:	0003      	movs	r3, r0
 800236a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2b00      	cmp	r3, #0
 8002372:	d044      	beq.n	80023fe <UART_SetConfig+0x782>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b01      	cmp	r3, #1
 800237a:	d03e      	beq.n	80023fa <UART_SetConfig+0x77e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	2b02      	cmp	r3, #2
 8002382:	d038      	beq.n	80023f6 <UART_SetConfig+0x77a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b03      	cmp	r3, #3
 800238a:	d032      	beq.n	80023f2 <UART_SetConfig+0x776>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2b04      	cmp	r3, #4
 8002392:	d02c      	beq.n	80023ee <UART_SetConfig+0x772>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2b05      	cmp	r3, #5
 800239a:	d026      	beq.n	80023ea <UART_SetConfig+0x76e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2b06      	cmp	r3, #6
 80023a2:	d020      	beq.n	80023e6 <UART_SetConfig+0x76a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	2b07      	cmp	r3, #7
 80023aa:	d01a      	beq.n	80023e2 <UART_SetConfig+0x766>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d014      	beq.n	80023de <UART_SetConfig+0x762>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d00e      	beq.n	80023da <UART_SetConfig+0x75e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d008      	beq.n	80023d6 <UART_SetConfig+0x75a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2b0b      	cmp	r3, #11
 80023ca:	d102      	bne.n	80023d2 <UART_SetConfig+0x756>
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	e016      	b.n	8002400 <UART_SetConfig+0x784>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e014      	b.n	8002400 <UART_SetConfig+0x784>
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	e012      	b.n	8002400 <UART_SetConfig+0x784>
 80023da:	2340      	movs	r3, #64	; 0x40
 80023dc:	e010      	b.n	8002400 <UART_SetConfig+0x784>
 80023de:	2320      	movs	r3, #32
 80023e0:	e00e      	b.n	8002400 <UART_SetConfig+0x784>
 80023e2:	2310      	movs	r3, #16
 80023e4:	e00c      	b.n	8002400 <UART_SetConfig+0x784>
 80023e6:	230c      	movs	r3, #12
 80023e8:	e00a      	b.n	8002400 <UART_SetConfig+0x784>
 80023ea:	230a      	movs	r3, #10
 80023ec:	e008      	b.n	8002400 <UART_SetConfig+0x784>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e006      	b.n	8002400 <UART_SetConfig+0x784>
 80023f2:	2306      	movs	r3, #6
 80023f4:	e004      	b.n	8002400 <UART_SetConfig+0x784>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e002      	b.n	8002400 <UART_SetConfig+0x784>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e000      	b.n	8002400 <UART_SetConfig+0x784>
 80023fe:	2301      	movs	r3, #1
 8002400:	0019      	movs	r1, r3
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f7fd fe84 	bl	8000110 <__udivsi3>
 8002408:	0003      	movs	r3, r0
 800240a:	001a      	movs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	18d2      	adds	r2, r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0019      	movs	r1, r3
 800241a:	0010      	movs	r0, r2
 800241c:	f7fd fe78 	bl	8000110 <__udivsi3>
 8002420:	0003      	movs	r3, r0
 8002422:	b29b      	uxth	r3, r3
 8002424:	617b      	str	r3, [r7, #20]
        break;
 8002426:	e084      	b.n	8002532 <UART_SetConfig+0x8b6>
 8002428:	00001554 	.word	0x00001554
 800242c:	00001998 	.word	0x00001998
 8002430:	00002aaa 	.word	0x00002aaa
 8002434:	0000ffff 	.word	0x0000ffff
 8002438:	0000f424 	.word	0x0000f424
 800243c:	00f42400 	.word	0x00f42400
 8002440:	0001e848 	.word	0x0001e848
 8002444:	0003d090 	.word	0x0003d090
 8002448:	0007a120 	.word	0x0007a120
 800244c:	000f4240 	.word	0x000f4240
 8002450:	00145855 	.word	0x00145855
 8002454:	00186a00 	.word	0x00186a00
 8002458:	001e8480 	.word	0x001e8480
 800245c:	0028b0aa 	.word	0x0028b0aa
 8002460:	003d0900 	.word	0x003d0900
 8002464:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04b      	beq.n	8002508 <UART_SetConfig+0x88c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2b01      	cmp	r3, #1
 8002476:	d044      	beq.n	8002502 <UART_SetConfig+0x886>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2b02      	cmp	r3, #2
 800247e:	d03d      	beq.n	80024fc <UART_SetConfig+0x880>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b03      	cmp	r3, #3
 8002486:	d037      	beq.n	80024f8 <UART_SetConfig+0x87c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b04      	cmp	r3, #4
 800248e:	d030      	beq.n	80024f2 <UART_SetConfig+0x876>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	2b05      	cmp	r3, #5
 8002496:	d02a      	beq.n	80024ee <UART_SetConfig+0x872>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b06      	cmp	r3, #6
 800249e:	d024      	beq.n	80024ea <UART_SetConfig+0x86e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	d01d      	beq.n	80024e4 <UART_SetConfig+0x868>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d016      	beq.n	80024de <UART_SetConfig+0x862>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d00f      	beq.n	80024d8 <UART_SetConfig+0x85c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b0a      	cmp	r3, #10
 80024be:	d008      	beq.n	80024d2 <UART_SetConfig+0x856>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	2b0b      	cmp	r3, #11
 80024c6:	d101      	bne.n	80024cc <UART_SetConfig+0x850>
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	e01f      	b.n	800250c <UART_SetConfig+0x890>
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	e01c      	b.n	800250c <UART_SetConfig+0x890>
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	e019      	b.n	800250c <UART_SetConfig+0x890>
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	e016      	b.n	800250c <UART_SetConfig+0x890>
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	e013      	b.n	800250c <UART_SetConfig+0x890>
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	e010      	b.n	800250c <UART_SetConfig+0x890>
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <UART_SetConfig+0x900>)
 80024ec:	e00e      	b.n	800250c <UART_SetConfig+0x890>
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <UART_SetConfig+0x904>)
 80024f0:	e00c      	b.n	800250c <UART_SetConfig+0x890>
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	015b      	lsls	r3, r3, #5
 80024f6:	e009      	b.n	800250c <UART_SetConfig+0x890>
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <UART_SetConfig+0x908>)
 80024fa:	e007      	b.n	800250c <UART_SetConfig+0x890>
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	019b      	lsls	r3, r3, #6
 8002500:	e004      	b.n	800250c <UART_SetConfig+0x890>
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	01db      	lsls	r3, r3, #7
 8002506:	e001      	b.n	800250c <UART_SetConfig+0x890>
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6852      	ldr	r2, [r2, #4]
 8002510:	0852      	lsrs	r2, r2, #1
 8002512:	189a      	adds	r2, r3, r2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0019      	movs	r1, r3
 800251a:	0010      	movs	r0, r2
 800251c:	f7fd fdf8 	bl	8000110 <__udivsi3>
 8002520:	0003      	movs	r3, r0
 8002522:	b29b      	uxth	r3, r3
 8002524:	617b      	str	r3, [r7, #20]
        break;
 8002526:	e004      	b.n	8002532 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 8002528:	231e      	movs	r3, #30
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
        break;
 8002530:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d908      	bls.n	800254a <UART_SetConfig+0x8ce>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <UART_SetConfig+0x90c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d804      	bhi.n	800254a <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	e003      	b.n	8002552 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800254a:	231e      	movs	r3, #30
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	226a      	movs	r2, #106	; 0x6a
 8002556:	2101      	movs	r1, #1
 8002558:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2268      	movs	r2, #104	; 0x68
 800255e:	2101      	movs	r1, #1
 8002560:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800256e:	231e      	movs	r3, #30
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b008      	add	sp, #32
 800257a:	bd80      	pop	{r7, pc}
 800257c:	00000aaa 	.word	0x00000aaa
 8002580:	00000ccc 	.word	0x00000ccc
 8002584:	00001555 	.word	0x00001555
 8002588:	0000ffff 	.word	0x0000ffff

0800258c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	2201      	movs	r2, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d00b      	beq.n	80025b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <UART_AdvFeatureConfig+0x144>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	2202      	movs	r2, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d00b      	beq.n	80025d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a43      	ldr	r2, [pc, #268]	; (80026d4 <UART_AdvFeatureConfig+0x148>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	2204      	movs	r2, #4
 80025de:	4013      	ands	r3, r2
 80025e0:	d00b      	beq.n	80025fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <UART_AdvFeatureConfig+0x14c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	2208      	movs	r2, #8
 8002600:	4013      	ands	r3, r2
 8002602:	d00b      	beq.n	800261c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a34      	ldr	r2, [pc, #208]	; (80026dc <UART_AdvFeatureConfig+0x150>)
 800260c:	4013      	ands	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2210      	movs	r2, #16
 8002622:	4013      	ands	r3, r2
 8002624:	d00b      	beq.n	800263e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <UART_AdvFeatureConfig+0x154>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	2220      	movs	r2, #32
 8002644:	4013      	ands	r3, r2
 8002646:	d00b      	beq.n	8002660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <UART_AdvFeatureConfig+0x158>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	2240      	movs	r2, #64	; 0x40
 8002666:	4013      	ands	r3, r2
 8002668:	d01d      	beq.n	80026a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <UART_AdvFeatureConfig+0x15c>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	035b      	lsls	r3, r3, #13
 800268a:	429a      	cmp	r2, r3
 800268c:	d10b      	bne.n	80026a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <UART_AdvFeatureConfig+0x160>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	4013      	ands	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <UART_AdvFeatureConfig+0x164>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
  }
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	fffdffff 	.word	0xfffdffff
 80026d4:	fffeffff 	.word	0xfffeffff
 80026d8:	fffbffff 	.word	0xfffbffff
 80026dc:	ffff7fff 	.word	0xffff7fff
 80026e0:	ffffefff 	.word	0xffffefff
 80026e4:	ffffdfff 	.word	0xffffdfff
 80026e8:	ffefffff 	.word	0xffefffff
 80026ec:	ff9fffff 	.word	0xff9fffff
 80026f0:	fff7ffff 	.word	0xfff7ffff

080026f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2288      	movs	r2, #136	; 0x88
 8002700:	2100      	movs	r1, #0
 8002702:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002704:	f7fe f8e4 	bl	80008d0 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2208      	movs	r2, #8
 8002714:	4013      	ands	r3, r2
 8002716:	2b08      	cmp	r3, #8
 8002718:	d10d      	bne.n	8002736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	0399      	lsls	r1, r3, #14
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <UART_CheckIdleState+0x90>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	0013      	movs	r3, r2
 8002728:	2200      	movs	r2, #0
 800272a:	f000 f82d 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d001      	beq.n	8002736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e021      	b.n	800277a <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2204      	movs	r2, #4
 800273e:	4013      	ands	r3, r2
 8002740:	2b04      	cmp	r3, #4
 8002742:	d10d      	bne.n	8002760 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	03d9      	lsls	r1, r3, #15
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <UART_CheckIdleState+0x90>)
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	0013      	movs	r3, r2
 8002752:	2200      	movs	r2, #0
 8002754:	f000 f818 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e00c      	b.n	800277a <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	2120      	movs	r1, #32
 8002766:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2284      	movs	r2, #132	; 0x84
 800276c:	2120      	movs	r1, #32
 800276e:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	227c      	movs	r2, #124	; 0x7c
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	01ffffff 	.word	0x01ffffff

08002788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002798:	e02b      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3301      	adds	r3, #1
 800279e:	d028      	beq.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a0:	f7fe f896 	bl	80008d0 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d302      	bcc.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11d      	bne.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <UART_WaitOnFlagUntilTimeout+0x94>)
 80027c2:	400a      	ands	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	438a      	bics	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	2120      	movs	r1, #32
 80027dc:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2284      	movs	r2, #132	; 0x84
 80027e2:	2120      	movs	r1, #32
 80027e4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	227c      	movs	r2, #124	; 0x7c
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e00f      	b.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	425a      	negs	r2, r3
 8002802:	4153      	adcs	r3, r2
 8002804:	b2db      	uxtb	r3, r3
 8002806:	001a      	movs	r2, r3
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d0c4      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b004      	add	sp, #16
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	fffffe5f 	.word	0xfffffe5f

08002820 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	227c      	movs	r2, #124	; 0x7c
 800282c:	5c9b      	ldrb	r3, [r3, r2]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_UARTEx_DisableFifoMode+0x16>
 8002832:	2302      	movs	r3, #2
 8002834:	e027      	b.n	8002886 <HAL_UARTEx_DisableFifoMode+0x66>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	227c      	movs	r2, #124	; 0x7c
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	2124      	movs	r1, #36	; 0x24
 8002844:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	438a      	bics	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	2120      	movs	r1, #32
 800287a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	227c      	movs	r2, #124	; 0x7c
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	dfffffff 	.word	0xdfffffff

08002894 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	227c      	movs	r2, #124	; 0x7c
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e02e      	b.n	800290a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	227c      	movs	r2, #124	; 0x7c
 80028b0:	2101      	movs	r1, #1
 80028b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	2124      	movs	r1, #36	; 0x24
 80028ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2101      	movs	r1, #1
 80028d0:	438a      	bics	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	08d9      	lsrs	r1, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f854 	bl	8002998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	2120      	movs	r1, #32
 80028fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	227c      	movs	r2, #124	; 0x7c
 8002904:	2100      	movs	r1, #0
 8002906:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	227c      	movs	r2, #124	; 0x7c
 8002922:	5c9b      	ldrb	r3, [r3, r2]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e02f      	b.n	800298c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	227c      	movs	r2, #124	; 0x7c
 8002930:	2101      	movs	r1, #1
 8002932:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	2124      	movs	r1, #36	; 0x24
 800293a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 f813 	bl	8002998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	2120      	movs	r1, #32
 8002980:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	227c      	movs	r2, #124	; 0x7c
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}
 8002994:	f1ffffff 	.word	0xf1ffffff

08002998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80029a0:	2314      	movs	r3, #20
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <UARTEx_SetNbDataToProcess+0xcc>)
 80029a6:	ca03      	ldmia	r2!, {r0, r1}
 80029a8:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80029aa:	230c      	movs	r3, #12
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <UARTEx_SetNbDataToProcess+0xd0>)
 80029b0:	ca03      	ldmia	r2!, {r0, r1}
 80029b2:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d108      	bne.n	80029ce <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	226a      	movs	r2, #106	; 0x6a
 80029c0:	2101      	movs	r1, #1
 80029c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2268      	movs	r2, #104	; 0x68
 80029c8:	2101      	movs	r1, #1
 80029ca:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80029cc:	e046      	b.n	8002a5c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80029ce:	261f      	movs	r6, #31
 80029d0:	19bb      	adds	r3, r7, r6
 80029d2:	2208      	movs	r2, #8
 80029d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80029d6:	201e      	movs	r0, #30
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	2208      	movs	r2, #8
 80029dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	0e5b      	lsrs	r3, r3, #25
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	241d      	movs	r4, #29
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	2107      	movs	r1, #7
 80029ee:	400a      	ands	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	0f5b      	lsrs	r3, r3, #29
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	251c      	movs	r5, #28
 80029fe:	197b      	adds	r3, r7, r5
 8002a00:	2107      	movs	r1, #7
 8002a02:	400a      	ands	r2, r1
 8002a04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	197a      	adds	r2, r7, r5
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	2114      	movs	r1, #20
 8002a10:	1879      	adds	r1, r7, r1
 8002a12:	5c8a      	ldrb	r2, [r1, r2]
 8002a14:	435a      	muls	r2, r3
 8002a16:	0010      	movs	r0, r2
 8002a18:	197b      	adds	r3, r7, r5
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	250c      	movs	r5, #12
 8002a1e:	197a      	adds	r2, r7, r5
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	0019      	movs	r1, r3
 8002a24:	f7fd fbfe 	bl	8000224 <__divsi3>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	b299      	uxth	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	226a      	movs	r2, #106	; 0x6a
 8002a30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002a32:	19bb      	adds	r3, r7, r6
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	193a      	adds	r2, r7, r4
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	2114      	movs	r1, #20
 8002a3c:	1879      	adds	r1, r7, r1
 8002a3e:	5c8a      	ldrb	r2, [r1, r2]
 8002a40:	435a      	muls	r2, r3
 8002a42:	0010      	movs	r0, r2
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	197a      	adds	r2, r7, r5
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	f7fd fbe9 	bl	8000224 <__divsi3>
 8002a52:	0003      	movs	r3, r0
 8002a54:	b299      	uxth	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2268      	movs	r2, #104	; 0x68
 8002a5a:	5299      	strh	r1, [r3, r2]
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b009      	add	sp, #36	; 0x24
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a64:	08002aec 	.word	0x08002aec
 8002a68:	08002af4 	.word	0x08002af4

08002a6c <__libc_init_array>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	2600      	movs	r6, #0
 8002a70:	4d0c      	ldr	r5, [pc, #48]	; (8002aa4 <__libc_init_array+0x38>)
 8002a72:	4c0d      	ldr	r4, [pc, #52]	; (8002aa8 <__libc_init_array+0x3c>)
 8002a74:	1b64      	subs	r4, r4, r5
 8002a76:	10a4      	asrs	r4, r4, #2
 8002a78:	42a6      	cmp	r6, r4
 8002a7a:	d109      	bne.n	8002a90 <__libc_init_array+0x24>
 8002a7c:	2600      	movs	r6, #0
 8002a7e:	f000 f821 	bl	8002ac4 <_init>
 8002a82:	4d0a      	ldr	r5, [pc, #40]	; (8002aac <__libc_init_array+0x40>)
 8002a84:	4c0a      	ldr	r4, [pc, #40]	; (8002ab0 <__libc_init_array+0x44>)
 8002a86:	1b64      	subs	r4, r4, r5
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	42a6      	cmp	r6, r4
 8002a8c:	d105      	bne.n	8002a9a <__libc_init_array+0x2e>
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	00b3      	lsls	r3, r6, #2
 8002a92:	58eb      	ldr	r3, [r5, r3]
 8002a94:	4798      	blx	r3
 8002a96:	3601      	adds	r6, #1
 8002a98:	e7ee      	b.n	8002a78 <__libc_init_array+0xc>
 8002a9a:	00b3      	lsls	r3, r6, #2
 8002a9c:	58eb      	ldr	r3, [r5, r3]
 8002a9e:	4798      	blx	r3
 8002aa0:	3601      	adds	r6, #1
 8002aa2:	e7f2      	b.n	8002a8a <__libc_init_array+0x1e>
 8002aa4:	08002b5c 	.word	0x08002b5c
 8002aa8:	08002b5c 	.word	0x08002b5c
 8002aac:	08002b5c 	.word	0x08002b5c
 8002ab0:	08002b60 	.word	0x08002b60

08002ab4 <memset>:
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	1812      	adds	r2, r2, r0
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d100      	bne.n	8002abe <memset+0xa>
 8002abc:	4770      	bx	lr
 8002abe:	7019      	strb	r1, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	e7f9      	b.n	8002ab8 <memset+0x4>

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
