
controllo_vitali.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c58  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d80  08002d80  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002d80  08002d80  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d80  08002d80  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000014  08002d9c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002d9c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000816d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fa  00000000  00000000  000281a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  000298a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  00029ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013f3e  00000000  00000000  0002a680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000713a  00000000  00000000  0003e5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d49e  00000000  00000000  000456f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2b96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018a8  00000000  00000000  000c2c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002cf8 	.word	0x08002cf8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08002cf8 	.word	0x08002cf8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fae2 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f807 	bl	8000406 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f8e6 	bl	80005c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fc:	f000 f862 	bl	80004c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000400:	f000 f8ae 	bl	8000560 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000404:	e7fe      	b.n	8000404 <main+0x18>

08000406 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000406:	b590      	push	{r4, r7, lr}
 8000408:	b099      	sub	sp, #100	; 0x64
 800040a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040c:	242c      	movs	r4, #44	; 0x2c
 800040e:	193b      	adds	r3, r7, r4
 8000410:	0018      	movs	r0, r3
 8000412:	2334      	movs	r3, #52	; 0x34
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f002 fc66 	bl	8002ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	231c      	movs	r3, #28
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	0018      	movs	r0, r3
 8000422:	2310      	movs	r3, #16
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f002 fc5e 	bl	8002ce8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042c:	003b      	movs	r3, r7
 800042e:	0018      	movs	r0, r3
 8000430:	231c      	movs	r3, #28
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f002 fc57 	bl	8002ce8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fdf2 	bl	8001028 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000444:	193b      	adds	r3, r7, r4
 8000446:	2202      	movs	r2, #2
 8000448:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2240      	movs	r2, #64	; 0x40
 800045c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2200      	movs	r2, #0
 8000462:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fe2a 	bl	80010c0 <HAL_RCC_OscConfig>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000470:	f000 f920 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	211c      	movs	r1, #28
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2207      	movs	r2, #7
 800047a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2100      	movs	r1, #0
 8000492:	0018      	movs	r0, r3
 8000494:	f001 f92a 	bl	80016ec <HAL_RCC_ClockConfig>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800049c:	f000 f90a 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2202      	movs	r2, #2
 80004a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	003b      	movs	r3, r7
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 fac6 	bl	8001a40 <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004b8:	f000 f8fc 	bl	80006b4 <Error_Handler>
  }
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b019      	add	sp, #100	; 0x64
 80004c2:	bd90      	pop	{r4, r7, pc}

080004c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004ca:	4a24      	ldr	r2, [pc, #144]	; (800055c <MX_USART2_UART_Init+0x98>)
 80004cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004ce:	4b22      	ldr	r3, [pc, #136]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004d0:	2296      	movs	r2, #150	; 0x96
 80004d2:	0192      	lsls	r2, r2, #6
 80004d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_USART2_UART_Init+0x94>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <MX_USART2_UART_Init+0x94>)
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_USART2_UART_Init+0x94>)
 8000508:	2200      	movs	r2, #0
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_USART2_UART_Init+0x94>)
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fbcc 	bl	8001cac <HAL_UART_Init>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000518:	f000 f8cc 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_USART2_UART_Init+0x94>)
 800051e:	2100      	movs	r1, #0
 8000520:	0018      	movs	r0, r3
 8000522:	f002 fad1 	bl	8002ac8 <HAL_UARTEx_SetTxFifoThreshold>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800052a:	f000 f8c3 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <MX_USART2_UART_Init+0x94>)
 8000530:	2100      	movs	r1, #0
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fb08 	bl	8002b48 <HAL_UARTEx_SetRxFifoThreshold>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800053c:	f000 f8ba 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_USART2_UART_Init+0x94>)
 8000542:	0018      	movs	r0, r3
 8000544:	f002 fa86 	bl	8002a54 <HAL_UARTEx_DisableFifoMode>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800054c:	f000 f8b2 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	200000bc 	.word	0x200000bc
 800055c:	40004400 	.word	0x40004400

08000560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_USART3_UART_Init+0x64>)
 8000568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 800056c:	2296      	movs	r2, #150	; 0x96
 800056e:	0192      	lsls	r2, r2, #6
 8000570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 8000586:	220c      	movs	r2, #12
 8000588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MX_USART3_UART_Init+0x60>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fb7e 	bl	8001cac <HAL_UART_Init>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80005b4:	f000 f87e 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000030 	.word	0x20000030
 80005c4:	40004800 	.word	0x40004800

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08b      	sub	sp, #44	; 0x2c
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	2414      	movs	r4, #20
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2314      	movs	r3, #20
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f002 fb85 	bl	8002ce8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <MX_GPIO_Init+0xe0>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <MX_GPIO_Init+0xe0>)
 80005e4:	2104      	movs	r1, #4
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <MX_GPIO_Init+0xe0>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	2204      	movs	r2, #4
 80005f0:	4013      	ands	r3, r2
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_GPIO_Init+0xe0>)
 80005f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MX_GPIO_Init+0xe0>)
 80005fc:	2120      	movs	r1, #32
 80005fe:	430a      	orrs	r2, r1
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_GPIO_Init+0xe0>)
 8000604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000606:	2220      	movs	r2, #32
 8000608:	4013      	ands	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_GPIO_Init+0xe0>)
 8000610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_GPIO_Init+0xe0>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_GPIO_Init+0xe0>)
 800061c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_GPIO_Init+0xe0>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_GPIO_Init+0xe0>)
 800062c:	2102      	movs	r1, #2
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_GPIO_Init+0xe0>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	2202      	movs	r2, #2
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fc92 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2220      	movs	r2, #32
 8000650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2201      	movs	r2, #1
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2202      	movs	r2, #2
 8000662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000664:	193a      	adds	r2, r7, r4
 8000666:	23a0      	movs	r3, #160	; 0xa0
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fb1b 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2230      	movs	r2, #48	; 0x30
 8000676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_GPIO_Init+0xe4>)
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	193b      	adds	r3, r7, r4
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <MX_GPIO_Init+0xe8>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 fb0c 	bl	8000ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f000 fad5 	bl	8000c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800069a:	2007      	movs	r0, #7
 800069c:	f000 fae7 	bl	8000c6e <HAL_NVIC_EnableIRQ>

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b00b      	add	sp, #44	; 0x2c
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	10110000 	.word	0x10110000
 80006b0:	50000800 	.word	0x50000800

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_MspInit+0x4c>)
 80006c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	641a      	str	r2, [r3, #64]	; 0x40
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <HAL_MspInit+0x4c>)
 80006e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_MspInit+0x4c>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0549      	lsls	r1, r1, #21
 80006e8:	430a      	orrs	r2, r1
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_MspInit+0x4c>)
 80006ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	055b      	lsls	r3, r3, #21
 80006f4:	4013      	ands	r3, r2
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006fa:	23c0      	movs	r3, #192	; 0xc0
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 f9de 	bl	8000ac0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b08d      	sub	sp, #52	; 0x34
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	231c      	movs	r3, #28
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	0018      	movs	r0, r3
 800071e:	2314      	movs	r3, #20
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f002 fae0 	bl	8002ce8 <memset>
  if(huart->Instance==USART2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a48      	ldr	r2, [pc, #288]	; (8000850 <HAL_UART_MspInit+0x140>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d131      	bne.n	8000796 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000732:	4b48      	ldr	r3, [pc, #288]	; (8000854 <HAL_UART_MspInit+0x144>)
 8000734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <HAL_UART_MspInit+0x144>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0289      	lsls	r1, r1, #10
 800073c:	430a      	orrs	r2, r1
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000740:	4b44      	ldr	r3, [pc, #272]	; (8000854 <HAL_UART_MspInit+0x144>)
 8000742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	029b      	lsls	r3, r3, #10
 8000748:	4013      	ands	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <HAL_UART_MspInit+0x144>)
 8000750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000752:	4b40      	ldr	r3, [pc, #256]	; (8000854 <HAL_UART_MspInit+0x144>)
 8000754:	2101      	movs	r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
 800075a:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <HAL_UART_MspInit+0x144>)
 800075c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075e:	2201      	movs	r2, #1
 8000760:	4013      	ands	r3, r2
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000766:	211c      	movs	r1, #28
 8000768:	187b      	adds	r3, r7, r1
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2202      	movs	r2, #2
 8000772:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2201      	movs	r2, #1
 8000778:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2201      	movs	r2, #1
 8000784:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	187a      	adds	r2, r7, r1
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fa8a 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000794:	e058      	b.n	8000848 <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <HAL_UART_MspInit+0x148>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d153      	bne.n	8000848 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	02c9      	lsls	r1, r1, #11
 80007aa:	430a      	orrs	r2, r1
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	02db      	lsls	r3, r3, #11
 80007b6:	4013      	ands	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007c2:	2104      	movs	r1, #4
 80007c4:	430a      	orrs	r2, r1
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007cc:	2204      	movs	r2, #4
 80007ce:	4013      	ands	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007da:	2102      	movs	r1, #2
 80007dc:	430a      	orrs	r2, r1
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_UART_MspInit+0x144>)
 80007e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e4:	2202      	movs	r2, #2
 80007e6:	4013      	ands	r3, r2
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ec:	211c      	movs	r1, #28
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2202      	movs	r2, #2
 80007fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	000c      	movs	r4, r1
 8000810:	187b      	adds	r3, r7, r1
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <HAL_UART_MspInit+0x14c>)
 8000814:	0019      	movs	r1, r3
 8000816:	0010      	movs	r0, r2
 8000818:	f000 fa46 	bl	8000ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800081c:	0021      	movs	r1, r4
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2204      	movs	r2, #4
 8000822:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2202      	movs	r2, #2
 8000828:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2204      	movs	r2, #4
 800083a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	187b      	adds	r3, r7, r1
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_UART_MspInit+0x150>)
 8000840:	0019      	movs	r1, r3
 8000842:	0010      	movs	r0, r2
 8000844:	f000 fa30 	bl	8000ca8 <HAL_GPIO_Init>
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b00d      	add	sp, #52	; 0x34
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	40021000 	.word	0x40021000
 8000858:	40004800 	.word	0x40004800
 800085c:	50000800 	.word	0x50000800
 8000860:	50000400 	.word	0x50000400

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f8fe 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_4)){
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <EXTI4_15_IRQHandler+0xa8>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	2210      	movs	r2, #16
 80008a2:	4013      	ands	r3, r2
 80008a4:	d104      	bne.n	80008b0 <EXTI4_15_IRQHandler+0x18>
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <EXTI4_15_IRQHandler+0xa8>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	2210      	movs	r2, #16
 80008ac:	4013      	ands	r3, r2
 80008ae:	d019      	beq.n	80008e4 <EXTI4_15_IRQHandler+0x4c>
			tx_data[3] = 6;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008b2:	2206      	movs	r2, #6
 80008b4:	70da      	strb	r2, [r3, #3]
			tx_data[4] = tx_data[0] + tx_data[1] + tx_data[2] + tx_data[3];
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008bc:	785b      	ldrb	r3, [r3, #1]
 80008be:	18d3      	adds	r3, r2, r3
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008c4:	789b      	ldrb	r3, [r3, #2]
 80008c6:	18d3      	adds	r3, r2, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008cc:	78db      	ldrb	r3, [r3, #3]
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008d4:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit(&huart3, tx_data, 5, 1);
 80008d6:	491b      	ldr	r1, [pc, #108]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <EXTI4_15_IRQHandler+0xb0>)
 80008da:	2301      	movs	r3, #1
 80008dc:	2205      	movs	r2, #5
 80008de:	f001 fa3b 	bl	8001d58 <HAL_UART_Transmit>
 80008e2:	e024      	b.n	800092e <EXTI4_15_IRQHandler+0x96>
		}

		else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <EXTI4_15_IRQHandler+0xa8>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	2220      	movs	r2, #32
 80008ea:	4013      	ands	r3, r2
 80008ec:	d104      	bne.n	80008f8 <EXTI4_15_IRQHandler+0x60>
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <EXTI4_15_IRQHandler+0xa8>)
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	2220      	movs	r2, #32
 80008f4:	4013      	ands	r3, r2
 80008f6:	d019      	beq.n	800092c <EXTI4_15_IRQHandler+0x94>
			tx_data[3] = 9;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 80008fa:	2209      	movs	r2, #9
 80008fc:	70da      	strb	r2, [r3, #3]
			tx_data[4] = tx_data[0] + tx_data[1] + tx_data[2] + tx_data[3];
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 8000904:	785b      	ldrb	r3, [r3, #1]
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 800090c:	789b      	ldrb	r3, [r3, #2]
 800090e:	18d3      	adds	r3, r2, r3
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 8000914:	78db      	ldrb	r3, [r3, #3]
 8000916:	18d3      	adds	r3, r2, r3
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 800091c:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit(&huart3, tx_data, 5, 1);
 800091e:	4909      	ldr	r1, [pc, #36]	; (8000944 <EXTI4_15_IRQHandler+0xac>)
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <EXTI4_15_IRQHandler+0xb0>)
 8000922:	2301      	movs	r3, #1
 8000924:	2205      	movs	r2, #5
 8000926:	f001 fa17 	bl	8001d58 <HAL_UART_Transmit>
 800092a:	e000      	b.n	800092e <EXTI4_15_IRQHandler+0x96>
		}
		else{
			__NOP();
 800092c:	46c0      	nop			; (mov r8, r8)
		}

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800092e:	2010      	movs	r0, #16
 8000930:	f000 fb3c 	bl	8000fac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000934:	2020      	movs	r0, #32
 8000936:	f000 fb39 	bl	8000fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021800 	.word	0x40021800
 8000944:	20000000 	.word	0x20000000
 8000948:	20000030 	.word	0x20000030

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <SystemInit+0x14>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	0512      	lsls	r2, r2, #20
 8000956:	609a      	str	r2, [r3, #8]
#endif
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000968:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800096a:	e003      	b.n	8000974 <LoopCopyDataInit>

0800096c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800096e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000970:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000972:	3104      	adds	r1, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <LoopForever+0xa>)
  ldr r3, =_edata
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <LoopForever+0xe>)
  adds r2, r0, r1
 8000978:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800097c:	d3f6      	bcc.n	800096c <CopyDataInit>
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopForever+0x12>)
  b LoopFillZerobss
 8000980:	e002      	b.n	8000988 <LoopFillZerobss>

08000982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  str  r3, [r2]
 8000984:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000986:	3204      	adds	r2, #4

08000988 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <LoopForever+0x16>)
  cmp r2, r3
 800098a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800098c:	d3f9      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800098e:	f7ff ffdd 	bl	800094c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000992:	f002 f985 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fd29 	bl	80003ec <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   r0, =_estack
 800099c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80009a0:	08002d88 	.word	0x08002d88
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009a8:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80009ac:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80009b0:	2000014c 	.word	0x2000014c

080009b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x3c>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_Init+0x3c>)
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	0049      	lsls	r1, r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f810 	bl	80009f8 <HAL_InitTick>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d003      	beq.n	80009e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e001      	b.n	80009e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fe6c 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a00:	230f      	movs	r3, #15
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_InitTick+0x88>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d02b      	beq.n	8000a68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_InitTick+0x8c>)
 8000a12:	681c      	ldr	r4, [r3, #0]
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_InitTick+0x88>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	0019      	movs	r1, r3
 8000a1a:	23fa      	movs	r3, #250	; 0xfa
 8000a1c:	0098      	lsls	r0, r3, #2
 8000a1e:	f7ff fb6f 	bl	8000100 <__udivsi3>
 8000a22:	0003      	movs	r3, r0
 8000a24:	0019      	movs	r1, r3
 8000a26:	0020      	movs	r0, r4
 8000a28:	f7ff fb6a 	bl	8000100 <__udivsi3>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 f92d 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d112      	bne.n	8000a5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d80a      	bhi.n	8000a54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2301      	movs	r3, #1
 8000a42:	425b      	negs	r3, r3
 8000a44:	2200      	movs	r2, #0
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 f8fc 	bl	8000c44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_InitTick+0x90>)
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	e00d      	b.n	8000a70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a54:	230f      	movs	r3, #15
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e008      	b.n	8000a70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	230f      	movs	r3, #15
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e003      	b.n	8000a70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a68:	230f      	movs	r3, #15
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a70:	230f      	movs	r3, #15
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	781b      	ldrb	r3, [r3, #0]
}
 8000a76:	0018      	movs	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b005      	add	sp, #20
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000010 	.word	0x20000010
 8000a84:	20000008 	.word	0x20000008
 8000a88:	2000000c 	.word	0x2000000c

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_IncTick+0x18>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_IncTick+0x1c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	18d2      	adds	r2, r2, r3
 8000a9a:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <HAL_IncTick+0x18>)
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000148 	.word	0x20000148
 8000aa8:	20000010 	.word	0x20000010

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_GetTick+0x10>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000148 	.word	0x20000148

08000ac0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	fffff9ff 	.word	0xfffff9ff

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	0002      	movs	r2, r0
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b7f      	cmp	r3, #127	; 0x7f
 8000afe:	d809      	bhi.n	8000b14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	001a      	movs	r2, r3
 8000b06:	231f      	movs	r3, #31
 8000b08:	401a      	ands	r2, r3
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_EnableIRQ+0x30>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4091      	lsls	r1, r2
 8000b10:	000a      	movs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
  }
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	0002      	movs	r2, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b7f      	cmp	r3, #127	; 0x7f
 8000b34:	d828      	bhi.n	8000b88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b36:	4a2f      	ldr	r2, [pc, #188]	; (8000bf4 <__NVIC_SetPriority+0xd4>)
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	33c0      	adds	r3, #192	; 0xc0
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	589b      	ldr	r3, [r3, r2]
 8000b46:	1dfa      	adds	r2, r7, #7
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	400a      	ands	r2, r1
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	4091      	lsls	r1, r2
 8000b56:	000a      	movs	r2, r1
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	401a      	ands	r2, r3
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	4003      	ands	r3, r0
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <__NVIC_SetPriority+0xd4>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	33c0      	adds	r3, #192	; 0xc0
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b86:	e031      	b.n	8000bec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <__NVIC_SetPriority+0xd8>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	400b      	ands	r3, r1
 8000b94:	3b08      	subs	r3, #8
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3306      	adds	r3, #6
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1dfa      	adds	r2, r7, #7
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	2203      	movs	r2, #3
 8000baa:	400a      	ands	r2, r1
 8000bac:	00d2      	lsls	r2, r2, #3
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	019b      	lsls	r3, r3, #6
 8000bbe:	22ff      	movs	r2, #255	; 0xff
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2303      	movs	r3, #3
 8000bca:	4003      	ands	r3, r0
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <__NVIC_SetPriority+0xd8>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	230f      	movs	r3, #15
 8000bda:	4023      	ands	r3, r4
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	430a      	orrs	r2, r1
 8000be2:	3306      	adds	r3, #6
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	18c3      	adds	r3, r0, r3
 8000be8:	3304      	adds	r3, #4
 8000bea:	601a      	str	r2, [r3, #0]
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b003      	add	sp, #12
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <SysTick_Config+0x40>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d901      	bls.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e010      	b.n	8000c34 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <SysTick_Config+0x44>)
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	3a01      	subs	r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	2103      	movs	r1, #3
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ff7d 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SysTick_Config+0x44>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x44>)
 8000c2e:	2207      	movs	r2, #7
 8000c30:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	00ffffff 	.word	0x00ffffff
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	210f      	movs	r1, #15
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	1c02      	adds	r2, r0, #0
 8000c54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	0002      	movs	r2, r0
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff33 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ffaf 	bl	8000bfc <SysTick_Config>
 8000c9e:	0003      	movs	r3, r0
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	e147      	b.n	8000f48 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	000a      	movs	r2, r1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d100      	bne.n	8000cd0 <HAL_GPIO_Init+0x28>
 8000cce:	e138      	b.n	8000f42 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x38>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b12      	cmp	r3, #18
 8000cde:	d123      	bne.n	8000d28 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	58d3      	ldr	r3, [r2, r3]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	0013      	movs	r3, r2
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	400b      	ands	r3, r1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	6939      	ldr	r1, [r7, #16]
 8000d26:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	409a      	lsls	r2, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2203      	movs	r2, #3
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d00b      	beq.n	8000d7c <HAL_GPIO_Init+0xd4>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d70:	2b11      	cmp	r3, #17
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b12      	cmp	r3, #18
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	0013      	movs	r3, r2
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	43da      	mvns	r2, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	055b      	lsls	r3, r3, #21
 8000e16:	4013      	ands	r3, r2
 8000e18:	d100      	bne.n	8000e1c <HAL_GPIO_Init+0x174>
 8000e1a:	e092      	b.n	8000f42 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e1c:	4a50      	ldr	r2, [pc, #320]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3318      	adds	r3, #24
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	589b      	ldr	r3, [r3, r2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	220f      	movs	r2, #15
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x1ca>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <HAL_GPIO_Init+0x2bc>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x1c6>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_GPIO_Init+0x2c0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x1c2>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a43      	ldr	r2, [pc, #268]	; (8000f6c <HAL_GPIO_Init+0x2c4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x1be>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x1cc>
 8000e66:	2305      	movs	r3, #5
 8000e68:	e004      	b.n	8000e74 <HAL_GPIO_Init+0x1cc>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x1cc>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x1cc>
 8000e72:	2300      	movs	r3, #0
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	2103      	movs	r1, #3
 8000e78:	400a      	ands	r2, r1
 8000e7a:	00d2      	lsls	r2, r2, #3
 8000e7c:	4093      	lsls	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e84:	4936      	ldr	r1, [pc, #216]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e92:	4a33      	ldr	r2, [pc, #204]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	58d3      	ldr	r3, [r2, r3]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	025b      	lsls	r3, r3, #9
 8000eac:	4013      	ands	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb8:	4929      	ldr	r1, [pc, #164]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000ec0:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	2384      	movs	r3, #132	; 0x84
 8000ec4:	58d3      	ldr	r3, [r2, r3]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	029b      	lsls	r3, r3, #10
 8000eda:	4013      	ands	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee6:	491e      	ldr	r1, [pc, #120]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000ee8:	2284      	movs	r2, #132	; 0x84
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	035b      	lsls	r3, r3, #13
 8000f06:	4013      	ands	r3, r2
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	039b      	lsls	r3, r3, #14
 8000f30:	4013      	ands	r3, r2
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	40da      	lsrs	r2, r3
 8000f50:	1e13      	subs	r3, r2, #0
 8000f52:	d000      	beq.n	8000f56 <HAL_GPIO_Init+0x2ae>
 8000f54:	e6b0      	b.n	8000cb8 <HAL_GPIO_Init+0x10>
  }
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b006      	add	sp, #24
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40021800 	.word	0x40021800
 8000f64:	50000400 	.word	0x50000400
 8000f68:	50000800 	.word	0x50000800
 8000f6c:	50000c00 	.word	0x50000c00

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	0008      	movs	r0, r1
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	1cbb      	adds	r3, r7, #2
 8000f7e:	1c02      	adds	r2, r0, #0
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	1c7b      	adds	r3, r7, #1
 8000f84:	1c0a      	adds	r2, r1, #0
 8000f86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f88:	1c7b      	adds	r3, r7, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	881a      	ldrh	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	881a      	ldrh	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	1dba      	adds	r2, r7, #6
 8000fbe:	8812      	ldrh	r2, [r2, #0]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d008      	beq.n	8000fd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fc6:	1dba      	adds	r2, r7, #6
 8000fc8:	8812      	ldrh	r2, [r2, #0]
 8000fca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f000 f815 	bl	8001000 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	1dba      	adds	r2, r7, #6
 8000fdc:	8812      	ldrh	r2, [r2, #0]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d008      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fe4:	1dba      	adds	r2, r7, #6
 8000fe6:	8812      	ldrh	r2, [r2, #0]
 8000fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000fea:	1dbb      	adds	r3, r7, #6
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 f810 	bl	8001014 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021800 	.word	0x40021800

08001000 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	0002      	movs	r2, r0
 8001008:	1dbb      	adds	r3, r7, #6
 800100a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b002      	add	sp, #8
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	0002      	movs	r2, r0
 800101c:	1dbb      	adds	r3, r7, #6
 800101e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001036:	4013      	ands	r3, r2
 8001038:	0019      	movs	r1, r3
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	429a      	cmp	r2, r3
 800104a:	d11f      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	0013      	movs	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	189b      	adds	r3, r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4912      	ldr	r1, [pc, #72]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff f850 	bl	8000100 <__udivsi3>
 8001060:	0003      	movs	r3, r0
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001066:	e008      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3b01      	subs	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e001      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e009      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	401a      	ands	r2, r3
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	429a      	cmp	r2, r3
 800108a:	d0ed      	beq.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	40007000 	.word	0x40007000
 800109c:	fffff9ff 	.word	0xfffff9ff
 80010a0:	20000008 	.word	0x20000008
 80010a4:	000f4240 	.word	0x000f4240

080010a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	23e0      	movs	r3, #224	; 0xe0
 80010b2:	01db      	lsls	r3, r3, #7
 80010b4:	4013      	ands	r3, r2
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e2f9      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	d100      	bne.n	80010de <HAL_RCC_OscConfig+0x1e>
 80010dc:	e07c      	b.n	80011d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010de:	4bc3      	ldr	r3, [pc, #780]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2238      	movs	r2, #56	; 0x38
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e8:	4bc0      	ldr	r3, [pc, #768]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4013      	ands	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b10      	cmp	r3, #16
 80010f6:	d102      	bne.n	80010fe <HAL_RCC_OscConfig+0x3e>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d002      	beq.n	8001104 <HAL_RCC_OscConfig+0x44>
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b08      	cmp	r3, #8
 8001102:	d10b      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4bb9      	ldr	r3, [pc, #740]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	029b      	lsls	r3, r3, #10
 800110c:	4013      	ands	r3, r2
 800110e:	d062      	beq.n	80011d6 <HAL_RCC_OscConfig+0x116>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d15e      	bne.n	80011d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e2d4      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	429a      	cmp	r2, r3
 8001126:	d107      	bne.n	8001138 <HAL_RCC_OscConfig+0x78>
 8001128:	4bb0      	ldr	r3, [pc, #704]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4baf      	ldr	r3, [pc, #700]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	0249      	lsls	r1, r1, #9
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e020      	b.n	800117a <HAL_RCC_OscConfig+0xba>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	23a0      	movs	r3, #160	; 0xa0
 800113e:	02db      	lsls	r3, r3, #11
 8001140:	429a      	cmp	r2, r3
 8001142:	d10e      	bne.n	8001162 <HAL_RCC_OscConfig+0xa2>
 8001144:	4ba9      	ldr	r3, [pc, #676]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4ba8      	ldr	r3, [pc, #672]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	02c9      	lsls	r1, r1, #11
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	4ba6      	ldr	r3, [pc, #664]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4ba5      	ldr	r3, [pc, #660]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	0249      	lsls	r1, r1, #9
 800115c:	430a      	orrs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e00b      	b.n	800117a <HAL_RCC_OscConfig+0xba>
 8001162:	4ba2      	ldr	r3, [pc, #648]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4ba1      	ldr	r3, [pc, #644]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001168:	49a1      	ldr	r1, [pc, #644]	; (80013f0 <HAL_RCC_OscConfig+0x330>)
 800116a:	400a      	ands	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	4b9f      	ldr	r3, [pc, #636]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b9e      	ldr	r3, [pc, #632]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001174:	499f      	ldr	r1, [pc, #636]	; (80013f4 <HAL_RCC_OscConfig+0x334>)
 8001176:	400a      	ands	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d014      	beq.n	80011ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fc93 	bl	8000aac <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fc8e 	bl	8000aac <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e293      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119e:	4b93      	ldr	r3, [pc, #588]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	4013      	ands	r3, r2
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xcc>
 80011aa:	e015      	b.n	80011d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc7e 	bl	8000aac <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b6:	f7ff fc79 	bl	8000aac <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b64      	cmp	r3, #100	; 0x64
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e27e      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c8:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	4013      	ands	r3, r2
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0xf6>
 80011d4:	e000      	b.n	80011d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d100      	bne.n	80011e4 <HAL_RCC_OscConfig+0x124>
 80011e2:	e099      	b.n	8001318 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2238      	movs	r2, #56	; 0x38
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ee:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2203      	movs	r2, #3
 80011f4:	4013      	ands	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d102      	bne.n	8001204 <HAL_RCC_OscConfig+0x144>
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d002      	beq.n	800120a <HAL_RCC_OscConfig+0x14a>
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d135      	bne.n	8001276 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800120a:	4b78      	ldr	r3, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4013      	ands	r3, r2
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x162>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e251      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a74      	ldr	r2, [pc, #464]	; (80013f8 <HAL_RCC_OscConfig+0x338>)
 8001228:	4013      	ands	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	021a      	lsls	r2, r3, #8
 8001232:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800123e:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6e      	ldr	r2, [pc, #440]	; (80013fc <HAL_RCC_OscConfig+0x33c>)
 8001244:	4013      	ands	r3, r2
 8001246:	0019      	movs	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	4b67      	ldr	r3, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001252:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0adb      	lsrs	r3, r3, #11
 8001258:	2207      	movs	r2, #7
 800125a:	4013      	ands	r3, r2
 800125c:	4a68      	ldr	r2, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x340>)
 800125e:	40da      	lsrs	r2, r3
 8001260:	4b68      	ldr	r3, [pc, #416]	; (8001404 <HAL_RCC_OscConfig+0x344>)
 8001262:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <HAL_RCC_OscConfig+0x348>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff fbc5 	bl	80009f8 <HAL_InitTick>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d051      	beq.n	8001316 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e227      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d030      	beq.n	80012e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a5e      	ldr	r2, [pc, #376]	; (80013fc <HAL_RCC_OscConfig+0x33c>)
 8001284:	4013      	ands	r3, r2
 8001286:	0019      	movs	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0049      	lsls	r1, r1, #1
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc04 	bl	8000aac <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff fbff 	bl	8000aac <HAL_GetTick>
 80012ae:	0002      	movs	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e204      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4013      	ands	r3, r2
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a4a      	ldr	r2, [pc, #296]	; (80013f8 <HAL_RCC_OscConfig+0x338>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	021a      	lsls	r2, r3, #8
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	e01b      	b.n	8001318 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80012e6:	4949      	ldr	r1, [pc, #292]	; (800140c <HAL_RCC_OscConfig+0x34c>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fbde 	bl	8000aac <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fbd9 	bl	8000aac <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1de      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4013      	ands	r3, r2
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x236>
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001316:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2208      	movs	r2, #8
 800131e:	4013      	ands	r3, r2
 8001320:	d047      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001322:	4b32      	ldr	r3, [pc, #200]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2238      	movs	r2, #56	; 0x38
 8001328:	4013      	ands	r3, r2
 800132a:	2b18      	cmp	r3, #24
 800132c:	d10a      	bne.n	8001344 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d03c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2f2>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d138      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e1c0      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d019      	beq.n	8001380 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 800134e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001352:	2101      	movs	r1, #1
 8001354:	430a      	orrs	r2, r1
 8001356:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fba8 	bl	8000aac <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001362:	f7ff fba3 	bl	8000aac <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e1a8      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001378:	2202      	movs	r2, #2
 800137a:	4013      	ands	r3, r2
 800137c:	d0f1      	beq.n	8001362 <HAL_RCC_OscConfig+0x2a2>
 800137e:	e018      	b.n	80013b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001382:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 8001386:	2101      	movs	r1, #1
 8001388:	438a      	bics	r2, r1
 800138a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fb8e 	bl	8000aac <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff fb89 	bl	8000aac <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e18e      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f1      	bne.n	8001396 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2204      	movs	r2, #4
 80013b8:	4013      	ands	r3, r2
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x2fe>
 80013bc:	e0c6      	b.n	800154c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	231f      	movs	r3, #31
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2238      	movs	r2, #56	; 0x38
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b20      	cmp	r3, #32
 80013d0:	d11e      	bne.n	8001410 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_OscConfig+0x32c>)
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0x31e>
 80013dc:	e0b6      	b.n	800154c <HAL_RCC_OscConfig+0x48c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d000      	beq.n	80013e8 <HAL_RCC_OscConfig+0x328>
 80013e6:	e0b1      	b.n	800154c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e16c      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	fffeffff 	.word	0xfffeffff
 80013f4:	fffbffff 	.word	0xfffbffff
 80013f8:	ffff80ff 	.word	0xffff80ff
 80013fc:	ffffc7ff 	.word	0xffffc7ff
 8001400:	00f42400 	.word	0x00f42400
 8001404:	20000008 	.word	0x20000008
 8001408:	2000000c 	.word	0x2000000c
 800140c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001410:	4baf      	ldr	r3, [pc, #700]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	055b      	lsls	r3, r3, #21
 8001418:	4013      	ands	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_RCC_OscConfig+0x360>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x362>
 8001420:	2300      	movs	r3, #0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d011      	beq.n	800144a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4baa      	ldr	r3, [pc, #680]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800142a:	4ba9      	ldr	r3, [pc, #676]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	0549      	lsls	r1, r1, #21
 8001430:	430a      	orrs	r2, r1
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
 8001434:	4ba6      	ldr	r3, [pc, #664]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	055b      	lsls	r3, r3, #21
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001442:	231f      	movs	r3, #31
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144a:	4ba2      	ldr	r3, [pc, #648]	; (80016d4 <HAL_RCC_OscConfig+0x614>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4013      	ands	r3, r2
 8001454:	d11a      	bne.n	800148c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001456:	4b9f      	ldr	r3, [pc, #636]	; (80016d4 <HAL_RCC_OscConfig+0x614>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b9e      	ldr	r3, [pc, #632]	; (80016d4 <HAL_RCC_OscConfig+0x614>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0049      	lsls	r1, r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb22 	bl	8000aac <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fb1d 	bl	8000aac <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e122      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001480:	4b94      	ldr	r3, [pc, #592]	; (80016d4 <HAL_RCC_OscConfig+0x614>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4013      	ands	r3, r2
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x3e2>
 8001494:	4b8e      	ldr	r3, [pc, #568]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001498:	4b8d      	ldr	r3, [pc, #564]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 800149a:	2101      	movs	r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	65da      	str	r2, [r3, #92]	; 0x5c
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x41c>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x404>
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014b0:	2104      	movs	r1, #4
 80014b2:	430a      	orrs	r2, r1
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014b6:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ba:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x41c>
 80014c4:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	438a      	bics	r2, r1
 80014ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80014d0:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d4:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80014d6:	2104      	movs	r1, #4
 80014d8:	438a      	bics	r2, r1
 80014da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d014      	beq.n	800150e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fae2 	bl	8000aac <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ec:	e009      	b.n	8001502 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fadd 	bl	8000aac <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a77      	ldr	r2, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x618>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0e1      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001502:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x42e>
 800150c:	e013      	b.n	8001536 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff facd 	bl	8000aac <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001516:	e009      	b.n	800152c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fac8 	bl	8000aac <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x618>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0cc      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001536:	231f      	movs	r3, #31
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001544:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001546:	4965      	ldr	r1, [pc, #404]	; (80016dc <HAL_RCC_OscConfig+0x61c>)
 8001548:	400a      	ands	r2, r1
 800154a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d100      	bne.n	8001556 <HAL_RCC_OscConfig+0x496>
 8001554:	e0b6      	b.n	80016c4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001556:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2238      	movs	r2, #56	; 0x38
 800155c:	4013      	ands	r3, r2
 800155e:	2b10      	cmp	r3, #16
 8001560:	d100      	bne.n	8001564 <HAL_RCC_OscConfig+0x4a4>
 8001562:	e07e      	b.n	8001662 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d153      	bne.n	8001614 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001572:	495b      	ldr	r1, [pc, #364]	; (80016e0 <HAL_RCC_OscConfig+0x620>)
 8001574:	400a      	ands	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fa98 	bl	8000aac <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff fa93 	bl	8000aac <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e098      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	049b      	lsls	r3, r3, #18
 800159c:	4013      	ands	r3, r2
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a4f      	ldr	r2, [pc, #316]	; (80016e4 <HAL_RCC_OscConfig+0x624>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1a      	ldr	r2, [r3, #32]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	431a      	orrs	r2, r3
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ce:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0449      	lsls	r1, r1, #17
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0549      	lsls	r1, r1, #21
 80015e6:	430a      	orrs	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fa5f 	bl	8000aac <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fa5a 	bl	8000aac <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e05f      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	049b      	lsls	r3, r3, #18
 800160e:	4013      	ands	r3, r2
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x534>
 8001612:	e057      	b.n	80016c4 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 800161a:	4931      	ldr	r1, [pc, #196]	; (80016e0 <HAL_RCC_OscConfig+0x620>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001626:	2103      	movs	r1, #3
 8001628:	438a      	bics	r2, r1
 800162a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001632:	492d      	ldr	r1, [pc, #180]	; (80016e8 <HAL_RCC_OscConfig+0x628>)
 8001634:	400a      	ands	r2, r1
 8001636:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fa38 	bl	8000aac <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff fa33 	bl	8000aac <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e038      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	049b      	lsls	r3, r3, #18
 800165c:	4013      	ands	r3, r2
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x582>
 8001660:	e030      	b.n	80016c4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e02b      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_RCC_OscConfig+0x610>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2203      	movs	r2, #3
 8001678:	401a      	ands	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	429a      	cmp	r2, r3
 8001680:	d11e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2270      	movs	r2, #112	; 0x70
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d117      	bne.n	80016c0 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	23fe      	movs	r3, #254	; 0xfe
 8001694:	01db      	lsls	r3, r3, #7
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d10e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	23f8      	movs	r3, #248	; 0xf8
 80016a6:	039b      	lsls	r3, r3, #14
 80016a8:	401a      	ands	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	0f5b      	lsrs	r3, r3, #29
 80016b6:	075a      	lsls	r2, r3, #29
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b008      	add	sp, #32
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40007000 	.word	0x40007000
 80016d8:	00001388 	.word	0x00001388
 80016dc:	efffffff 	.word	0xefffffff
 80016e0:	feffffff 	.word	0xfeffffff
 80016e4:	1fc1808c 	.word	0x1fc1808c
 80016e8:	effeffff 	.word	0xeffeffff

080016ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0e9      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2207      	movs	r2, #7
 8001706:	4013      	ands	r3, r2
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d91e      	bls.n	800174c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b73      	ldr	r3, [pc, #460]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2207      	movs	r2, #7
 8001714:	4393      	bics	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	4b70      	ldr	r3, [pc, #448]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001720:	f7ff f9c4 	bl	8000aac <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001728:	e009      	b.n	800173e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172a:	f7ff f9bf 	bl	8000aac <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0ca      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2207      	movs	r2, #7
 8001744:	4013      	ands	r3, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d1ee      	bne.n	800172a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d015      	beq.n	8001782 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d006      	beq.n	800176e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001760:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	21e0      	movs	r1, #224	; 0xe0
 8001768:	01c9      	lsls	r1, r1, #7
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176e:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4a5d      	ldr	r2, [pc, #372]	; (80018e8 <HAL_RCC_ClockConfig+0x1fc>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	4013      	ands	r3, r2
 800178a:	d057      	beq.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d12b      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e097      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	049b      	lsls	r3, r3, #18
 80017b4:	4013      	ands	r3, r2
 80017b6:	d11f      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e08b      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	d113      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e07f      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d106      	bne.n	80017ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d108      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e074      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e06d      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2207      	movs	r2, #7
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800180c:	f7ff f94e 	bl	8000aac <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001814:	e009      	b.n	800182a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001816:	f7ff f949 	bl	8000aac <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a2f      	ldr	r2, [pc, #188]	; (80018e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e054      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2238      	movs	r2, #56	; 0x38
 8001830:	401a      	ands	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	429a      	cmp	r2, r3
 800183a:	d1ec      	bne.n	8001816 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d21e      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2207      	movs	r2, #7
 8001850:	4393      	bics	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800185c:	f7ff f926 	bl	8000aac <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001864:	e009      	b.n	800187a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001866:	f7ff f921 	bl	8000aac <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e02c      	b.n	80018d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2207      	movs	r2, #7
 8001880:	4013      	ands	r3, r2
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2204      	movs	r2, #4
 800188e:	4013      	ands	r3, r2
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4a15      	ldr	r2, [pc, #84]	; (80018ec <HAL_RCC_ClockConfig+0x200>)
 8001898:	4013      	ands	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018a6:	f000 f829 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018aa:	0001      	movs	r1, r0
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	220f      	movs	r2, #15
 80018b4:	401a      	ands	r2, r3
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x204>)
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	58d3      	ldr	r3, [r2, r3]
 80018bc:	221f      	movs	r2, #31
 80018be:	4013      	ands	r3, r2
 80018c0:	000a      	movs	r2, r1
 80018c2:	40da      	lsrs	r2, r3
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_ClockConfig+0x208>)
 80018c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x20c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff f893 	bl	80009f8 <HAL_InitTick>
 80018d2:	0003      	movs	r3, r0
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40022000 	.word	0x40022000
 80018e0:	00001388 	.word	0x00001388
 80018e4:	40021000 	.word	0x40021000
 80018e8:	fffff0ff 	.word	0xfffff0ff
 80018ec:	ffff8fff 	.word	0xffff8fff
 80018f0:	08002d20 	.word	0x08002d20
 80018f4:	20000008 	.word	0x20000008
 80018f8:	2000000c 	.word	0x2000000c

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2238      	movs	r2, #56	; 0x38
 8001908:	4013      	ands	r3, r2
 800190a:	d10f      	bne.n	800192c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0adb      	lsrs	r3, r3, #11
 8001912:	2207      	movs	r2, #7
 8001914:	4013      	ands	r3, r2
 8001916:	2201      	movs	r2, #1
 8001918:	409a      	lsls	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	4835      	ldr	r0, [pc, #212]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001922:	f7fe fbed 	bl	8000100 <__udivsi3>
 8001926:	0003      	movs	r3, r0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	e05d      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2238      	movs	r2, #56	; 0x38
 8001932:	4013      	ands	r3, r2
 8001934:	2b08      	cmp	r3, #8
 8001936:	d102      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_GetSysClockFreq+0x100>)
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	e054      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2238      	movs	r2, #56	; 0x38
 8001944:	4013      	ands	r3, r2
 8001946:	2b10      	cmp	r3, #16
 8001948:	d138      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2203      	movs	r2, #3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	2207      	movs	r2, #7
 800195c:	4013      	ands	r3, r2
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d10d      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	4824      	ldr	r0, [pc, #144]	; (80019fc <HAL_RCC_GetSysClockFreq+0x100>)
 800196c:	f7fe fbc8 	bl	8000100 <__udivsi3>
 8001970:	0003      	movs	r3, r0
 8001972:	0019      	movs	r1, r3
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	227f      	movs	r2, #127	; 0x7f
 800197c:	4013      	ands	r3, r2
 800197e:	434b      	muls	r3, r1
 8001980:	617b      	str	r3, [r7, #20]
        break;
 8001982:	e00d      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	481c      	ldr	r0, [pc, #112]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001988:	f7fe fbba 	bl	8000100 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	0019      	movs	r1, r3
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	227f      	movs	r2, #127	; 0x7f
 8001998:	4013      	ands	r3, r2
 800199a:	434b      	muls	r3, r1
 800199c:	617b      	str	r3, [r7, #20]
        break;
 800199e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0f5b      	lsrs	r3, r3, #29
 80019a6:	2207      	movs	r2, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	3301      	adds	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f7fe fba5 	bl	8000100 <__udivsi3>
 80019b6:	0003      	movs	r3, r0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	e015      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2238      	movs	r2, #56	; 0x38
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d103      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2238      	movs	r2, #56	; 0x38
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b18      	cmp	r3, #24
 80019da:	d103      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019dc:	23fa      	movs	r3, #250	; 0xfa
 80019de:	01db      	lsls	r3, r3, #7
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e001      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019e8:	693b      	ldr	r3, [r7, #16]
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b006      	add	sp, #24
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40021000 	.word	0x40021000
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a18:	f7ff fff2 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a1c:	0004      	movs	r4, r0
 8001a1e:	f7ff fb43 	bl	80010a8 <LL_RCC_GetAPB1Prescaler>
 8001a22:	0003      	movs	r3, r0
 8001a24:	0b1a      	lsrs	r2, r3, #12
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	58d3      	ldr	r3, [r2, r3]
 8001a2c:	221f      	movs	r2, #31
 8001a2e:	4013      	ands	r3, r2
 8001a30:	40dc      	lsrs	r4, r3
 8001a32:	0023      	movs	r3, r4
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	08002d60 	.word	0x08002d60

08001a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a48:	2313      	movs	r3, #19
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a50:	2312      	movs	r3, #18
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	4013      	ands	r3, r2
 8001a62:	d100      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a64:	e0a4      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a66:	2311      	movs	r3, #17
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b87      	ldr	r3, [pc, #540]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	055b      	lsls	r3, r3, #21
 8001a76:	4013      	ands	r3, r2
 8001a78:	d111      	bne.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b84      	ldr	r3, [pc, #528]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a7e:	4b83      	ldr	r3, [pc, #524]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0549      	lsls	r1, r1, #21
 8001a84:	430a      	orrs	r2, r1
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2311      	movs	r3, #17
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0049      	lsls	r1, r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001aac:	f7fe fffe 	bl	8000aac <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ab4:	e00b      	b.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7fe fff9 	bl	8000aac <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d904      	bls.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001ac4:	2313      	movs	r3, #19
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2203      	movs	r2, #3
 8001aca:	701a      	strb	r2, [r3, #0]
        break;
 8001acc:	e005      	b.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ace:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d0ed      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001ada:	2313      	movs	r3, #19
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d154      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ae4:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ae6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d014      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b00:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	4a63      	ldr	r2, [pc, #396]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b0a:	4b60      	ldr	r3, [pc, #384]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0249      	lsls	r1, r1, #9
 8001b14:	430a      	orrs	r2, r1
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b18:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b1c:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b1e:	495e      	ldr	r1, [pc, #376]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d016      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7fe ffbb 	bl	8000aac <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3a:	e00c      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7fe ffb6 	bl	8000aac <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d904      	bls.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001b4c:	2313      	movs	r3, #19
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2203      	movs	r2, #3
 8001b52:	701a      	strb	r2, [r3, #0]
            break;
 8001b54:	e004      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0ed      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001b60:	2313      	movs	r3, #19
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b6a:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	4a49      	ldr	r2, [pc, #292]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7e:	e00c      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b80:	2312      	movs	r3, #18
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2213      	movs	r2, #19
 8001b86:	18ba      	adds	r2, r7, r2
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e005      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2213      	movs	r2, #19
 8001b94:	18ba      	adds	r2, r7, r2
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b9a:	2311      	movs	r3, #17
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001baa:	493d      	ldr	r1, [pc, #244]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	4393      	bics	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	220c      	movs	r2, #12
 8001bde:	4393      	bics	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	01db      	lsls	r3, r3, #7
 8001c12:	4013      	ands	r3, r2
 8001c14:	d015      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	0899      	lsrs	r1, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d106      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0249      	lsls	r1, r1, #9
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	01db      	lsls	r3, r3, #7
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	0249      	lsls	r1, r1, #9
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001c7c:	2312      	movs	r3, #18
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b006      	add	sp, #24
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40007000 	.word	0x40007000
 8001c94:	fffffcff 	.word	0xfffffcff
 8001c98:	fffeffff 	.word	0xfffeffff
 8001c9c:	00001388 	.word	0x00001388
 8001ca0:	efffffff 	.word	0xefffffff
 8001ca4:	ffffcfff 	.word	0xffffcfff
 8001ca8:	ffff3fff 	.word	0xffff3fff

08001cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e046      	b.n	8001d4c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	589b      	ldr	r3, [r3, r2]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	227c      	movs	r2, #124	; 0x7c
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7fe fd1c 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	2124      	movs	r1, #36	; 0x24
 8001cde:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2101      	movs	r1, #1
 8001cec:	438a      	bics	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f8dc 	bl	8001eb0 <UART_SetConfig>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e024      	b.n	8001d4c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 fd57 	bl	80027c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	490d      	ldr	r1, [pc, #52]	; (8001d54 <HAL_UART_Init+0xa8>)
 8001d1e:	400a      	ands	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	212a      	movs	r1, #42	; 0x2a
 8001d2e:	438a      	bics	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 fdef 	bl	8002928 <UART_CheckIdleState>
 8001d4a:	0003      	movs	r3, r0
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	ffffb7ff 	.word	0xffffb7ff

08001d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	1dbb      	adds	r3, r7, #6
 8001d66:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	589b      	ldr	r3, [r3, r2]
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d000      	beq.n	8001d74 <HAL_UART_Transmit+0x1c>
 8001d72:	e097      	b.n	8001ea4 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_UART_Transmit+0x2a>
 8001d7a:	1dbb      	adds	r3, r7, #6
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e08f      	b.n	8001ea6 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d109      	bne.n	8001da6 <HAL_UART_Transmit+0x4e>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e07f      	b.n	8001ea6 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	227c      	movs	r2, #124	; 0x7c
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_UART_Transmit+0x5c>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e078      	b.n	8001ea6 <HAL_UART_Transmit+0x14e>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	227c      	movs	r2, #124	; 0x7c
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2288      	movs	r2, #136	; 0x88
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	2121      	movs	r1, #33	; 0x21
 8001dca:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001dcc:	f7fe fe6e 	bl	8000aac <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1dba      	adds	r2, r7, #6
 8001dd8:	2154      	movs	r1, #84	; 0x54
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1dba      	adds	r2, r7, #6
 8001de2:	2156      	movs	r1, #86	; 0x56
 8001de4:	8812      	ldrh	r2, [r2, #0]
 8001de6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	015b      	lsls	r3, r3, #5
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d108      	bne.n	8001e06 <HAL_UART_Transmit+0xae>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	e003      	b.n	8001e0e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e0e:	e02c      	b.n	8001e6a <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	0013      	movs	r3, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	f000 fdcd 	bl	80029bc <UART_WaitOnFlagUntilTimeout>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e03d      	b.n	8001ea6 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	001a      	movs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	05d2      	lsls	r2, r2, #23
 8001e3c:	0dd2      	lsrs	r2, r2, #23
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	3302      	adds	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	e007      	b.n	8001e58 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2256      	movs	r2, #86	; 0x56
 8001e5c:	5a9b      	ldrh	r3, [r3, r2]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b299      	uxth	r1, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2256      	movs	r2, #86	; 0x56
 8001e68:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2256      	movs	r2, #86	; 0x56
 8001e6e:	5a9b      	ldrh	r3, [r3, r2]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1cc      	bne.n	8001e10 <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	0013      	movs	r3, r2
 8001e80:	2200      	movs	r2, #0
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	f000 fd9a 	bl	80029bc <UART_WaitOnFlagUntilTimeout>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e00a      	b.n	8001ea6 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	2120      	movs	r1, #32
 8001e96:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	227c      	movs	r2, #124	; 0x7c
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b008      	add	sp, #32
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ebc:	231e      	movs	r3, #30
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4aba      	ldr	r2, [pc, #744]	; (80021dc <UART_SetConfig+0x32c>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4ab6      	ldr	r2, [pc, #728]	; (80021e0 <UART_SetConfig+0x330>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4aad      	ldr	r2, [pc, #692]	; (80021e4 <UART_SetConfig+0x334>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	220f      	movs	r2, #15
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4aa3      	ldr	r2, [pc, #652]	; (80021e8 <UART_SetConfig+0x338>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d125      	bne.n	8001fac <UART_SetConfig+0xfc>
 8001f60:	4ba2      	ldr	r3, [pc, #648]	; (80021ec <UART_SetConfig+0x33c>)
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	2203      	movs	r2, #3
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d00f      	beq.n	8001f8c <UART_SetConfig+0xdc>
 8001f6c:	d304      	bcc.n	8001f78 <UART_SetConfig+0xc8>
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d007      	beq.n	8001f82 <UART_SetConfig+0xd2>
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d00f      	beq.n	8001f96 <UART_SetConfig+0xe6>
 8001f76:	e013      	b.n	8001fa0 <UART_SetConfig+0xf0>
 8001f78:	231f      	movs	r3, #31
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	e05a      	b.n	8002038 <UART_SetConfig+0x188>
 8001f82:	231f      	movs	r3, #31
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e055      	b.n	8002038 <UART_SetConfig+0x188>
 8001f8c:	231f      	movs	r3, #31
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e050      	b.n	8002038 <UART_SetConfig+0x188>
 8001f96:	231f      	movs	r3, #31
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e04b      	b.n	8002038 <UART_SetConfig+0x188>
 8001fa0:	231f      	movs	r3, #31
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	e045      	b.n	8002038 <UART_SetConfig+0x188>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a8f      	ldr	r2, [pc, #572]	; (80021f0 <UART_SetConfig+0x340>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d128      	bne.n	8002008 <UART_SetConfig+0x158>
 8001fb6:	4b8d      	ldr	r3, [pc, #564]	; (80021ec <UART_SetConfig+0x33c>)
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	220c      	movs	r2, #12
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d012      	beq.n	8001fe8 <UART_SetConfig+0x138>
 8001fc2:	d802      	bhi.n	8001fca <UART_SetConfig+0x11a>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <UART_SetConfig+0x124>
 8001fc8:	e018      	b.n	8001ffc <UART_SetConfig+0x14c>
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d007      	beq.n	8001fde <UART_SetConfig+0x12e>
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d00f      	beq.n	8001ff2 <UART_SetConfig+0x142>
 8001fd2:	e013      	b.n	8001ffc <UART_SetConfig+0x14c>
 8001fd4:	231f      	movs	r3, #31
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e02c      	b.n	8002038 <UART_SetConfig+0x188>
 8001fde:	231f      	movs	r3, #31
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e027      	b.n	8002038 <UART_SetConfig+0x188>
 8001fe8:	231f      	movs	r3, #31
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2204      	movs	r2, #4
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e022      	b.n	8002038 <UART_SetConfig+0x188>
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e01d      	b.n	8002038 <UART_SetConfig+0x188>
 8001ffc:	231f      	movs	r3, #31
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2210      	movs	r2, #16
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	e017      	b.n	8002038 <UART_SetConfig+0x188>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a79      	ldr	r2, [pc, #484]	; (80021f4 <UART_SetConfig+0x344>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d104      	bne.n	800201c <UART_SetConfig+0x16c>
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e00d      	b.n	8002038 <UART_SetConfig+0x188>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <UART_SetConfig+0x348>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d104      	bne.n	8002030 <UART_SetConfig+0x180>
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e003      	b.n	8002038 <UART_SetConfig+0x188>
 8002030:	231f      	movs	r3, #31
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2210      	movs	r2, #16
 8002036:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	429a      	cmp	r2, r3
 8002042:	d000      	beq.n	8002046 <UART_SetConfig+0x196>
 8002044:	e1de      	b.n	8002404 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8002046:	231f      	movs	r3, #31
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d100      	bne.n	8002052 <UART_SetConfig+0x1a2>
 8002050:	e06c      	b.n	800212c <UART_SetConfig+0x27c>
 8002052:	dc02      	bgt.n	800205a <UART_SetConfig+0x1aa>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <UART_SetConfig+0x1b8>
 8002058:	e1ab      	b.n	80023b2 <UART_SetConfig+0x502>
 800205a:	2b04      	cmp	r3, #4
 800205c:	d100      	bne.n	8002060 <UART_SetConfig+0x1b0>
 800205e:	e0e5      	b.n	800222c <UART_SetConfig+0x37c>
 8002060:	2b08      	cmp	r3, #8
 8002062:	d100      	bne.n	8002066 <UART_SetConfig+0x1b6>
 8002064:	e144      	b.n	80022f0 <UART_SetConfig+0x440>
 8002066:	e1a4      	b.n	80023b2 <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002068:	f7ff fcd4 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 800206c:	0003      	movs	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d044      	beq.n	8002102 <UART_SetConfig+0x252>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2b01      	cmp	r3, #1
 800207e:	d03e      	beq.n	80020fe <UART_SetConfig+0x24e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2b02      	cmp	r3, #2
 8002086:	d038      	beq.n	80020fa <UART_SetConfig+0x24a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2b03      	cmp	r3, #3
 800208e:	d032      	beq.n	80020f6 <UART_SetConfig+0x246>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2b04      	cmp	r3, #4
 8002096:	d02c      	beq.n	80020f2 <UART_SetConfig+0x242>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b05      	cmp	r3, #5
 800209e:	d026      	beq.n	80020ee <UART_SetConfig+0x23e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b06      	cmp	r3, #6
 80020a6:	d020      	beq.n	80020ea <UART_SetConfig+0x23a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2b07      	cmp	r3, #7
 80020ae:	d01a      	beq.n	80020e6 <UART_SetConfig+0x236>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d014      	beq.n	80020e2 <UART_SetConfig+0x232>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	2b09      	cmp	r3, #9
 80020be:	d00e      	beq.n	80020de <UART_SetConfig+0x22e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	2b0a      	cmp	r3, #10
 80020c6:	d008      	beq.n	80020da <UART_SetConfig+0x22a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b0b      	cmp	r3, #11
 80020ce:	d102      	bne.n	80020d6 <UART_SetConfig+0x226>
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	e016      	b.n	8002104 <UART_SetConfig+0x254>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e014      	b.n	8002104 <UART_SetConfig+0x254>
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	e012      	b.n	8002104 <UART_SetConfig+0x254>
 80020de:	2340      	movs	r3, #64	; 0x40
 80020e0:	e010      	b.n	8002104 <UART_SetConfig+0x254>
 80020e2:	2320      	movs	r3, #32
 80020e4:	e00e      	b.n	8002104 <UART_SetConfig+0x254>
 80020e6:	2310      	movs	r3, #16
 80020e8:	e00c      	b.n	8002104 <UART_SetConfig+0x254>
 80020ea:	230c      	movs	r3, #12
 80020ec:	e00a      	b.n	8002104 <UART_SetConfig+0x254>
 80020ee:	230a      	movs	r3, #10
 80020f0:	e008      	b.n	8002104 <UART_SetConfig+0x254>
 80020f2:	2308      	movs	r3, #8
 80020f4:	e006      	b.n	8002104 <UART_SetConfig+0x254>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e004      	b.n	8002104 <UART_SetConfig+0x254>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e002      	b.n	8002104 <UART_SetConfig+0x254>
 80020fe:	2302      	movs	r3, #2
 8002100:	e000      	b.n	8002104 <UART_SetConfig+0x254>
 8002102:	2301      	movs	r3, #1
 8002104:	0019      	movs	r1, r3
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7fd fffa 	bl	8000100 <__udivsi3>
 800210c:	0003      	movs	r3, r0
 800210e:	005a      	lsls	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	18d2      	adds	r2, r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	0019      	movs	r1, r3
 800211e:	0010      	movs	r0, r2
 8002120:	f7fd ffee 	bl	8000100 <__udivsi3>
 8002124:	0003      	movs	r3, r0
 8002126:	b29b      	uxth	r3, r3
 8002128:	617b      	str	r3, [r7, #20]
        break;
 800212a:	e147      	b.n	80023bc <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2b00      	cmp	r3, #0
 8002132:	d043      	beq.n	80021bc <UART_SetConfig+0x30c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b01      	cmp	r3, #1
 800213a:	d03d      	beq.n	80021b8 <UART_SetConfig+0x308>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	2b02      	cmp	r3, #2
 8002142:	d037      	beq.n	80021b4 <UART_SetConfig+0x304>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2b03      	cmp	r3, #3
 800214a:	d031      	beq.n	80021b0 <UART_SetConfig+0x300>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2b04      	cmp	r3, #4
 8002152:	d02b      	beq.n	80021ac <UART_SetConfig+0x2fc>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	2b05      	cmp	r3, #5
 800215a:	d025      	beq.n	80021a8 <UART_SetConfig+0x2f8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2b06      	cmp	r3, #6
 8002162:	d01f      	beq.n	80021a4 <UART_SetConfig+0x2f4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	2b07      	cmp	r3, #7
 800216a:	d019      	beq.n	80021a0 <UART_SetConfig+0x2f0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2b08      	cmp	r3, #8
 8002172:	d013      	beq.n	800219c <UART_SetConfig+0x2ec>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	2b09      	cmp	r3, #9
 800217a:	d00d      	beq.n	8002198 <UART_SetConfig+0x2e8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2b0a      	cmp	r3, #10
 8002182:	d007      	beq.n	8002194 <UART_SetConfig+0x2e4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2b0b      	cmp	r3, #11
 800218a:	d101      	bne.n	8002190 <UART_SetConfig+0x2e0>
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <UART_SetConfig+0x34c>)
 800218e:	e016      	b.n	80021be <UART_SetConfig+0x30e>
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <UART_SetConfig+0x350>)
 8002192:	e014      	b.n	80021be <UART_SetConfig+0x30e>
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <UART_SetConfig+0x354>)
 8002196:	e012      	b.n	80021be <UART_SetConfig+0x30e>
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <UART_SetConfig+0x358>)
 800219a:	e010      	b.n	80021be <UART_SetConfig+0x30e>
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <UART_SetConfig+0x35c>)
 800219e:	e00e      	b.n	80021be <UART_SetConfig+0x30e>
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <UART_SetConfig+0x360>)
 80021a2:	e00c      	b.n	80021be <UART_SetConfig+0x30e>
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <UART_SetConfig+0x364>)
 80021a6:	e00a      	b.n	80021be <UART_SetConfig+0x30e>
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <UART_SetConfig+0x368>)
 80021aa:	e008      	b.n	80021be <UART_SetConfig+0x30e>
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <UART_SetConfig+0x36c>)
 80021ae:	e006      	b.n	80021be <UART_SetConfig+0x30e>
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <UART_SetConfig+0x370>)
 80021b2:	e004      	b.n	80021be <UART_SetConfig+0x30e>
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <UART_SetConfig+0x374>)
 80021b6:	e002      	b.n	80021be <UART_SetConfig+0x30e>
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <UART_SetConfig+0x378>)
 80021ba:	e000      	b.n	80021be <UART_SetConfig+0x30e>
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <UART_SetConfig+0x350>)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6852      	ldr	r2, [r2, #4]
 80021c2:	0852      	lsrs	r2, r2, #1
 80021c4:	189a      	adds	r2, r3, r2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	0019      	movs	r1, r3
 80021cc:	0010      	movs	r0, r2
 80021ce:	f7fd ff97 	bl	8000100 <__udivsi3>
 80021d2:	0003      	movs	r3, r0
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	617b      	str	r3, [r7, #20]
        break;
 80021d8:	e0f0      	b.n	80023bc <UART_SetConfig+0x50c>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	cfff69f3 	.word	0xcfff69f3
 80021e0:	ffffcfff 	.word	0xffffcfff
 80021e4:	11fff4ff 	.word	0x11fff4ff
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40004400 	.word	0x40004400
 80021f4:	40004800 	.word	0x40004800
 80021f8:	40004c00 	.word	0x40004c00
 80021fc:	0001e848 	.word	0x0001e848
 8002200:	01e84800 	.word	0x01e84800
 8002204:	0003d090 	.word	0x0003d090
 8002208:	0007a120 	.word	0x0007a120
 800220c:	000f4240 	.word	0x000f4240
 8002210:	001e8480 	.word	0x001e8480
 8002214:	0028b0aa 	.word	0x0028b0aa
 8002218:	0030d400 	.word	0x0030d400
 800221c:	003d0900 	.word	0x003d0900
 8002220:	00516154 	.word	0x00516154
 8002224:	007a1200 	.word	0x007a1200
 8002228:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800222c:	f7ff fb66 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 8002230:	0003      	movs	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d044      	beq.n	80022c6 <UART_SetConfig+0x416>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2b01      	cmp	r3, #1
 8002242:	d03e      	beq.n	80022c2 <UART_SetConfig+0x412>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	2b02      	cmp	r3, #2
 800224a:	d038      	beq.n	80022be <UART_SetConfig+0x40e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2b03      	cmp	r3, #3
 8002252:	d032      	beq.n	80022ba <UART_SetConfig+0x40a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2b04      	cmp	r3, #4
 800225a:	d02c      	beq.n	80022b6 <UART_SetConfig+0x406>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b05      	cmp	r3, #5
 8002262:	d026      	beq.n	80022b2 <UART_SetConfig+0x402>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2b06      	cmp	r3, #6
 800226a:	d020      	beq.n	80022ae <UART_SetConfig+0x3fe>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	2b07      	cmp	r3, #7
 8002272:	d01a      	beq.n	80022aa <UART_SetConfig+0x3fa>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b08      	cmp	r3, #8
 800227a:	d014      	beq.n	80022a6 <UART_SetConfig+0x3f6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2b09      	cmp	r3, #9
 8002282:	d00e      	beq.n	80022a2 <UART_SetConfig+0x3f2>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2b0a      	cmp	r3, #10
 800228a:	d008      	beq.n	800229e <UART_SetConfig+0x3ee>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b0b      	cmp	r3, #11
 8002292:	d102      	bne.n	800229a <UART_SetConfig+0x3ea>
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	e016      	b.n	80022c8 <UART_SetConfig+0x418>
 800229a:	2301      	movs	r3, #1
 800229c:	e014      	b.n	80022c8 <UART_SetConfig+0x418>
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	e012      	b.n	80022c8 <UART_SetConfig+0x418>
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	e010      	b.n	80022c8 <UART_SetConfig+0x418>
 80022a6:	2320      	movs	r3, #32
 80022a8:	e00e      	b.n	80022c8 <UART_SetConfig+0x418>
 80022aa:	2310      	movs	r3, #16
 80022ac:	e00c      	b.n	80022c8 <UART_SetConfig+0x418>
 80022ae:	230c      	movs	r3, #12
 80022b0:	e00a      	b.n	80022c8 <UART_SetConfig+0x418>
 80022b2:	230a      	movs	r3, #10
 80022b4:	e008      	b.n	80022c8 <UART_SetConfig+0x418>
 80022b6:	2308      	movs	r3, #8
 80022b8:	e006      	b.n	80022c8 <UART_SetConfig+0x418>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e004      	b.n	80022c8 <UART_SetConfig+0x418>
 80022be:	2304      	movs	r3, #4
 80022c0:	e002      	b.n	80022c8 <UART_SetConfig+0x418>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e000      	b.n	80022c8 <UART_SetConfig+0x418>
 80022c6:	2301      	movs	r3, #1
 80022c8:	0019      	movs	r1, r3
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7fd ff18 	bl	8000100 <__udivsi3>
 80022d0:	0003      	movs	r3, r0
 80022d2:	005a      	lsls	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	18d2      	adds	r2, r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	0019      	movs	r1, r3
 80022e2:	0010      	movs	r0, r2
 80022e4:	f7fd ff0c 	bl	8000100 <__udivsi3>
 80022e8:	0003      	movs	r3, r0
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	617b      	str	r3, [r7, #20]
        break;
 80022ee:	e065      	b.n	80023bc <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d04c      	beq.n	8002392 <UART_SetConfig+0x4e2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d045      	beq.n	800238c <UART_SetConfig+0x4dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b02      	cmp	r3, #2
 8002306:	d03e      	beq.n	8002386 <UART_SetConfig+0x4d6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2b03      	cmp	r3, #3
 800230e:	d038      	beq.n	8002382 <UART_SetConfig+0x4d2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	2b04      	cmp	r3, #4
 8002316:	d031      	beq.n	800237c <UART_SetConfig+0x4cc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2b05      	cmp	r3, #5
 800231e:	d02b      	beq.n	8002378 <UART_SetConfig+0x4c8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2b06      	cmp	r3, #6
 8002326:	d025      	beq.n	8002374 <UART_SetConfig+0x4c4>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2b07      	cmp	r3, #7
 800232e:	d01e      	beq.n	800236e <UART_SetConfig+0x4be>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2b08      	cmp	r3, #8
 8002336:	d017      	beq.n	8002368 <UART_SetConfig+0x4b8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b09      	cmp	r3, #9
 800233e:	d010      	beq.n	8002362 <UART_SetConfig+0x4b2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2b0a      	cmp	r3, #10
 8002346:	d009      	beq.n	800235c <UART_SetConfig+0x4ac>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2b0b      	cmp	r3, #11
 800234e:	d102      	bne.n	8002356 <UART_SetConfig+0x4a6>
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	e01f      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	e01c      	b.n	8002396 <UART_SetConfig+0x4e6>
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	e019      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	e016      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	e013      	b.n	8002396 <UART_SetConfig+0x4e6>
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	015b      	lsls	r3, r3, #5
 8002372:	e010      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002374:	4bb9      	ldr	r3, [pc, #740]	; (800265c <UART_SetConfig+0x7ac>)
 8002376:	e00e      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002378:	4bb9      	ldr	r3, [pc, #740]	; (8002660 <UART_SetConfig+0x7b0>)
 800237a:	e00c      	b.n	8002396 <UART_SetConfig+0x4e6>
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	019b      	lsls	r3, r3, #6
 8002380:	e009      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002382:	4bb8      	ldr	r3, [pc, #736]	; (8002664 <UART_SetConfig+0x7b4>)
 8002384:	e007      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	01db      	lsls	r3, r3, #7
 800238a:	e004      	b.n	8002396 <UART_SetConfig+0x4e6>
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	e001      	b.n	8002396 <UART_SetConfig+0x4e6>
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	025b      	lsls	r3, r3, #9
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6852      	ldr	r2, [r2, #4]
 800239a:	0852      	lsrs	r2, r2, #1
 800239c:	189a      	adds	r2, r3, r2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0019      	movs	r1, r3
 80023a4:	0010      	movs	r0, r2
 80023a6:	f7fd feab 	bl	8000100 <__udivsi3>
 80023aa:	0003      	movs	r3, r0
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	617b      	str	r3, [r7, #20]
        break;
 80023b0:	e004      	b.n	80023bc <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 80023b2:	231e      	movs	r3, #30
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
        break;
 80023ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	d91b      	bls.n	80023fa <UART_SetConfig+0x54a>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4aa8      	ldr	r2, [pc, #672]	; (8002668 <UART_SetConfig+0x7b8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d817      	bhi.n	80023fa <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	200a      	movs	r0, #10
 80023d0:	183b      	adds	r3, r7, r0
 80023d2:	210f      	movs	r1, #15
 80023d4:	438a      	bics	r2, r1
 80023d6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2207      	movs	r2, #7
 80023e0:	4013      	ands	r3, r2
 80023e2:	b299      	uxth	r1, r3
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	183a      	adds	r2, r7, r0
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	183a      	adds	r2, r7, r0
 80023f4:	8812      	ldrh	r2, [r2, #0]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	e1c5      	b.n	8002786 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 80023fa:	231e      	movs	r3, #30
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e1c0      	b.n	8002786 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8002404:	231f      	movs	r3, #31
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d100      	bne.n	8002410 <UART_SetConfig+0x560>
 800240e:	e06c      	b.n	80024ea <UART_SetConfig+0x63a>
 8002410:	dc02      	bgt.n	8002418 <UART_SetConfig+0x568>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <UART_SetConfig+0x576>
 8002416:	e1a1      	b.n	800275c <UART_SetConfig+0x8ac>
 8002418:	2b04      	cmp	r3, #4
 800241a:	d100      	bne.n	800241e <UART_SetConfig+0x56e>
 800241c:	e0bc      	b.n	8002598 <UART_SetConfig+0x6e8>
 800241e:	2b08      	cmp	r3, #8
 8002420:	d100      	bne.n	8002424 <UART_SetConfig+0x574>
 8002422:	e13b      	b.n	800269c <UART_SetConfig+0x7ec>
 8002424:	e19a      	b.n	800275c <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002426:	f7ff faf5 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 800242a:	0003      	movs	r3, r0
 800242c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d044      	beq.n	80024c0 <UART_SetConfig+0x610>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b01      	cmp	r3, #1
 800243c:	d03e      	beq.n	80024bc <UART_SetConfig+0x60c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2b02      	cmp	r3, #2
 8002444:	d038      	beq.n	80024b8 <UART_SetConfig+0x608>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2b03      	cmp	r3, #3
 800244c:	d032      	beq.n	80024b4 <UART_SetConfig+0x604>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	2b04      	cmp	r3, #4
 8002454:	d02c      	beq.n	80024b0 <UART_SetConfig+0x600>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2b05      	cmp	r3, #5
 800245c:	d026      	beq.n	80024ac <UART_SetConfig+0x5fc>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b06      	cmp	r3, #6
 8002464:	d020      	beq.n	80024a8 <UART_SetConfig+0x5f8>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b07      	cmp	r3, #7
 800246c:	d01a      	beq.n	80024a4 <UART_SetConfig+0x5f4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2b08      	cmp	r3, #8
 8002474:	d014      	beq.n	80024a0 <UART_SetConfig+0x5f0>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b09      	cmp	r3, #9
 800247c:	d00e      	beq.n	800249c <UART_SetConfig+0x5ec>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2b0a      	cmp	r3, #10
 8002484:	d008      	beq.n	8002498 <UART_SetConfig+0x5e8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2b0b      	cmp	r3, #11
 800248c:	d102      	bne.n	8002494 <UART_SetConfig+0x5e4>
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	e016      	b.n	80024c2 <UART_SetConfig+0x612>
 8002494:	2301      	movs	r3, #1
 8002496:	e014      	b.n	80024c2 <UART_SetConfig+0x612>
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	e012      	b.n	80024c2 <UART_SetConfig+0x612>
 800249c:	2340      	movs	r3, #64	; 0x40
 800249e:	e010      	b.n	80024c2 <UART_SetConfig+0x612>
 80024a0:	2320      	movs	r3, #32
 80024a2:	e00e      	b.n	80024c2 <UART_SetConfig+0x612>
 80024a4:	2310      	movs	r3, #16
 80024a6:	e00c      	b.n	80024c2 <UART_SetConfig+0x612>
 80024a8:	230c      	movs	r3, #12
 80024aa:	e00a      	b.n	80024c2 <UART_SetConfig+0x612>
 80024ac:	230a      	movs	r3, #10
 80024ae:	e008      	b.n	80024c2 <UART_SetConfig+0x612>
 80024b0:	2308      	movs	r3, #8
 80024b2:	e006      	b.n	80024c2 <UART_SetConfig+0x612>
 80024b4:	2306      	movs	r3, #6
 80024b6:	e004      	b.n	80024c2 <UART_SetConfig+0x612>
 80024b8:	2304      	movs	r3, #4
 80024ba:	e002      	b.n	80024c2 <UART_SetConfig+0x612>
 80024bc:	2302      	movs	r3, #2
 80024be:	e000      	b.n	80024c2 <UART_SetConfig+0x612>
 80024c0:	2301      	movs	r3, #1
 80024c2:	0019      	movs	r1, r3
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7fd fe1b 	bl	8000100 <__udivsi3>
 80024ca:	0003      	movs	r3, r0
 80024cc:	001a      	movs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	18d2      	adds	r2, r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0019      	movs	r1, r3
 80024dc:	0010      	movs	r0, r2
 80024de:	f7fd fe0f 	bl	8000100 <__udivsi3>
 80024e2:	0003      	movs	r3, r0
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	617b      	str	r3, [r7, #20]
        break;
 80024e8:	e13d      	b.n	8002766 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d043      	beq.n	800257a <UART_SetConfig+0x6ca>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d03d      	beq.n	8002576 <UART_SetConfig+0x6c6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d037      	beq.n	8002572 <UART_SetConfig+0x6c2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2b03      	cmp	r3, #3
 8002508:	d031      	beq.n	800256e <UART_SetConfig+0x6be>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b04      	cmp	r3, #4
 8002510:	d02b      	beq.n	800256a <UART_SetConfig+0x6ba>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2b05      	cmp	r3, #5
 8002518:	d025      	beq.n	8002566 <UART_SetConfig+0x6b6>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b06      	cmp	r3, #6
 8002520:	d01f      	beq.n	8002562 <UART_SetConfig+0x6b2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b07      	cmp	r3, #7
 8002528:	d019      	beq.n	800255e <UART_SetConfig+0x6ae>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2b08      	cmp	r3, #8
 8002530:	d013      	beq.n	800255a <UART_SetConfig+0x6aa>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b09      	cmp	r3, #9
 8002538:	d00d      	beq.n	8002556 <UART_SetConfig+0x6a6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b0a      	cmp	r3, #10
 8002540:	d007      	beq.n	8002552 <UART_SetConfig+0x6a2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2b0b      	cmp	r3, #11
 8002548:	d101      	bne.n	800254e <UART_SetConfig+0x69e>
 800254a:	4b48      	ldr	r3, [pc, #288]	; (800266c <UART_SetConfig+0x7bc>)
 800254c:	e016      	b.n	800257c <UART_SetConfig+0x6cc>
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <UART_SetConfig+0x7c0>)
 8002550:	e014      	b.n	800257c <UART_SetConfig+0x6cc>
 8002552:	4b48      	ldr	r3, [pc, #288]	; (8002674 <UART_SetConfig+0x7c4>)
 8002554:	e012      	b.n	800257c <UART_SetConfig+0x6cc>
 8002556:	4b48      	ldr	r3, [pc, #288]	; (8002678 <UART_SetConfig+0x7c8>)
 8002558:	e010      	b.n	800257c <UART_SetConfig+0x6cc>
 800255a:	4b48      	ldr	r3, [pc, #288]	; (800267c <UART_SetConfig+0x7cc>)
 800255c:	e00e      	b.n	800257c <UART_SetConfig+0x6cc>
 800255e:	4b48      	ldr	r3, [pc, #288]	; (8002680 <UART_SetConfig+0x7d0>)
 8002560:	e00c      	b.n	800257c <UART_SetConfig+0x6cc>
 8002562:	4b48      	ldr	r3, [pc, #288]	; (8002684 <UART_SetConfig+0x7d4>)
 8002564:	e00a      	b.n	800257c <UART_SetConfig+0x6cc>
 8002566:	4b48      	ldr	r3, [pc, #288]	; (8002688 <UART_SetConfig+0x7d8>)
 8002568:	e008      	b.n	800257c <UART_SetConfig+0x6cc>
 800256a:	4b48      	ldr	r3, [pc, #288]	; (800268c <UART_SetConfig+0x7dc>)
 800256c:	e006      	b.n	800257c <UART_SetConfig+0x6cc>
 800256e:	4b48      	ldr	r3, [pc, #288]	; (8002690 <UART_SetConfig+0x7e0>)
 8002570:	e004      	b.n	800257c <UART_SetConfig+0x6cc>
 8002572:	4b48      	ldr	r3, [pc, #288]	; (8002694 <UART_SetConfig+0x7e4>)
 8002574:	e002      	b.n	800257c <UART_SetConfig+0x6cc>
 8002576:	4b48      	ldr	r3, [pc, #288]	; (8002698 <UART_SetConfig+0x7e8>)
 8002578:	e000      	b.n	800257c <UART_SetConfig+0x6cc>
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <UART_SetConfig+0x7c0>)
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6852      	ldr	r2, [r2, #4]
 8002580:	0852      	lsrs	r2, r2, #1
 8002582:	189a      	adds	r2, r3, r2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0019      	movs	r1, r3
 800258a:	0010      	movs	r0, r2
 800258c:	f7fd fdb8 	bl	8000100 <__udivsi3>
 8002590:	0003      	movs	r3, r0
 8002592:	b29b      	uxth	r3, r3
 8002594:	617b      	str	r3, [r7, #20]
        break;
 8002596:	e0e6      	b.n	8002766 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002598:	f7ff f9b0 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d044      	beq.n	8002632 <UART_SetConfig+0x782>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d03e      	beq.n	800262e <UART_SetConfig+0x77e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d038      	beq.n	800262a <UART_SetConfig+0x77a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d032      	beq.n	8002626 <UART_SetConfig+0x776>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d02c      	beq.n	8002622 <UART_SetConfig+0x772>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d026      	beq.n	800261e <UART_SetConfig+0x76e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d020      	beq.n	800261a <UART_SetConfig+0x76a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2b07      	cmp	r3, #7
 80025de:	d01a      	beq.n	8002616 <UART_SetConfig+0x766>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d014      	beq.n	8002612 <UART_SetConfig+0x762>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d00e      	beq.n	800260e <UART_SetConfig+0x75e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2b0a      	cmp	r3, #10
 80025f6:	d008      	beq.n	800260a <UART_SetConfig+0x75a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2b0b      	cmp	r3, #11
 80025fe:	d102      	bne.n	8002606 <UART_SetConfig+0x756>
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	e016      	b.n	8002634 <UART_SetConfig+0x784>
 8002606:	2301      	movs	r3, #1
 8002608:	e014      	b.n	8002634 <UART_SetConfig+0x784>
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	e012      	b.n	8002634 <UART_SetConfig+0x784>
 800260e:	2340      	movs	r3, #64	; 0x40
 8002610:	e010      	b.n	8002634 <UART_SetConfig+0x784>
 8002612:	2320      	movs	r3, #32
 8002614:	e00e      	b.n	8002634 <UART_SetConfig+0x784>
 8002616:	2310      	movs	r3, #16
 8002618:	e00c      	b.n	8002634 <UART_SetConfig+0x784>
 800261a:	230c      	movs	r3, #12
 800261c:	e00a      	b.n	8002634 <UART_SetConfig+0x784>
 800261e:	230a      	movs	r3, #10
 8002620:	e008      	b.n	8002634 <UART_SetConfig+0x784>
 8002622:	2308      	movs	r3, #8
 8002624:	e006      	b.n	8002634 <UART_SetConfig+0x784>
 8002626:	2306      	movs	r3, #6
 8002628:	e004      	b.n	8002634 <UART_SetConfig+0x784>
 800262a:	2304      	movs	r3, #4
 800262c:	e002      	b.n	8002634 <UART_SetConfig+0x784>
 800262e:	2302      	movs	r3, #2
 8002630:	e000      	b.n	8002634 <UART_SetConfig+0x784>
 8002632:	2301      	movs	r3, #1
 8002634:	0019      	movs	r1, r3
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7fd fd62 	bl	8000100 <__udivsi3>
 800263c:	0003      	movs	r3, r0
 800263e:	001a      	movs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	18d2      	adds	r2, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0019      	movs	r1, r3
 800264e:	0010      	movs	r0, r2
 8002650:	f7fd fd56 	bl	8000100 <__udivsi3>
 8002654:	0003      	movs	r3, r0
 8002656:	b29b      	uxth	r3, r3
 8002658:	617b      	str	r3, [r7, #20]
        break;
 800265a:	e084      	b.n	8002766 <UART_SetConfig+0x8b6>
 800265c:	00001554 	.word	0x00001554
 8002660:	00001998 	.word	0x00001998
 8002664:	00002aaa 	.word	0x00002aaa
 8002668:	0000ffff 	.word	0x0000ffff
 800266c:	0000f424 	.word	0x0000f424
 8002670:	00f42400 	.word	0x00f42400
 8002674:	0001e848 	.word	0x0001e848
 8002678:	0003d090 	.word	0x0003d090
 800267c:	0007a120 	.word	0x0007a120
 8002680:	000f4240 	.word	0x000f4240
 8002684:	00145855 	.word	0x00145855
 8002688:	00186a00 	.word	0x00186a00
 800268c:	001e8480 	.word	0x001e8480
 8002690:	0028b0aa 	.word	0x0028b0aa
 8002694:	003d0900 	.word	0x003d0900
 8002698:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d04b      	beq.n	800273c <UART_SetConfig+0x88c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d044      	beq.n	8002736 <UART_SetConfig+0x886>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d03d      	beq.n	8002730 <UART_SetConfig+0x880>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d037      	beq.n	800272c <UART_SetConfig+0x87c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d030      	beq.n	8002726 <UART_SetConfig+0x876>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d02a      	beq.n	8002722 <UART_SetConfig+0x872>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d024      	beq.n	800271e <UART_SetConfig+0x86e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2b07      	cmp	r3, #7
 80026da:	d01d      	beq.n	8002718 <UART_SetConfig+0x868>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d016      	beq.n	8002712 <UART_SetConfig+0x862>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d00f      	beq.n	800270c <UART_SetConfig+0x85c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b0a      	cmp	r3, #10
 80026f2:	d008      	beq.n	8002706 <UART_SetConfig+0x856>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b0b      	cmp	r3, #11
 80026fa:	d101      	bne.n	8002700 <UART_SetConfig+0x850>
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	e01f      	b.n	8002740 <UART_SetConfig+0x890>
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	e01c      	b.n	8002740 <UART_SetConfig+0x890>
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	e019      	b.n	8002740 <UART_SetConfig+0x890>
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	e016      	b.n	8002740 <UART_SetConfig+0x890>
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	e013      	b.n	8002740 <UART_SetConfig+0x890>
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	e010      	b.n	8002740 <UART_SetConfig+0x890>
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <UART_SetConfig+0x900>)
 8002720:	e00e      	b.n	8002740 <UART_SetConfig+0x890>
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <UART_SetConfig+0x904>)
 8002724:	e00c      	b.n	8002740 <UART_SetConfig+0x890>
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	015b      	lsls	r3, r3, #5
 800272a:	e009      	b.n	8002740 <UART_SetConfig+0x890>
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <UART_SetConfig+0x908>)
 800272e:	e007      	b.n	8002740 <UART_SetConfig+0x890>
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	019b      	lsls	r3, r3, #6
 8002734:	e004      	b.n	8002740 <UART_SetConfig+0x890>
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	01db      	lsls	r3, r3, #7
 800273a:	e001      	b.n	8002740 <UART_SetConfig+0x890>
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6852      	ldr	r2, [r2, #4]
 8002744:	0852      	lsrs	r2, r2, #1
 8002746:	189a      	adds	r2, r3, r2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0019      	movs	r1, r3
 800274e:	0010      	movs	r0, r2
 8002750:	f7fd fcd6 	bl	8000100 <__udivsi3>
 8002754:	0003      	movs	r3, r0
 8002756:	b29b      	uxth	r3, r3
 8002758:	617b      	str	r3, [r7, #20]
        break;
 800275a:	e004      	b.n	8002766 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 800275c:	231e      	movs	r3, #30
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
        break;
 8002764:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d908      	bls.n	800277e <UART_SetConfig+0x8ce>
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4a13      	ldr	r2, [pc, #76]	; (80027bc <UART_SetConfig+0x90c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d804      	bhi.n	800277e <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	e003      	b.n	8002786 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800277e:	231e      	movs	r3, #30
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	226a      	movs	r2, #106	; 0x6a
 800278a:	2101      	movs	r1, #1
 800278c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2268      	movs	r2, #104	; 0x68
 8002792:	2101      	movs	r1, #1
 8002794:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80027a2:	231e      	movs	r3, #30
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b008      	add	sp, #32
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	00000aaa 	.word	0x00000aaa
 80027b4:	00000ccc 	.word	0x00000ccc
 80027b8:	00001555 	.word	0x00001555
 80027bc:	0000ffff 	.word	0x0000ffff

080027c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	d00b      	beq.n	80027ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a4a      	ldr	r2, [pc, #296]	; (8002904 <UART_AdvFeatureConfig+0x144>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00b      	beq.n	800280c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a43      	ldr	r2, [pc, #268]	; (8002908 <UART_AdvFeatureConfig+0x148>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	2204      	movs	r2, #4
 8002812:	4013      	ands	r3, r2
 8002814:	d00b      	beq.n	800282e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a3b      	ldr	r2, [pc, #236]	; (800290c <UART_AdvFeatureConfig+0x14c>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	2208      	movs	r2, #8
 8002834:	4013      	ands	r3, r2
 8002836:	d00b      	beq.n	8002850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4a34      	ldr	r2, [pc, #208]	; (8002910 <UART_AdvFeatureConfig+0x150>)
 8002840:	4013      	ands	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	2210      	movs	r2, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d00b      	beq.n	8002872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <UART_AdvFeatureConfig+0x154>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	2220      	movs	r2, #32
 8002878:	4013      	ands	r3, r2
 800287a:	d00b      	beq.n	8002894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4a25      	ldr	r2, [pc, #148]	; (8002918 <UART_AdvFeatureConfig+0x158>)
 8002884:	4013      	ands	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	2240      	movs	r2, #64	; 0x40
 800289a:	4013      	ands	r3, r2
 800289c:	d01d      	beq.n	80028da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <UART_AdvFeatureConfig+0x15c>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	0019      	movs	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	035b      	lsls	r3, r3, #13
 80028be:	429a      	cmp	r2, r3
 80028c0:	d10b      	bne.n	80028da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <UART_AdvFeatureConfig+0x160>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	4013      	ands	r3, r2
 80028e2:	d00b      	beq.n	80028fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <UART_AdvFeatureConfig+0x164>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
  }
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}
 8002904:	fffdffff 	.word	0xfffdffff
 8002908:	fffeffff 	.word	0xfffeffff
 800290c:	fffbffff 	.word	0xfffbffff
 8002910:	ffff7fff 	.word	0xffff7fff
 8002914:	ffffefff 	.word	0xffffefff
 8002918:	ffffdfff 	.word	0xffffdfff
 800291c:	ffefffff 	.word	0xffefffff
 8002920:	ff9fffff 	.word	0xff9fffff
 8002924:	fff7ffff 	.word	0xfff7ffff

08002928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af02      	add	r7, sp, #8
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2288      	movs	r2, #136	; 0x88
 8002934:	2100      	movs	r1, #0
 8002936:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002938:	f7fe f8b8 	bl	8000aac <HAL_GetTick>
 800293c:	0003      	movs	r3, r0
 800293e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2208      	movs	r2, #8
 8002948:	4013      	ands	r3, r2
 800294a:	2b08      	cmp	r3, #8
 800294c:	d10d      	bne.n	800296a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	0399      	lsls	r1, r3, #14
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <UART_CheckIdleState+0x90>)
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	0013      	movs	r3, r2
 800295c:	2200      	movs	r2, #0
 800295e:	f000 f82d 	bl	80029bc <UART_WaitOnFlagUntilTimeout>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d001      	beq.n	800296a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e021      	b.n	80029ae <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2204      	movs	r2, #4
 8002972:	4013      	ands	r3, r2
 8002974:	2b04      	cmp	r3, #4
 8002976:	d10d      	bne.n	8002994 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	03d9      	lsls	r1, r3, #15
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <UART_CheckIdleState+0x90>)
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	0013      	movs	r3, r2
 8002986:	2200      	movs	r2, #0
 8002988:	f000 f818 	bl	80029bc <UART_WaitOnFlagUntilTimeout>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e00c      	b.n	80029ae <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	2120      	movs	r1, #32
 800299a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2284      	movs	r2, #132	; 0x84
 80029a0:	2120      	movs	r1, #32
 80029a2:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	227c      	movs	r2, #124	; 0x7c
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	01ffffff 	.word	0x01ffffff

080029bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	1dfb      	adds	r3, r7, #7
 80029ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029cc:	e02b      	b.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3301      	adds	r3, #1
 80029d2:	d028      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7fe f86a 	bl	8000aac <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11d      	bne.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <UART_WaitOnFlagUntilTimeout+0x94>)
 80029f6:	400a      	ands	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	438a      	bics	r2, r1
 8002a08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	2120      	movs	r1, #32
 8002a10:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2284      	movs	r2, #132	; 0x84
 8002a16:	2120      	movs	r1, #32
 8002a18:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	227c      	movs	r2, #124	; 0x7c
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e00f      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	4153      	adcs	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d0c4      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	fffffe5f 	.word	0xfffffe5f

08002a54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	227c      	movs	r2, #124	; 0x7c
 8002a60:	5c9b      	ldrb	r3, [r3, r2]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_UARTEx_DisableFifoMode+0x16>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e027      	b.n	8002aba <HAL_UARTEx_DisableFifoMode+0x66>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	227c      	movs	r2, #124	; 0x7c
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	2124      	movs	r1, #36	; 0x24
 8002a78:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	438a      	bics	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	2120      	movs	r1, #32
 8002aae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	227c      	movs	r2, #124	; 0x7c
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	dfffffff 	.word	0xdfffffff

08002ac8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	227c      	movs	r2, #124	; 0x7c
 8002ad6:	5c9b      	ldrb	r3, [r3, r2]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e02e      	b.n	8002b3e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	227c      	movs	r2, #124	; 0x7c
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	2124      	movs	r1, #36	; 0x24
 8002aee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	438a      	bics	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	08d9      	lsrs	r1, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 f854 	bl	8002bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	2120      	movs	r1, #32
 8002b32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	227c      	movs	r2, #124	; 0x7c
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b004      	add	sp, #16
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	227c      	movs	r2, #124	; 0x7c
 8002b56:	5c9b      	ldrb	r3, [r3, r2]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e02f      	b.n	8002bc0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	227c      	movs	r2, #124	; 0x7c
 8002b64:	2101      	movs	r1, #1
 8002b66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	2124      	movs	r1, #36	; 0x24
 8002b6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2101      	movs	r1, #1
 8002b84:	438a      	bics	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 f813 	bl	8002bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	2120      	movs	r1, #32
 8002bb4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	227c      	movs	r2, #124	; 0x7c
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	f1ffffff 	.word	0xf1ffffff

08002bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002bd4:	2314      	movs	r3, #20
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <UARTEx_SetNbDataToProcess+0xcc>)
 8002bda:	ca03      	ldmia	r2!, {r0, r1}
 8002bdc:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002bde:	230c      	movs	r3, #12
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	4a2e      	ldr	r2, [pc, #184]	; (8002c9c <UARTEx_SetNbDataToProcess+0xd0>)
 8002be4:	ca03      	ldmia	r2!, {r0, r1}
 8002be6:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d108      	bne.n	8002c02 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	226a      	movs	r2, #106	; 0x6a
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2268      	movs	r2, #104	; 0x68
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002c00:	e046      	b.n	8002c90 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002c02:	261f      	movs	r6, #31
 8002c04:	19bb      	adds	r3, r7, r6
 8002c06:	2208      	movs	r2, #8
 8002c08:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c0a:	201e      	movs	r0, #30
 8002c0c:	183b      	adds	r3, r7, r0
 8002c0e:	2208      	movs	r2, #8
 8002c10:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	0e5b      	lsrs	r3, r3, #25
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	241d      	movs	r4, #29
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	2107      	movs	r1, #7
 8002c22:	400a      	ands	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	0f5b      	lsrs	r3, r3, #29
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	251c      	movs	r5, #28
 8002c32:	197b      	adds	r3, r7, r5
 8002c34:	2107      	movs	r1, #7
 8002c36:	400a      	ands	r2, r1
 8002c38:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	197a      	adds	r2, r7, r5
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	2114      	movs	r1, #20
 8002c44:	1879      	adds	r1, r7, r1
 8002c46:	5c8a      	ldrb	r2, [r1, r2]
 8002c48:	435a      	muls	r2, r3
 8002c4a:	0010      	movs	r0, r2
 8002c4c:	197b      	adds	r3, r7, r5
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	250c      	movs	r5, #12
 8002c52:	197a      	adds	r2, r7, r5
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	0019      	movs	r1, r3
 8002c58:	f7fd fadc 	bl	8000214 <__divsi3>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	b299      	uxth	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	226a      	movs	r2, #106	; 0x6a
 8002c64:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002c66:	19bb      	adds	r3, r7, r6
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	193a      	adds	r2, r7, r4
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	2114      	movs	r1, #20
 8002c70:	1879      	adds	r1, r7, r1
 8002c72:	5c8a      	ldrb	r2, [r1, r2]
 8002c74:	435a      	muls	r2, r3
 8002c76:	0010      	movs	r0, r2
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	197a      	adds	r2, r7, r5
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	0019      	movs	r1, r3
 8002c82:	f7fd fac7 	bl	8000214 <__divsi3>
 8002c86:	0003      	movs	r3, r0
 8002c88:	b299      	uxth	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2268      	movs	r2, #104	; 0x68
 8002c8e:	5299      	strh	r1, [r3, r2]
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b009      	add	sp, #36	; 0x24
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c98:	08002d10 	.word	0x08002d10
 8002c9c:	08002d18 	.word	0x08002d18

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	2600      	movs	r6, #0
 8002ca4:	4d0c      	ldr	r5, [pc, #48]	; (8002cd8 <__libc_init_array+0x38>)
 8002ca6:	4c0d      	ldr	r4, [pc, #52]	; (8002cdc <__libc_init_array+0x3c>)
 8002ca8:	1b64      	subs	r4, r4, r5
 8002caa:	10a4      	asrs	r4, r4, #2
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	2600      	movs	r6, #0
 8002cb2:	f000 f821 	bl	8002cf8 <_init>
 8002cb6:	4d0a      	ldr	r5, [pc, #40]	; (8002ce0 <__libc_init_array+0x40>)
 8002cb8:	4c0a      	ldr	r4, [pc, #40]	; (8002ce4 <__libc_init_array+0x44>)
 8002cba:	1b64      	subs	r4, r4, r5
 8002cbc:	10a4      	asrs	r4, r4, #2
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	00b3      	lsls	r3, r6, #2
 8002cc6:	58eb      	ldr	r3, [r5, r3]
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	00b3      	lsls	r3, r6, #2
 8002cd0:	58eb      	ldr	r3, [r5, r3]
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08002d80 	.word	0x08002d80
 8002cdc:	08002d80 	.word	0x08002d80
 8002ce0:	08002d80 	.word	0x08002d80
 8002ce4:	08002d84 	.word	0x08002d84

08002ce8 <memset>:
 8002ce8:	0003      	movs	r3, r0
 8002cea:	1812      	adds	r2, r2, r0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <memset+0xa>
 8002cf0:	4770      	bx	lr
 8002cf2:	7019      	strb	r1, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	e7f9      	b.n	8002cec <memset+0x4>

08002cf8 <_init>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr

08002d04 <_fini>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr
