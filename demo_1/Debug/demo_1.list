
demo_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800354c  0800354c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800354c  0800354c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800354c  0800354c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003560  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003560  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb27  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b58  00000000  00000000  0002bb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  0002e358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001476d  00000000  00000000  0002ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ba1  00000000  00000000  0004367d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000839de  00000000  00000000  0004d21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0bfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d48  00000000  00000000  000d0c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080034c4 	.word	0x080034c4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080034c4 	.word	0x080034c4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fac4 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f80e 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f92e 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fc:	f000 f8de 	bl	80005bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000400:	f000 f868 	bl	80004d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);	//abilitazione del timer in modalità interrupt
 8000404:	4b02      	ldr	r3, [pc, #8]	; (8000410 <main+0x24>)
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fc78 	bl	8001cfc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800040c:	e7fe      	b.n	800040c <main+0x20>
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	20000028 	.word	0x20000028

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b099      	sub	sp, #100	; 0x64
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	242c      	movs	r4, #44	; 0x2c
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2334      	movs	r3, #52	; 0x34
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 f845 	bl	80034b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	231c      	movs	r3, #28
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	0018      	movs	r0, r3
 8000430:	2310      	movs	r3, #16
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f003 f83d 	bl	80034b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043a:	003b      	movs	r3, r7
 800043c:	0018      	movs	r0, r3
 800043e:	231c      	movs	r3, #28
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f003 f836 	bl	80034b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fde7 	bl	8001020 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	0052      	lsls	r2, r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2240      	movs	r2, #64	; 0x40
 800046a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	193b      	adds	r3, r7, r4
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fe1f 	bl	80010b8 <HAL_RCC_OscConfig>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800047e:	f000 f96b 	bl	8000758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	211c      	movs	r1, #28
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2207      	movs	r2, #7
 8000488:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2100      	movs	r1, #0
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 f91f 	bl	80016e4 <HAL_RCC_ClockConfig>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004aa:	f000 f955 	bl	8000758 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2202      	movs	r2, #2
 80004b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ba:	003b      	movs	r3, r7
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fabb 	bl	8001a38 <HAL_RCCEx_PeriphCLKConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004c6:	f000 f947 	bl	8000758 <Error_Handler>
  }
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b019      	add	sp, #100	; 0x64
 80004d0:	bd90      	pop	{r4, r7, pc}
	...

080004d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	; 0x50
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	2340      	movs	r3, #64	; 0x40
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	2310      	movs	r3, #16
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 ffe5 	bl	80034b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ea:	2334      	movs	r3, #52	; 0x34
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	230c      	movs	r3, #12
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f002 ffdd 	bl	80034b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004fa:	003b      	movs	r3, r7
 80004fc:	0018      	movs	r0, r3
 80004fe:	2334      	movs	r3, #52	; 0x34
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f002 ffd6 	bl	80034b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_TIM1_Init+0xe0>)
 800050a:	4a2b      	ldr	r2, [pc, #172]	; (80005b8 <MX_TIM1_Init+0xe4>)
 800050c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 800050e:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <MX_TIM1_Init+0xe0>)
 8000510:	22c8      	movs	r2, #200	; 0xc8
 8000512:	0152      	lsls	r2, r2, #5
 8000514:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_TIM1_Init+0xe0>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <MX_TIM1_Init+0xe0>)
 800051e:	22fa      	movs	r2, #250	; 0xfa
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <MX_TIM1_Init+0xe0>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <MX_TIM1_Init+0xe0>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <MX_TIM1_Init+0xe0>)
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <MX_TIM1_Init+0xe0>)
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fbb3 	bl	8001ca4 <HAL_TIM_Base_Init>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000542:	f000 f909 	bl	8000758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0152      	lsls	r2, r2, #5
 800054e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000550:	187a      	adds	r2, r7, r1
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_TIM1_Init+0xe0>)
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fd2c 	bl	8001fb4 <HAL_TIM_ConfigClockSource>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000560:	f000 f8fa 	bl	8000758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2134      	movs	r1, #52	; 0x34
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000578:	187a      	adds	r2, r7, r1
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_TIM1_Init+0xe0>)
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f001 ff12 	bl	80023a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000588:	f000 f8e6 	bl	8000758 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800058c:	003b      	movs	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000592:	003b      	movs	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000598:	003a      	movs	r2, r7
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_TIM1_Init+0xe0>)
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 ff58 	bl	8002454 <HAL_TIMEx_ConfigBreakDeadTime>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80005a8:	f000 f8d6 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b014      	add	sp, #80	; 0x50
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000028 	.word	0x20000028
 80005b8:	40012c00 	.word	0x40012c00

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <MX_USART2_UART_Init+0x98>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005c8:	22e1      	movs	r2, #225	; 0xe1
 80005ca:	0252      	lsls	r2, r2, #9
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	0552      	lsls	r2, r2, #21
 80005d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005e4:	220c      	movs	r2, #12
 80005e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART2_UART_Init+0x94>)
 8000602:	2200      	movs	r2, #0
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_USART2_UART_Init+0x94>)
 8000608:	0018      	movs	r0, r3
 800060a:	f001 ffe1 	bl	80025d0 <HAL_UART_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000612:	f000 f8a1 	bl	8000758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x94>)
 8000618:	2100      	movs	r1, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fe3a 	bl	8003294 <HAL_UARTEx_SetTxFifoThreshold>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000624:	f000 f898 	bl	8000758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x94>)
 800062a:	2100      	movs	r1, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f002 fe71 	bl	8003314 <HAL_UARTEx_SetRxFifoThreshold>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000636:	f000 f88f 	bl	8000758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x94>)
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fdef 	bl	8003220 <HAL_UARTEx_DisableFifoMode>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000646:	f000 f887 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000068 	.word	0x20000068
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	240c      	movs	r4, #12
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 ff23 	bl	80034b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <MX_GPIO_Init+0xf4>)
 8000670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000672:	4b36      	ldr	r3, [pc, #216]	; (800074c <MX_GPIO_Init+0xf4>)
 8000674:	2104      	movs	r1, #4
 8000676:	430a      	orrs	r2, r1
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
 800067a:	4b34      	ldr	r3, [pc, #208]	; (800074c <MX_GPIO_Init+0xf4>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <MX_GPIO_Init+0xf4>)
 8000688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <MX_GPIO_Init+0xf4>)
 800068c:	2120      	movs	r1, #32
 800068e:	430a      	orrs	r2, r1
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <MX_GPIO_Init+0xf4>)
 8000694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000696:	2220      	movs	r2, #32
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <MX_GPIO_Init+0xf4>)
 80006a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_GPIO_Init+0xf4>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_GPIO_Init+0xf4>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LED_GREEN_Pin, GPIO_PIN_RESET);
 80006b6:	23a0      	movs	r3, #160	; 0xa0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	2123      	movs	r1, #35	; 0x23
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fc38 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0192      	lsls	r2, r2, #6
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_GPIO_Init+0xf8>)
 80006d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <MX_GPIO_Init+0xfc>)
 80006dc:	0019      	movs	r1, r3
 80006de:	0010      	movs	r0, r2
 80006e0:	f000 fac4 	bl	8000c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2203      	movs	r2, #3
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	193a      	adds	r2, r7, r4
 80006fe:	23a0      	movs	r3, #160	; 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fab1 	bl	8000c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800070a:	0021      	movs	r1, r4
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2220      	movs	r2, #32
 8000710:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2201      	movs	r2, #1
 8000716:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2202      	movs	r2, #2
 8000722:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000724:	187a      	adds	r2, r7, r1
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fa9d 	bl	8000c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2007      	movs	r0, #7
 8000738:	f000 fa66 	bl	8000c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800073c:	2007      	movs	r0, #7
 800073e:	f000 fa78 	bl	8000c32 <HAL_NVIC_EnableIRQ>

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b009      	add	sp, #36	; 0x24
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40021000 	.word	0x40021000
 8000750:	10110000 	.word	0x10110000
 8000754:	50000800 	.word	0x50000800

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_MspInit+0x4c>)
 800076c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_MspInit+0x4c>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	641a      	str	r2, [r3, #64]	; 0x40
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_MspInit+0x4c>)
 8000784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_MspInit+0x4c>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0549      	lsls	r1, r1, #21
 800078c:	430a      	orrs	r2, r1
 800078e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_MspInit+0x4c>)
 8000792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	055b      	lsls	r3, r3, #21
 8000798:	4013      	ands	r3, r2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800079e:	23c0      	movs	r3, #192	; 0xc0
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 f96e 	bl	8000a84 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d115      	bne.n	80007f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_TIM_Base_MspInit+0x4c>)
 80007c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_TIM_Base_MspInit+0x4c>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0109      	lsls	r1, r1, #4
 80007d0:	430a      	orrs	r2, r1
 80007d2:	641a      	str	r2, [r3, #64]	; 0x40
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_TIM_Base_MspInit+0x4c>)
 80007d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	200d      	movs	r0, #13
 80007e8:	f000 fa0e 	bl	8000c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007ec:	200d      	movs	r0, #13
 80007ee:	f000 fa20 	bl	8000c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40012c00 	.word	0x40012c00
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2314      	movs	r3, #20
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 fe4c 	bl	80034b4 <memset>
  if(huart->Instance==USART2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <HAL_UART_MspInit+0x8c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d130      	bne.n	8000888 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_UART_MspInit+0x90>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800085a:	2114      	movs	r1, #20
 800085c:	187b      	adds	r3, r7, r1
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2202      	movs	r2, #2
 8000866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2201      	movs	r2, #1
 800086c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	187a      	adds	r2, r7, r1
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f9f2 	bl	8000c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b00a      	add	sp, #40	; 0x28
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f8c6 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fb66 	bl	8000fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2102      	movs	r1, #2
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fb45 	bl	8000f6e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x20>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fa2c 	bl	8001d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2101      	movs	r1, #1
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fb35 	bl	8000f6e <HAL_GPIO_TogglePin>

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000028 	.word	0x20000028

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <SystemInit+0x14>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	0512      	lsls	r2, r2, #20
 800091a:	609a      	str	r2, [r3, #8]
#endif
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800092c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800092e:	e003      	b.n	8000938 <LoopCopyDataInit>

08000930 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000932:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000934:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000936:	3104      	adds	r1, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <LoopForever+0xa>)
  ldr r3, =_edata
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <LoopForever+0xe>)
  adds r2, r0, r1
 800093c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000940:	d3f6      	bcc.n	8000930 <CopyDataInit>
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopForever+0x12>)
  b LoopFillZerobss
 8000944:	e002      	b.n	800094c <LoopFillZerobss>

08000946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  str  r3, [r2]
 8000948:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094a:	3204      	adds	r2, #4

0800094c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <LoopForever+0x16>)
  cmp r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000950:	d3f9      	bcc.n	8000946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000952:	f7ff ffdd 	bl	8000910 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000956:	f002 fd89 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fd47 	bl	80003ec <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000964:	08003554 	.word	0x08003554
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800096c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000974:	200000f8 	.word	0x200000f8

08000978 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_IRQHandler>
	...

0800097c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_Init+0x3c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Init+0x3c>)
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	0049      	lsls	r1, r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f810 	bl	80009bc <HAL_InitTick>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d003      	beq.n	80009a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e001      	b.n	80009ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fedc 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_InitTick+0x88>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d02b      	beq.n	8000a2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <HAL_InitTick+0x8c>)
 80009d6:	681c      	ldr	r4, [r3, #0]
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <HAL_InitTick+0x88>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	0019      	movs	r1, r3
 80009de:	23fa      	movs	r3, #250	; 0xfa
 80009e0:	0098      	lsls	r0, r3, #2
 80009e2:	f7ff fb8d 	bl	8000100 <__udivsi3>
 80009e6:	0003      	movs	r3, r0
 80009e8:	0019      	movs	r1, r3
 80009ea:	0020      	movs	r0, r4
 80009ec:	f7ff fb88 	bl	8000100 <__udivsi3>
 80009f0:	0003      	movs	r3, r0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 f92d 	bl	8000c52 <HAL_SYSTICK_Config>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d112      	bne.n	8000a22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d80a      	bhi.n	8000a18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	2301      	movs	r3, #1
 8000a06:	425b      	negs	r3, r3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f8fc 	bl	8000c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_InitTick+0x90>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e00d      	b.n	8000a34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a18:	230f      	movs	r3, #15
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e008      	b.n	8000a34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a22:	230f      	movs	r3, #15
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e003      	b.n	8000a34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	781b      	ldrb	r3, [r3, #0]
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b005      	add	sp, #20
 8000a40:	bd90      	pop	{r4, r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <HAL_IncTick+0x18>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	18d2      	adds	r2, r2, r3
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_IncTick+0x18>)
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000f4 	.word	0x200000f4
 8000a6c:	20000008 	.word	0x20000008

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <HAL_GetTick+0x10>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	200000f4 	.word	0x200000f4

08000a84 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000a92:	4013      	ands	r3, r2
 8000a94:	0019      	movs	r1, r3
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	fffff9ff 	.word	0xfffff9ff

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac2:	d809      	bhi.n	8000ad8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	231f      	movs	r3, #31
 8000acc:	401a      	ands	r2, r3
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_EnableIRQ+0x30>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	000a      	movs	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
  }
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	0002      	movs	r2, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b7f      	cmp	r3, #127	; 0x7f
 8000af8:	d828      	bhi.n	8000b4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afa:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <__NVIC_SetPriority+0xd4>)
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	33c0      	adds	r3, #192	; 0xc0
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	589b      	ldr	r3, [r3, r2]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <__NVIC_SetPriority+0xd4>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	430a      	orrs	r2, r1
 8000b44:	33c0      	adds	r3, #192	; 0xc0
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b4a:	e031      	b.n	8000bb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <__NVIC_SetPriority+0xd8>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0019      	movs	r1, r3
 8000b54:	230f      	movs	r3, #15
 8000b56:	400b      	ands	r3, r1
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3306      	adds	r3, #6
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	18d3      	adds	r3, r2, r3
 8000b62:	3304      	adds	r3, #4
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1dfa      	adds	r2, r7, #7
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	400a      	ands	r2, r1
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	21ff      	movs	r1, #255	; 0xff
 8000b74:	4091      	lsls	r1, r2
 8000b76:	000a      	movs	r2, r1
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	019b      	lsls	r3, r3, #6
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	401a      	ands	r2, r3
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	4003      	ands	r3, r0
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <__NVIC_SetPriority+0xd8>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001c      	movs	r4, r3
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	4023      	ands	r3, r4
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	3306      	adds	r3, #6
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	18c3      	adds	r3, r0, r3
 8000bac:	3304      	adds	r3, #4
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b003      	add	sp, #12
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <SysTick_Config+0x40>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d901      	bls.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e010      	b.n	8000bf8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <SysTick_Config+0x44>)
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	3a01      	subs	r2, #1
 8000bdc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	2301      	movs	r3, #1
 8000be0:	425b      	negs	r3, r3
 8000be2:	2103      	movs	r1, #3
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff ff7d 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SysTick_Config+0x44>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x44>)
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	00ffffff 	.word	0x00ffffff
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	210f      	movs	r1, #15
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	1c02      	adds	r2, r0, #0
 8000c18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b004      	add	sp, #16
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	0002      	movs	r2, r0
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ff33 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ffaf 	bl	8000bc0 <SysTick_Config>
 8000c62:	0003      	movs	r3, r0
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e147      	b.n	8000f0c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d100      	bne.n	8000c94 <HAL_GPIO_Init+0x28>
 8000c92:	e138      	b.n	8000f06 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x38>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b12      	cmp	r3, #18
 8000ca2:	d123      	bne.n	8000cec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	58d3      	ldr	r3, [r2, r3]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	43da      	mvns	r2, r3
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	2107      	movs	r1, #7
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	6939      	ldr	r1, [r7, #16]
 8000cea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	0013      	movs	r3, r2
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d00b      	beq.n	8000d40 <HAL_GPIO_Init+0xd4>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d34:	2b11      	cmp	r3, #17
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b12      	cmp	r3, #18
 8000d3e:	d130      	bne.n	8000da2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	055b      	lsls	r3, r3, #21
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d100      	bne.n	8000de0 <HAL_GPIO_Init+0x174>
 8000dde:	e092      	b.n	8000f06 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000de0:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3318      	adds	r3, #24
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	589b      	ldr	r3, [r3, r2]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2203      	movs	r2, #3
 8000df2:	4013      	ands	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	220f      	movs	r2, #15
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0x1ca>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <HAL_GPIO_Init+0x2bc>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00d      	beq.n	8000e32 <HAL_GPIO_Init+0x1c6>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <HAL_GPIO_Init+0x2c0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x1c2>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <HAL_GPIO_Init+0x2c4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x1be>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x1cc>
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x1cc>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x1cc>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x1cc>
 8000e36:	2300      	movs	r3, #0
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	00d2      	lsls	r2, r2, #3
 8000e40:	4093      	lsls	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e48:	4936      	ldr	r1, [pc, #216]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3318      	adds	r3, #24
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	58d3      	ldr	r3, [r2, r3]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	025b      	lsls	r3, r3, #9
 8000e70:	4013      	ands	r3, r2
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e7c:	4929      	ldr	r1, [pc, #164]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000e84:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000e86:	2384      	movs	r3, #132	; 0x84
 8000e88:	58d3      	ldr	r3, [r2, r3]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eaa:	491e      	ldr	r1, [pc, #120]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000eac:	2284      	movs	r2, #132	; 0x84
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	035b      	lsls	r3, r3, #13
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	039b      	lsls	r3, r3, #14
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_GPIO_Init+0x2b8>)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	40da      	lsrs	r2, r3
 8000f14:	1e13      	subs	r3, r2, #0
 8000f16:	d000      	beq.n	8000f1a <HAL_GPIO_Init+0x2ae>
 8000f18:	e6b0      	b.n	8000c7c <HAL_GPIO_Init+0x10>
  }
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b006      	add	sp, #24
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40021800 	.word	0x40021800
 8000f28:	50000400 	.word	0x50000400
 8000f2c:	50000800 	.word	0x50000800
 8000f30:	50000c00 	.word	0x50000c00

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	0011      	movs	r1, r2
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	1c02      	adds	r2, r0, #0
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	1c7b      	adds	r3, r7, #1
 8000f48:	1c0a      	adds	r2, r1, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4c:	1c7b      	adds	r3, r7, #1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5e:	1cbb      	adds	r3, r7, #2
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	000a      	movs	r2, r1
 8000f78:	1cbb      	adds	r3, r7, #2
 8000f7a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	1cba      	adds	r2, r7, #2
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	4013      	ands	r3, r2
 8000f86:	d004      	beq.n	8000f92 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f88:	1cbb      	adds	r3, r7, #2
 8000f8a:	881a      	ldrh	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000f90:	e003      	b.n	8000f9a <HAL_GPIO_TogglePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f92:	1cbb      	adds	r3, r7, #2
 8000f94:	881a      	ldrh	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	619a      	str	r2, [r3, #24]
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	0002      	movs	r2, r0
 8000fac:	1dbb      	adds	r3, r7, #6
 8000fae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	1dba      	adds	r2, r7, #6
 8000fb6:	8812      	ldrh	r2, [r2, #0]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d008      	beq.n	8000fce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fbe:	1dba      	adds	r2, r7, #6
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 f815 	bl	8000ff8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	1dba      	adds	r2, r7, #6
 8000fd4:	8812      	ldrh	r2, [r2, #0]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d008      	beq.n	8000fec <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fdc:	1dba      	adds	r2, r7, #6
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000fe2:	1dbb      	adds	r3, r7, #6
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 f810 	bl	800100c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021800 	.word	0x40021800

08000ff8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	0002      	movs	r2, r0
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	0002      	movs	r2, r0
 8001014:	1dbb      	adds	r3, r7, #6
 8001016:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800102e:	4013      	ands	r3, r2
 8001030:	0019      	movs	r1, r3
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	429a      	cmp	r2, r3
 8001042:	d11f      	bne.n	8001084 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	0013      	movs	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	189b      	adds	r3, r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4912      	ldr	r1, [pc, #72]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff f854 	bl	8000100 <__udivsi3>
 8001058:	0003      	movs	r3, r0
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105e:	e008      	b.n	8001072 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3b01      	subs	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e001      	b.n	8001072 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e009      	b.n	8001086 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	401a      	ands	r2, r3
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	429a      	cmp	r2, r3
 8001082:	d0ed      	beq.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40007000 	.word	0x40007000
 8001094:	fffff9ff 	.word	0xfffff9ff
 8001098:	20000000 	.word	0x20000000
 800109c:	000f4240 	.word	0x000f4240

080010a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	23e0      	movs	r3, #224	; 0xe0
 80010aa:	01db      	lsls	r3, r3, #7
 80010ac:	4013      	ands	r3, r2
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e2f9      	b.n	80016be <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2201      	movs	r2, #1
 80010d0:	4013      	ands	r3, r2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_OscConfig+0x1e>
 80010d4:	e07c      	b.n	80011d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d6:	4bc3      	ldr	r3, [pc, #780]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2238      	movs	r2, #56	; 0x38
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e0:	4bc0      	ldr	r3, [pc, #768]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2203      	movs	r2, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b10      	cmp	r3, #16
 80010ee:	d102      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3e>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d002      	beq.n	80010fc <HAL_RCC_OscConfig+0x44>
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d10b      	bne.n	8001114 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	4bb9      	ldr	r3, [pc, #740]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	d062      	beq.n	80011ce <HAL_RCC_OscConfig+0x116>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d15e      	bne.n	80011ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e2d4      	b.n	80016be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	429a      	cmp	r2, r3
 800111e:	d107      	bne.n	8001130 <HAL_RCC_OscConfig+0x78>
 8001120:	4bb0      	ldr	r3, [pc, #704]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4baf      	ldr	r3, [pc, #700]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	0249      	lsls	r1, r1, #9
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e020      	b.n	8001172 <HAL_RCC_OscConfig+0xba>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	23a0      	movs	r3, #160	; 0xa0
 8001136:	02db      	lsls	r3, r3, #11
 8001138:	429a      	cmp	r2, r3
 800113a:	d10e      	bne.n	800115a <HAL_RCC_OscConfig+0xa2>
 800113c:	4ba9      	ldr	r3, [pc, #676]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4ba8      	ldr	r3, [pc, #672]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	02c9      	lsls	r1, r1, #11
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	4ba6      	ldr	r3, [pc, #664]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4ba5      	ldr	r3, [pc, #660]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0249      	lsls	r1, r1, #9
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e00b      	b.n	8001172 <HAL_RCC_OscConfig+0xba>
 800115a:	4ba2      	ldr	r3, [pc, #648]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4ba1      	ldr	r3, [pc, #644]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001160:	49a1      	ldr	r1, [pc, #644]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001162:	400a      	ands	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	4b9f      	ldr	r3, [pc, #636]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b9e      	ldr	r3, [pc, #632]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800116c:	499f      	ldr	r1, [pc, #636]	; (80013ec <HAL_RCC_OscConfig+0x334>)
 800116e:	400a      	ands	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d014      	beq.n	80011a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff fc79 	bl	8000a70 <HAL_GetTick>
 800117e:	0003      	movs	r3, r0
 8001180:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fc74 	bl	8000a70 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e293      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001196:	4b93      	ldr	r3, [pc, #588]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	029b      	lsls	r3, r3, #10
 800119e:	4013      	ands	r3, r2
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xcc>
 80011a2:	e015      	b.n	80011d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc64 	bl	8000a70 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ae:	f7ff fc5f 	bl	8000a70 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b64      	cmp	r3, #100	; 0x64
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e27e      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c0:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	029b      	lsls	r3, r3, #10
 80011c8:	4013      	ands	r3, r2
 80011ca:	d1f0      	bne.n	80011ae <HAL_RCC_OscConfig+0xf6>
 80011cc:	e000      	b.n	80011d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2202      	movs	r2, #2
 80011d6:	4013      	ands	r3, r2
 80011d8:	d100      	bne.n	80011dc <HAL_RCC_OscConfig+0x124>
 80011da:	e099      	b.n	8001310 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011dc:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2238      	movs	r2, #56	; 0x38
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2203      	movs	r2, #3
 80011ec:	4013      	ands	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d102      	bne.n	80011fc <HAL_RCC_OscConfig+0x144>
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d002      	beq.n	8001202 <HAL_RCC_OscConfig+0x14a>
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d135      	bne.n	800126e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001202:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4013      	ands	r3, r2
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x162>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e251      	b.n	80016be <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a74      	ldr	r2, [pc, #464]	; (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001220:	4013      	ands	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800122c:	430a      	orrs	r2, r1
 800122e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001236:	4b6b      	ldr	r3, [pc, #428]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6e      	ldr	r2, [pc, #440]	; (80013f4 <HAL_RCC_OscConfig+0x33c>)
 800123c:	4013      	ands	r3, r2
 800123e:	0019      	movs	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800124a:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	0adb      	lsrs	r3, r3, #11
 8001250:	2207      	movs	r2, #7
 8001252:	4013      	ands	r3, r2
 8001254:	4a68      	ldr	r2, [pc, #416]	; (80013f8 <HAL_RCC_OscConfig+0x340>)
 8001256:	40da      	lsrs	r2, r3
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x344>)
 800125a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800125c:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x348>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fbab 	bl	80009bc <HAL_InitTick>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d051      	beq.n	800130e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e227      	b.n	80016be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d030      	beq.n	80012d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001276:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <HAL_RCC_OscConfig+0x33c>)
 800127c:	4013      	ands	r3, r2
 800127e:	0019      	movs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800128a:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0049      	lsls	r1, r1, #1
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fbea 	bl	8000a70 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fbe5 	bl	8000a70 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e204      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b4:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4013      	ands	r3, r2
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	021a      	lsls	r2, r3, #8
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	e01b      	b.n	8001310 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012d8:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80012de:	4949      	ldr	r1, [pc, #292]	; (8001404 <HAL_RCC_OscConfig+0x34c>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fbc4 	bl	8000a70 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fbbf 	bl	8000a70 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1de      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4013      	ands	r3, r2
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x236>
 800130c:	e000      	b.n	8001310 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2208      	movs	r2, #8
 8001316:	4013      	ands	r3, r2
 8001318:	d047      	beq.n	80013aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2238      	movs	r2, #56	; 0x38
 8001320:	4013      	ands	r3, r2
 8001322:	2b18      	cmp	r3, #24
 8001324:	d10a      	bne.n	800133c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d03c      	beq.n	80013aa <HAL_RCC_OscConfig+0x2f2>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d138      	bne.n	80013aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e1c0      	b.n	80016be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 8001346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800134a:	2101      	movs	r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb8e 	bl	8000a70 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff fb89 	bl	8000a70 <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e1a8      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d0f1      	beq.n	800135a <HAL_RCC_OscConfig+0x2a2>
 8001376:	e018      	b.n	80013aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800137a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 800137e:	2101      	movs	r1, #1
 8001380:	438a      	bics	r2, r1
 8001382:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fb74 	bl	8000a70 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fb6f 	bl	8000a70 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e18e      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f1      	bne.n	800138e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2204      	movs	r2, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x2fe>
 80013b4:	e0c6      	b.n	8001544 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	231f      	movs	r3, #31
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2238      	movs	r2, #56	; 0x38
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d11e      	bne.n	8001408 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d100      	bne.n	80013d6 <HAL_RCC_OscConfig+0x31e>
 80013d4:	e0b6      	b.n	8001544 <HAL_RCC_OscConfig+0x48c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d000      	beq.n	80013e0 <HAL_RCC_OscConfig+0x328>
 80013de:	e0b1      	b.n	8001544 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e16c      	b.n	80016be <HAL_RCC_OscConfig+0x606>
 80013e4:	40021000 	.word	0x40021000
 80013e8:	fffeffff 	.word	0xfffeffff
 80013ec:	fffbffff 	.word	0xfffbffff
 80013f0:	ffff80ff 	.word	0xffff80ff
 80013f4:	ffffc7ff 	.word	0xffffc7ff
 80013f8:	00f42400 	.word	0x00f42400
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004
 8001404:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001408:	4baf      	ldr	r3, [pc, #700]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800140a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	055b      	lsls	r3, r3, #21
 8001410:	4013      	ands	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x360>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x362>
 8001418:	2300      	movs	r3, #0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d011      	beq.n	8001442 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4baa      	ldr	r3, [pc, #680]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001422:	4ba9      	ldr	r3, [pc, #676]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0549      	lsls	r1, r1, #21
 8001428:	430a      	orrs	r2, r1
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
 800142c:	4ba6      	ldr	r3, [pc, #664]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800142e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	055b      	lsls	r3, r3, #21
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800143a:	231f      	movs	r3, #31
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001442:	4ba2      	ldr	r3, [pc, #648]	; (80016cc <HAL_RCC_OscConfig+0x614>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4013      	ands	r3, r2
 800144c:	d11a      	bne.n	8001484 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800144e:	4b9f      	ldr	r3, [pc, #636]	; (80016cc <HAL_RCC_OscConfig+0x614>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b9e      	ldr	r3, [pc, #632]	; (80016cc <HAL_RCC_OscConfig+0x614>)
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0049      	lsls	r1, r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb08 	bl	8000a70 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff fb03 	bl	8000a70 <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e122      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001478:	4b94      	ldr	r3, [pc, #592]	; (80016cc <HAL_RCC_OscConfig+0x614>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4013      	ands	r3, r2
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x3e2>
 800148c:	4b8e      	ldr	r3, [pc, #568]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800148e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001490:	4b8d      	ldr	r3, [pc, #564]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	65da      	str	r2, [r3, #92]	; 0x5c
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x41c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x404>
 80014a2:	4b89      	ldr	r3, [pc, #548]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014a8:	2104      	movs	r1, #4
 80014aa:	430a      	orrs	r2, r1
 80014ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ae:	4b86      	ldr	r3, [pc, #536]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014b2:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	430a      	orrs	r2, r1
 80014b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x41c>
 80014bc:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014c0:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80014c8:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014cc:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014ce:	2104      	movs	r1, #4
 80014d0:	438a      	bics	r2, r1
 80014d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d014      	beq.n	8001506 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fac8 	bl	8000a70 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e4:	e009      	b.n	80014fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fac3 	bl	8000a70 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a77      	ldr	r2, [pc, #476]	; (80016d0 <HAL_RCC_OscConfig+0x618>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e0e1      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fa:	4b73      	ldr	r3, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x42e>
 8001504:	e013      	b.n	800152e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001506:	f7ff fab3 	bl	8000a70 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150e:	e009      	b.n	8001524 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff faae 	bl	8000a70 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	4a6d      	ldr	r2, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x618>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0cc      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001524:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	2202      	movs	r2, #2
 800152a:	4013      	ands	r3, r2
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800152e:	231f      	movs	r3, #31
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800153a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800153c:	4b62      	ldr	r3, [pc, #392]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800153e:	4965      	ldr	r1, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x61c>)
 8001540:	400a      	ands	r2, r1
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x496>
 800154c:	e0b6      	b.n	80016bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800154e:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2238      	movs	r2, #56	; 0x38
 8001554:	4013      	ands	r3, r2
 8001556:	2b10      	cmp	r3, #16
 8001558:	d100      	bne.n	800155c <HAL_RCC_OscConfig+0x4a4>
 800155a:	e07e      	b.n	800165a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d153      	bne.n	800160c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800156a:	495b      	ldr	r1, [pc, #364]	; (80016d8 <HAL_RCC_OscConfig+0x620>)
 800156c:	400a      	ands	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fa7e 	bl	8000a70 <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff fa79 	bl	8000a70 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e098      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158c:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	049b      	lsls	r3, r3, #18
 8001594:	4013      	ands	r3, r2
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001598:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <HAL_RCC_OscConfig+0x624>)
 800159e:	4013      	ands	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1a      	ldr	r2, [r3, #32]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	431a      	orrs	r2, r3
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c6:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0449      	lsls	r1, r1, #17
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015d4:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	0549      	lsls	r1, r1, #21
 80015de:	430a      	orrs	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa45 	bl	8000a70 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fa40 	bl	8000a70 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e05f      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	049b      	lsls	r3, r3, #18
 8001606:	4013      	ands	r3, r2
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x534>
 800160a:	e057      	b.n	80016bc <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001612:	4931      	ldr	r1, [pc, #196]	; (80016d8 <HAL_RCC_OscConfig+0x620>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800161e:	2103      	movs	r1, #3
 8001620:	438a      	bics	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800162a:	492d      	ldr	r1, [pc, #180]	; (80016e0 <HAL_RCC_OscConfig+0x628>)
 800162c:	400a      	ands	r2, r1
 800162e:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fa1e 	bl	8000a70 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fa19 	bl	8000a70 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e038      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	049b      	lsls	r3, r3, #18
 8001654:	4013      	ands	r3, r2
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x582>
 8001658:	e030      	b.n	80016bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e02b      	b.n	80016be <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_RCC_OscConfig+0x610>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2203      	movs	r2, #3
 8001670:	401a      	ands	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	429a      	cmp	r2, r3
 8001678:	d11e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2270      	movs	r2, #112	; 0x70
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d117      	bne.n	80016b8 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	23fe      	movs	r3, #254	; 0xfe
 800168c:	01db      	lsls	r3, r3, #7
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	23f8      	movs	r3, #248	; 0xf8
 800169e:	039b      	lsls	r3, r3, #14
 80016a0:	401a      	ands	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d106      	bne.n	80016b8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	0f5b      	lsrs	r3, r3, #29
 80016ae:	075a      	lsls	r2, r3, #29
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b008      	add	sp, #32
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40007000 	.word	0x40007000
 80016d0:	00001388 	.word	0x00001388
 80016d4:	efffffff 	.word	0xefffffff
 80016d8:	feffffff 	.word	0xfeffffff
 80016dc:	1fc1808c 	.word	0x1fc1808c
 80016e0:	effeffff 	.word	0xeffeffff

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0e9      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2207      	movs	r2, #7
 80016fe:	4013      	ands	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d91e      	bls.n	8001744 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2207      	movs	r2, #7
 800170c:	4393      	bics	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	4b70      	ldr	r3, [pc, #448]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001718:	f7ff f9aa 	bl	8000a70 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001720:	e009      	b.n	8001736 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f9a5 	bl	8000a70 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a6a      	ldr	r2, [pc, #424]	; (80018d8 <HAL_RCC_ClockConfig+0x1f4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0ca      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2207      	movs	r2, #7
 800173c:	4013      	ands	r3, r2
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d015      	beq.n	800177a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2204      	movs	r2, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d006      	beq.n	8001766 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001758:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	21e0      	movs	r1, #224	; 0xe0
 8001760:	01c9      	lsls	r1, r1, #7
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001766:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4a5d      	ldr	r2, [pc, #372]	; (80018e0 <HAL_RCC_ClockConfig+0x1fc>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d057      	beq.n	8001834 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d107      	bne.n	800179c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d12b      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e097      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a4:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	049b      	lsls	r3, r3, #18
 80017ac:	4013      	ands	r3, r2
 80017ae:	d11f      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e08b      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4013      	ands	r3, r2
 80017c6:	d113      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e07f      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d4:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d108      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e074      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e06d      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2207      	movs	r2, #7
 80017f6:	4393      	bics	r3, r2
 80017f8:	0019      	movs	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001804:	f7ff f934 	bl	8000a70 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180c:	e009      	b.n	8001822 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180e:	f7ff f92f 	bl	8000a70 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <HAL_RCC_ClockConfig+0x1f4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e054      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2238      	movs	r2, #56	; 0x38
 8001828:	401a      	ands	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	429a      	cmp	r2, r3
 8001832:	d1ec      	bne.n	800180e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2207      	movs	r2, #7
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d21e      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2207      	movs	r2, #7
 8001848:	4393      	bics	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001854:	f7ff f90c 	bl	8000a70 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800185c:	e009      	b.n	8001872 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7ff f907 	bl	8000a70 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_RCC_ClockConfig+0x1f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e02c      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2207      	movs	r2, #7
 8001878:	4013      	ands	r3, r2
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2204      	movs	r2, #4
 8001886:	4013      	ands	r3, r2
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <HAL_RCC_ClockConfig+0x200>)
 8001890:	4013      	ands	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800189e:	f000 f829 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018a2:	0001      	movs	r1, r0
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_RCC_ClockConfig+0x1f8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	220f      	movs	r2, #15
 80018ac:	401a      	ands	r2, r3
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x204>)
 80018b0:	0092      	lsls	r2, r2, #2
 80018b2:	58d3      	ldr	r3, [r2, r3]
 80018b4:	221f      	movs	r2, #31
 80018b6:	4013      	ands	r3, r2
 80018b8:	000a      	movs	r2, r1
 80018ba:	40da      	lsrs	r2, r3
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x208>)
 80018be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x20c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff f879 	bl	80009bc <HAL_InitTick>
 80018ca:	0003      	movs	r3, r0
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b004      	add	sp, #16
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40022000 	.word	0x40022000
 80018d8:	00001388 	.word	0x00001388
 80018dc:	40021000 	.word	0x40021000
 80018e0:	fffff0ff 	.word	0xfffff0ff
 80018e4:	ffff8fff 	.word	0xffff8fff
 80018e8:	080034ec 	.word	0x080034ec
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2238      	movs	r2, #56	; 0x38
 8001900:	4013      	ands	r3, r2
 8001902:	d10f      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0adb      	lsrs	r3, r3, #11
 800190a:	2207      	movs	r2, #7
 800190c:	4013      	ands	r3, r2
 800190e:	2201      	movs	r2, #1
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	4835      	ldr	r0, [pc, #212]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800191a:	f7fe fbf1 	bl	8000100 <__udivsi3>
 800191e:	0003      	movs	r3, r0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	e05d      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2238      	movs	r2, #56	; 0x38
 800192a:	4013      	ands	r3, r2
 800192c:	2b08      	cmp	r3, #8
 800192e:	d102      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	e054      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2238      	movs	r2, #56	; 0x38
 800193c:	4013      	ands	r3, r2
 800193e:	2b10      	cmp	r3, #16
 8001940:	d138      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2203      	movs	r2, #3
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	2207      	movs	r2, #7
 8001954:	4013      	ands	r3, r2
 8001956:	3301      	adds	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d10d      	bne.n	800197c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	4824      	ldr	r0, [pc, #144]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001964:	f7fe fbcc 	bl	8000100 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	0019      	movs	r1, r3
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	227f      	movs	r2, #127	; 0x7f
 8001974:	4013      	ands	r3, r2
 8001976:	434b      	muls	r3, r1
 8001978:	617b      	str	r3, [r7, #20]
        break;
 800197a:	e00d      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	481c      	ldr	r0, [pc, #112]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001980:	f7fe fbbe 	bl	8000100 <__udivsi3>
 8001984:	0003      	movs	r3, r0
 8001986:	0019      	movs	r1, r3
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	227f      	movs	r2, #127	; 0x7f
 8001990:	4013      	ands	r3, r2
 8001992:	434b      	muls	r3, r1
 8001994:	617b      	str	r3, [r7, #20]
        break;
 8001996:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0f5b      	lsrs	r3, r3, #29
 800199e:	2207      	movs	r2, #7
 80019a0:	4013      	ands	r3, r2
 80019a2:	3301      	adds	r3, #1
 80019a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	6978      	ldr	r0, [r7, #20]
 80019aa:	f7fe fba9 	bl	8000100 <__udivsi3>
 80019ae:	0003      	movs	r3, r0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e015      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2238      	movs	r2, #56	; 0x38
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d103      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2238      	movs	r2, #56	; 0x38
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b18      	cmp	r3, #24
 80019d2:	d103      	bne.n	80019dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019d4:	23fa      	movs	r3, #250	; 0xfa
 80019d6:	01db      	lsls	r3, r3, #7
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e001      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019e0:	693b      	ldr	r3, [r7, #16]
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b006      	add	sp, #24
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40021000 	.word	0x40021000
 80019f0:	00f42400 	.word	0x00f42400
 80019f4:	007a1200 	.word	0x007a1200

080019f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a10:	f7ff fff2 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a14:	0004      	movs	r4, r0
 8001a16:	f7ff fb43 	bl	80010a0 <LL_RCC_GetAPB1Prescaler>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	0b1a      	lsrs	r2, r3, #12
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	58d3      	ldr	r3, [r2, r3]
 8001a24:	221f      	movs	r2, #31
 8001a26:	4013      	ands	r3, r2
 8001a28:	40dc      	lsrs	r4, r3
 8001a2a:	0023      	movs	r3, r4
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bdb0      	pop	{r4, r5, r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	0800352c 	.word	0x0800352c

08001a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a40:	2313      	movs	r3, #19
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a48:	2312      	movs	r3, #18
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a5c:	e0a4      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2311      	movs	r3, #17
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a66:	4b87      	ldr	r3, [pc, #540]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	055b      	lsls	r3, r3, #21
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d111      	bne.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b84      	ldr	r3, [pc, #528]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a76:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	0549      	lsls	r1, r1, #21
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a80:	4b80      	ldr	r3, [pc, #512]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	055b      	lsls	r3, r3, #21
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8e:	2311      	movs	r3, #17
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a96:	4b7c      	ldr	r3, [pc, #496]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0049      	lsls	r1, r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001aa4:	f7fe ffe4 	bl	8000a70 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aac:	e00b      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7fe ffdf 	bl	8000a70 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d904      	bls.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001abc:	2313      	movs	r3, #19
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	701a      	strb	r2, [r3, #0]
        break;
 8001ac4:	e005      	b.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac6:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d0ed      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001ad2:	2313      	movs	r3, #19
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d154      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001adc:	4b69      	ldr	r3, [pc, #420]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae0:	23c0      	movs	r3, #192	; 0xc0
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d019      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d014      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001af8:	4b62      	ldr	r3, [pc, #392]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	4a63      	ldr	r2, [pc, #396]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b02:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b06:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0249      	lsls	r1, r1, #9
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b10:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b14:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b16:	495e      	ldr	r1, [pc, #376]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	d016      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ffa1 	bl	8000a70 <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b32:	e00c      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7fe ff9c 	bl	8000a70 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d904      	bls.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001b44:	2313      	movs	r3, #19
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2203      	movs	r2, #3
 8001b4a:	701a      	strb	r2, [r3, #0]
            break;
 8001b4c:	e004      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d0ed      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001b58:	2313      	movs	r3, #19
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b62:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b76:	e00c      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2213      	movs	r2, #19
 8001b7e:	18ba      	adds	r2, r7, r2
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e005      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b86:	2312      	movs	r3, #18
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2213      	movs	r2, #19
 8001b8c:	18ba      	adds	r2, r7, r2
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b92:	2311      	movs	r3, #17
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ba2:	493d      	ldr	r1, [pc, #244]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	4393      	bics	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2240      	movs	r2, #64	; 0x40
 8001bea:	4013      	ands	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	0899      	lsrs	r1, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	0249      	lsls	r1, r1, #9
 8001c36:	430a      	orrs	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d016      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d106      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0249      	lsls	r1, r1, #9
 8001c70:	430a      	orrs	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001c74:	2312      	movs	r3, #18
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	fffffcff 	.word	0xfffffcff
 8001c90:	fffeffff 	.word	0xfffeffff
 8001c94:	00001388 	.word	0x00001388
 8001c98:	efffffff 	.word	0xefffffff
 8001c9c:	ffffcfff 	.word	0xffffcfff
 8001ca0:	ffff3fff 	.word	0xffff3fff

08001ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e01e      	b.n	8001cf4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223d      	movs	r2, #61	; 0x3d
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	223c      	movs	r2, #60	; 0x3c
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7fe fd71 	bl	80007b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223d      	movs	r2, #61	; 0x3d
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	0010      	movs	r0, r2
 8001ce6:	f000 fa4d 	bl	8002184 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	223d      	movs	r2, #61	; 0x3d
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_TIM_Base_Start_IT+0x50>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d00c      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x44>
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d007      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b004      	add	sp, #16
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	00010007 	.word	0x00010007

08001d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d124      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d11d      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	4252      	negs	r2, r2
 8001d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 f9de 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e007      	b.n	8001daa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 f9d1 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 f9dd 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2204      	movs	r2, #4
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d125      	bne.n	8001e0a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d11e      	bne.n	8001e0a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f9b1 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8001df2:	e007      	b.n	8001e04 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f9a4 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 f9b0 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2208      	movs	r2, #8
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d124      	bne.n	8001e62 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2208      	movs	r2, #8
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11d      	bne.n	8001e62 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2209      	movs	r2, #9
 8001e2c:	4252      	negs	r2, r2
 8001e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2204      	movs	r2, #4
 8001e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f985 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8001e4a:	e007      	b.n	8001e5c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f978 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 f984 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2210      	movs	r2, #16
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d125      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2210      	movs	r2, #16
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d11e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2211      	movs	r2, #17
 8001e84:	4252      	negs	r2, r2
 8001e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d004      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 f958 	bl	8002154 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e007      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 f94b 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f957 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10f      	bne.n	8001eea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2202      	movs	r2, #2
 8001ede:	4252      	negs	r2, r2
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 f925 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d10f      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d108      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2281      	movs	r2, #129	; 0x81
 8001f0c:	4252      	negs	r2, r2
 8001f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 fb4c 	bl	80025b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	401a      	ands	r2, r3
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d10e      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d107      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_TIM_IRQHandler+0x260>)
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fb3b 	bl	80025c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d10f      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b40      	cmp	r3, #64	; 0x40
 8001f64:	d108      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2241      	movs	r2, #65	; 0x41
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 f8fe 	bl	8002174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d10f      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d108      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2221      	movs	r2, #33	; 0x21
 8001f9a:	4252      	negs	r2, r2
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 fafd 	bl	80025a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	fffffeff 	.word	0xfffffeff

08001fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223c      	movs	r2, #60	; 0x3c
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_TIM_ConfigClockSource+0x18>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0ab      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x170>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	223c      	movs	r2, #60	; 0x3c
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	223d      	movs	r2, #61	; 0x3d
 8001fd8:	2102      	movs	r1, #2
 8001fda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_TIM_ConfigClockSource+0x178>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a50      	ldr	r2, [pc, #320]	; (8002130 <HAL_TIM_ConfigClockSource+0x17c>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b40      	cmp	r3, #64	; 0x40
 8002002:	d100      	bne.n	8002006 <HAL_TIM_ConfigClockSource+0x52>
 8002004:	e06b      	b.n	80020de <HAL_TIM_ConfigClockSource+0x12a>
 8002006:	d80e      	bhi.n	8002026 <HAL_TIM_ConfigClockSource+0x72>
 8002008:	2b10      	cmp	r3, #16
 800200a:	d100      	bne.n	800200e <HAL_TIM_ConfigClockSource+0x5a>
 800200c:	e077      	b.n	80020fe <HAL_TIM_ConfigClockSource+0x14a>
 800200e:	d803      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x64>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <HAL_TIM_ConfigClockSource+0x62>
 8002014:	e073      	b.n	80020fe <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002016:	e07c      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002018:	2b20      	cmp	r3, #32
 800201a:	d100      	bne.n	800201e <HAL_TIM_ConfigClockSource+0x6a>
 800201c:	e06f      	b.n	80020fe <HAL_TIM_ConfigClockSource+0x14a>
 800201e:	2b30      	cmp	r3, #48	; 0x30
 8002020:	d100      	bne.n	8002024 <HAL_TIM_ConfigClockSource+0x70>
 8002022:	e06c      	b.n	80020fe <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002024:	e075      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002026:	2b70      	cmp	r3, #112	; 0x70
 8002028:	d00e      	beq.n	8002048 <HAL_TIM_ConfigClockSource+0x94>
 800202a:	d804      	bhi.n	8002036 <HAL_TIM_ConfigClockSource+0x82>
 800202c:	2b50      	cmp	r3, #80	; 0x50
 800202e:	d036      	beq.n	800209e <HAL_TIM_ConfigClockSource+0xea>
 8002030:	2b60      	cmp	r3, #96	; 0x60
 8002032:	d044      	beq.n	80020be <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002034:	e06d      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	0152      	lsls	r2, r2, #5
 800203a:	4293      	cmp	r3, r2
 800203c:	d068      	beq.n	8002110 <HAL_TIM_ConfigClockSource+0x15c>
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	0192      	lsls	r2, r2, #6
 8002042:	4293      	cmp	r3, r2
 8002044:	d017      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002046:	e064      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6899      	ldr	r1, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f000 f986 	bl	8002368 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2277      	movs	r2, #119	; 0x77
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]
      break;
 8002074:	e04d      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f000 f96f 	bl	8002368 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	01c9      	lsls	r1, r1, #7
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
      break;
 800209c:	e039      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	001a      	movs	r2, r3
 80020ac:	f000 f8e0 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2150      	movs	r1, #80	; 0x50
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 f93a 	bl	8002330 <TIM_ITRx_SetConfig>
      break;
 80020bc:	e029      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	001a      	movs	r2, r3
 80020cc:	f000 f8fe 	bl	80022cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2160      	movs	r1, #96	; 0x60
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f92a 	bl	8002330 <TIM_ITRx_SetConfig>
      break;
 80020dc:	e019      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	001a      	movs	r2, r3
 80020ec:	f000 f8c0 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2140      	movs	r1, #64	; 0x40
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f91a 	bl	8002330 <TIM_ITRx_SetConfig>
      break;
 80020fc:	e009      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0019      	movs	r1, r3
 8002108:	0010      	movs	r0, r2
 800210a:	f000 f911 	bl	8002330 <TIM_ITRx_SetConfig>
      break;
 800210e:	e000      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002110:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	223d      	movs	r2, #61	; 0x3d
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	223c      	movs	r2, #60	; 0x3c
 800211e:	2100      	movs	r1, #0
 8002120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b004      	add	sp, #16
 800212a:	bd80      	pop	{r7, pc}
 800212c:	ffceff88 	.word	0xffceff88
 8002130:	ffff00ff 	.word	0xffff00ff

08002134 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a2f      	ldr	r2, [pc, #188]	; (8002254 <TIM_Base_SetConfig+0xd0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0x20>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <TIM_Base_SetConfig+0xd4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2270      	movs	r2, #112	; 0x70
 80021a8:	4393      	bics	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a26      	ldr	r2, [pc, #152]	; (8002254 <TIM_Base_SetConfig+0xd0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0x62>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a25      	ldr	r2, [pc, #148]	; (8002258 <TIM_Base_SetConfig+0xd4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0x62>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a24      	ldr	r2, [pc, #144]	; (800225c <TIM_Base_SetConfig+0xd8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <TIM_Base_SetConfig+0xdc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0x62>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <TIM_Base_SetConfig+0xe0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0x62>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <TIM_Base_SetConfig+0xe4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <TIM_Base_SetConfig+0xe8>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	4393      	bics	r3, r2
 80021fe:	001a      	movs	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <TIM_Base_SetConfig+0xd0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00b      	beq.n	800223e <TIM_Base_SetConfig+0xba>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <TIM_Base_SetConfig+0xdc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <TIM_Base_SetConfig+0xba>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <TIM_Base_SetConfig+0xe0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <TIM_Base_SetConfig+0xba>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <TIM_Base_SetConfig+0xe4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d103      	bne.n	8002246 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	615a      	str	r2, [r3, #20]
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400
 800225c:	40002000 	.word	0x40002000
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	fffffcff 	.word	0xfffffcff

08002270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	2201      	movs	r2, #1
 8002288:	4393      	bics	r3, r2
 800228a:	001a      	movs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	22f0      	movs	r2, #240	; 0xf0
 800229a:	4393      	bics	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	220a      	movs	r2, #10
 80022ac:	4393      	bics	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	621a      	str	r2, [r3, #32]
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b006      	add	sp, #24
 80022ca:	bd80      	pop	{r7, pc}

080022cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	2210      	movs	r2, #16
 80022de:	4393      	bics	r3, r2
 80022e0:	001a      	movs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <TIM_TI2_ConfigInputStage+0x60>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	031b      	lsls	r3, r3, #12
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	22a0      	movs	r2, #160	; 0xa0
 8002308:	4393      	bics	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b006      	add	sp, #24
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	ffff0fff 	.word	0xffff0fff

08002330 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <TIM_ITRx_SetConfig+0x34>)
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	2207      	movs	r2, #7
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	609a      	str	r2, [r3, #8]
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	b004      	add	sp, #16
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	ffcfff8f 	.word	0xffcfff8f

08002368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <TIM_ETR_SetConfig+0x3c>)
 8002380:	4013      	ands	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	021a      	lsls	r2, r3, #8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	431a      	orrs	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	609a      	str	r2, [r3, #8]
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b006      	add	sp, #24
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	ffff00ff 	.word	0xffff00ff

080023a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	223c      	movs	r2, #60	; 0x3c
 80023b6:	5c9b      	ldrb	r3, [r3, r2]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023bc:	2302      	movs	r3, #2
 80023be:	e040      	b.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	223c      	movs	r2, #60	; 0x3c
 80023c4:	2101      	movs	r1, #1
 80023c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	223d      	movs	r2, #61	; 0x3d
 80023cc:	2102      	movs	r1, #2
 80023ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d108      	bne.n	80023fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4a18      	ldr	r2, [pc, #96]	; (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2270      	movs	r2, #112	; 0x70
 8002400:	4393      	bics	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2280      	movs	r2, #128	; 0x80
 8002412:	4393      	bics	r3, r2
 8002414:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4313      	orrs	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	223d      	movs	r2, #61	; 0x3d
 8002434:	2101      	movs	r1, #1
 8002436:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	223c      	movs	r2, #60	; 0x3c
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40012c00 	.word	0x40012c00
 8002450:	ff0fffff 	.word	0xff0fffff

08002454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223c      	movs	r2, #60	; 0x3c
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800246c:	2302      	movs	r3, #2
 800246e:	e079      	b.n	8002564 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	223c      	movs	r2, #60	; 0x3c
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	22ff      	movs	r2, #255	; 0xff
 800247c:	4393      	bics	r3, r2
 800247e:	001a      	movs	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800248c:	401a      	ands	r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a35      	ldr	r2, [pc, #212]	; (8002570 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800249a:	401a      	ands	r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a33      	ldr	r2, [pc, #204]	; (8002574 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80024a8:	401a      	ands	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4a30      	ldr	r2, [pc, #192]	; (8002578 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80024b6:	401a      	ands	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a2e      	ldr	r2, [pc, #184]	; (800257c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80024c4:	401a      	ands	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80024d2:	401a      	ands	r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80024e0:	401a      	ands	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d106      	bne.n	8002504 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80024fa:	401a      	ands	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d121      	bne.n	8002552 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002512:	401a      	ands	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	051b      	lsls	r3, r3, #20
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002522:	401a      	ands	r2, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002530:	401a      	ands	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a12      	ldr	r2, [pc, #72]	; (8002588 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d106      	bne.n	8002552 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a15      	ldr	r2, [pc, #84]	; (800259c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002548:	401a      	ands	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	223c      	movs	r2, #60	; 0x3c
 800255e:	2100      	movs	r1, #0
 8002560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fffffcff 	.word	0xfffffcff
 8002570:	fffffbff 	.word	0xfffffbff
 8002574:	fffff7ff 	.word	0xfffff7ff
 8002578:	ffffefff 	.word	0xffffefff
 800257c:	ffffdfff 	.word	0xffffdfff
 8002580:	ffffbfff 	.word	0xffffbfff
 8002584:	fff0ffff 	.word	0xfff0ffff
 8002588:	40012c00 	.word	0x40012c00
 800258c:	efffffff 	.word	0xefffffff
 8002590:	ff0fffff 	.word	0xff0fffff
 8002594:	feffffff 	.word	0xfeffffff
 8002598:	fdffffff 	.word	0xfdffffff
 800259c:	dfffffff 	.word	0xdfffffff

080025a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e046      	b.n	8002670 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	227c      	movs	r2, #124	; 0x7c
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7fe f904 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	2124      	movs	r1, #36	; 0x24
 8002602:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	438a      	bics	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f830 	bl	800267c <UART_SetConfig>
 800261c:	0003      	movs	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e024      	b.n	8002670 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f000 fcab 	bl	8002f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	490d      	ldr	r1, [pc, #52]	; (8002678 <HAL_UART_Init+0xa8>)
 8002642:	400a      	ands	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	212a      	movs	r1, #42	; 0x2a
 8002652:	438a      	bics	r2, r1
 8002654:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fd43 	bl	80030f4 <UART_CheckIdleState>
 800266e:	0003      	movs	r3, r0
}
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}
 8002678:	ffffb7ff 	.word	0xffffb7ff

0800267c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002688:	231e      	movs	r3, #30
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4aba      	ldr	r2, [pc, #744]	; (80029a8 <UART_SetConfig+0x32c>)
 80026be:	4013      	ands	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4ab6      	ldr	r2, [pc, #728]	; (80029ac <UART_SetConfig+0x330>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4aad      	ldr	r2, [pc, #692]	; (80029b0 <UART_SetConfig+0x334>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	220f      	movs	r2, #15
 8002712:	4393      	bics	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4aa3      	ldr	r2, [pc, #652]	; (80029b4 <UART_SetConfig+0x338>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d125      	bne.n	8002778 <UART_SetConfig+0xfc>
 800272c:	4ba2      	ldr	r3, [pc, #648]	; (80029b8 <UART_SetConfig+0x33c>)
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	2203      	movs	r2, #3
 8002732:	4013      	ands	r3, r2
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00f      	beq.n	8002758 <UART_SetConfig+0xdc>
 8002738:	d304      	bcc.n	8002744 <UART_SetConfig+0xc8>
 800273a:	2b02      	cmp	r3, #2
 800273c:	d007      	beq.n	800274e <UART_SetConfig+0xd2>
 800273e:	2b03      	cmp	r3, #3
 8002740:	d00f      	beq.n	8002762 <UART_SetConfig+0xe6>
 8002742:	e013      	b.n	800276c <UART_SetConfig+0xf0>
 8002744:	231f      	movs	r3, #31
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e05a      	b.n	8002804 <UART_SetConfig+0x188>
 800274e:	231f      	movs	r3, #31
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e055      	b.n	8002804 <UART_SetConfig+0x188>
 8002758:	231f      	movs	r3, #31
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2204      	movs	r2, #4
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e050      	b.n	8002804 <UART_SetConfig+0x188>
 8002762:	231f      	movs	r3, #31
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2208      	movs	r2, #8
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e04b      	b.n	8002804 <UART_SetConfig+0x188>
 800276c:	231f      	movs	r3, #31
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2210      	movs	r2, #16
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	e045      	b.n	8002804 <UART_SetConfig+0x188>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a8f      	ldr	r2, [pc, #572]	; (80029bc <UART_SetConfig+0x340>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d128      	bne.n	80027d4 <UART_SetConfig+0x158>
 8002782:	4b8d      	ldr	r3, [pc, #564]	; (80029b8 <UART_SetConfig+0x33c>)
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	220c      	movs	r2, #12
 8002788:	4013      	ands	r3, r2
 800278a:	2b04      	cmp	r3, #4
 800278c:	d012      	beq.n	80027b4 <UART_SetConfig+0x138>
 800278e:	d802      	bhi.n	8002796 <UART_SetConfig+0x11a>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <UART_SetConfig+0x124>
 8002794:	e018      	b.n	80027c8 <UART_SetConfig+0x14c>
 8002796:	2b08      	cmp	r3, #8
 8002798:	d007      	beq.n	80027aa <UART_SetConfig+0x12e>
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d00f      	beq.n	80027be <UART_SetConfig+0x142>
 800279e:	e013      	b.n	80027c8 <UART_SetConfig+0x14c>
 80027a0:	231f      	movs	r3, #31
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e02c      	b.n	8002804 <UART_SetConfig+0x188>
 80027aa:	231f      	movs	r3, #31
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e027      	b.n	8002804 <UART_SetConfig+0x188>
 80027b4:	231f      	movs	r3, #31
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2204      	movs	r2, #4
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e022      	b.n	8002804 <UART_SetConfig+0x188>
 80027be:	231f      	movs	r3, #31
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2208      	movs	r2, #8
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e01d      	b.n	8002804 <UART_SetConfig+0x188>
 80027c8:	231f      	movs	r3, #31
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2210      	movs	r2, #16
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	e017      	b.n	8002804 <UART_SetConfig+0x188>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a79      	ldr	r2, [pc, #484]	; (80029c0 <UART_SetConfig+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d104      	bne.n	80027e8 <UART_SetConfig+0x16c>
 80027de:	231f      	movs	r3, #31
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e00d      	b.n	8002804 <UART_SetConfig+0x188>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a75      	ldr	r2, [pc, #468]	; (80029c4 <UART_SetConfig+0x348>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d104      	bne.n	80027fc <UART_SetConfig+0x180>
 80027f2:	231f      	movs	r3, #31
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e003      	b.n	8002804 <UART_SetConfig+0x188>
 80027fc:	231f      	movs	r3, #31
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2210      	movs	r2, #16
 8002802:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	429a      	cmp	r2, r3
 800280e:	d000      	beq.n	8002812 <UART_SetConfig+0x196>
 8002810:	e1de      	b.n	8002bd0 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8002812:	231f      	movs	r3, #31
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d100      	bne.n	800281e <UART_SetConfig+0x1a2>
 800281c:	e06c      	b.n	80028f8 <UART_SetConfig+0x27c>
 800281e:	dc02      	bgt.n	8002826 <UART_SetConfig+0x1aa>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <UART_SetConfig+0x1b8>
 8002824:	e1ab      	b.n	8002b7e <UART_SetConfig+0x502>
 8002826:	2b04      	cmp	r3, #4
 8002828:	d100      	bne.n	800282c <UART_SetConfig+0x1b0>
 800282a:	e0e5      	b.n	80029f8 <UART_SetConfig+0x37c>
 800282c:	2b08      	cmp	r3, #8
 800282e:	d100      	bne.n	8002832 <UART_SetConfig+0x1b6>
 8002830:	e144      	b.n	8002abc <UART_SetConfig+0x440>
 8002832:	e1a4      	b.n	8002b7e <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002834:	f7ff f8ea 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8002838:	0003      	movs	r3, r0
 800283a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d044      	beq.n	80028ce <UART_SetConfig+0x252>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	2b01      	cmp	r3, #1
 800284a:	d03e      	beq.n	80028ca <UART_SetConfig+0x24e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b02      	cmp	r3, #2
 8002852:	d038      	beq.n	80028c6 <UART_SetConfig+0x24a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	2b03      	cmp	r3, #3
 800285a:	d032      	beq.n	80028c2 <UART_SetConfig+0x246>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2b04      	cmp	r3, #4
 8002862:	d02c      	beq.n	80028be <UART_SetConfig+0x242>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2b05      	cmp	r3, #5
 800286a:	d026      	beq.n	80028ba <UART_SetConfig+0x23e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2b06      	cmp	r3, #6
 8002872:	d020      	beq.n	80028b6 <UART_SetConfig+0x23a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	2b07      	cmp	r3, #7
 800287a:	d01a      	beq.n	80028b2 <UART_SetConfig+0x236>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2b08      	cmp	r3, #8
 8002882:	d014      	beq.n	80028ae <UART_SetConfig+0x232>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b09      	cmp	r3, #9
 800288a:	d00e      	beq.n	80028aa <UART_SetConfig+0x22e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2b0a      	cmp	r3, #10
 8002892:	d008      	beq.n	80028a6 <UART_SetConfig+0x22a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2b0b      	cmp	r3, #11
 800289a:	d102      	bne.n	80028a2 <UART_SetConfig+0x226>
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	e016      	b.n	80028d0 <UART_SetConfig+0x254>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e014      	b.n	80028d0 <UART_SetConfig+0x254>
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	e012      	b.n	80028d0 <UART_SetConfig+0x254>
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	e010      	b.n	80028d0 <UART_SetConfig+0x254>
 80028ae:	2320      	movs	r3, #32
 80028b0:	e00e      	b.n	80028d0 <UART_SetConfig+0x254>
 80028b2:	2310      	movs	r3, #16
 80028b4:	e00c      	b.n	80028d0 <UART_SetConfig+0x254>
 80028b6:	230c      	movs	r3, #12
 80028b8:	e00a      	b.n	80028d0 <UART_SetConfig+0x254>
 80028ba:	230a      	movs	r3, #10
 80028bc:	e008      	b.n	80028d0 <UART_SetConfig+0x254>
 80028be:	2308      	movs	r3, #8
 80028c0:	e006      	b.n	80028d0 <UART_SetConfig+0x254>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e004      	b.n	80028d0 <UART_SetConfig+0x254>
 80028c6:	2304      	movs	r3, #4
 80028c8:	e002      	b.n	80028d0 <UART_SetConfig+0x254>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e000      	b.n	80028d0 <UART_SetConfig+0x254>
 80028ce:	2301      	movs	r3, #1
 80028d0:	0019      	movs	r1, r3
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7fd fc14 	bl	8000100 <__udivsi3>
 80028d8:	0003      	movs	r3, r0
 80028da:	005a      	lsls	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	18d2      	adds	r2, r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0019      	movs	r1, r3
 80028ea:	0010      	movs	r0, r2
 80028ec:	f7fd fc08 	bl	8000100 <__udivsi3>
 80028f0:	0003      	movs	r3, r0
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	617b      	str	r3, [r7, #20]
        break;
 80028f6:	e147      	b.n	8002b88 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d043      	beq.n	8002988 <UART_SetConfig+0x30c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d03d      	beq.n	8002984 <UART_SetConfig+0x308>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2b02      	cmp	r3, #2
 800290e:	d037      	beq.n	8002980 <UART_SetConfig+0x304>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2b03      	cmp	r3, #3
 8002916:	d031      	beq.n	800297c <UART_SetConfig+0x300>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2b04      	cmp	r3, #4
 800291e:	d02b      	beq.n	8002978 <UART_SetConfig+0x2fc>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2b05      	cmp	r3, #5
 8002926:	d025      	beq.n	8002974 <UART_SetConfig+0x2f8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b06      	cmp	r3, #6
 800292e:	d01f      	beq.n	8002970 <UART_SetConfig+0x2f4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b07      	cmp	r3, #7
 8002936:	d019      	beq.n	800296c <UART_SetConfig+0x2f0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b08      	cmp	r3, #8
 800293e:	d013      	beq.n	8002968 <UART_SetConfig+0x2ec>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b09      	cmp	r3, #9
 8002946:	d00d      	beq.n	8002964 <UART_SetConfig+0x2e8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2b0a      	cmp	r3, #10
 800294e:	d007      	beq.n	8002960 <UART_SetConfig+0x2e4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b0b      	cmp	r3, #11
 8002956:	d101      	bne.n	800295c <UART_SetConfig+0x2e0>
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <UART_SetConfig+0x34c>)
 800295a:	e016      	b.n	800298a <UART_SetConfig+0x30e>
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <UART_SetConfig+0x350>)
 800295e:	e014      	b.n	800298a <UART_SetConfig+0x30e>
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <UART_SetConfig+0x354>)
 8002962:	e012      	b.n	800298a <UART_SetConfig+0x30e>
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <UART_SetConfig+0x358>)
 8002966:	e010      	b.n	800298a <UART_SetConfig+0x30e>
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <UART_SetConfig+0x35c>)
 800296a:	e00e      	b.n	800298a <UART_SetConfig+0x30e>
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <UART_SetConfig+0x360>)
 800296e:	e00c      	b.n	800298a <UART_SetConfig+0x30e>
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <UART_SetConfig+0x364>)
 8002972:	e00a      	b.n	800298a <UART_SetConfig+0x30e>
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <UART_SetConfig+0x368>)
 8002976:	e008      	b.n	800298a <UART_SetConfig+0x30e>
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <UART_SetConfig+0x36c>)
 800297a:	e006      	b.n	800298a <UART_SetConfig+0x30e>
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <UART_SetConfig+0x370>)
 800297e:	e004      	b.n	800298a <UART_SetConfig+0x30e>
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <UART_SetConfig+0x374>)
 8002982:	e002      	b.n	800298a <UART_SetConfig+0x30e>
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <UART_SetConfig+0x378>)
 8002986:	e000      	b.n	800298a <UART_SetConfig+0x30e>
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <UART_SetConfig+0x350>)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6852      	ldr	r2, [r2, #4]
 800298e:	0852      	lsrs	r2, r2, #1
 8002990:	189a      	adds	r2, r3, r2
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0019      	movs	r1, r3
 8002998:	0010      	movs	r0, r2
 800299a:	f7fd fbb1 	bl	8000100 <__udivsi3>
 800299e:	0003      	movs	r3, r0
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	617b      	str	r3, [r7, #20]
        break;
 80029a4:	e0f0      	b.n	8002b88 <UART_SetConfig+0x50c>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	cfff69f3 	.word	0xcfff69f3
 80029ac:	ffffcfff 	.word	0xffffcfff
 80029b0:	11fff4ff 	.word	0x11fff4ff
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40004400 	.word	0x40004400
 80029c0:	40004800 	.word	0x40004800
 80029c4:	40004c00 	.word	0x40004c00
 80029c8:	0001e848 	.word	0x0001e848
 80029cc:	01e84800 	.word	0x01e84800
 80029d0:	0003d090 	.word	0x0003d090
 80029d4:	0007a120 	.word	0x0007a120
 80029d8:	000f4240 	.word	0x000f4240
 80029dc:	001e8480 	.word	0x001e8480
 80029e0:	0028b0aa 	.word	0x0028b0aa
 80029e4:	0030d400 	.word	0x0030d400
 80029e8:	003d0900 	.word	0x003d0900
 80029ec:	00516154 	.word	0x00516154
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029f8:	f7fe ff7c 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80029fc:	0003      	movs	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d044      	beq.n	8002a92 <UART_SetConfig+0x416>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d03e      	beq.n	8002a8e <UART_SetConfig+0x412>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d038      	beq.n	8002a8a <UART_SetConfig+0x40e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d032      	beq.n	8002a86 <UART_SetConfig+0x40a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d02c      	beq.n	8002a82 <UART_SetConfig+0x406>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d026      	beq.n	8002a7e <UART_SetConfig+0x402>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d020      	beq.n	8002a7a <UART_SetConfig+0x3fe>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2b07      	cmp	r3, #7
 8002a3e:	d01a      	beq.n	8002a76 <UART_SetConfig+0x3fa>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d014      	beq.n	8002a72 <UART_SetConfig+0x3f6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	d00e      	beq.n	8002a6e <UART_SetConfig+0x3f2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2b0a      	cmp	r3, #10
 8002a56:	d008      	beq.n	8002a6a <UART_SetConfig+0x3ee>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b0b      	cmp	r3, #11
 8002a5e:	d102      	bne.n	8002a66 <UART_SetConfig+0x3ea>
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	e016      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e014      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	e012      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a6e:	2340      	movs	r3, #64	; 0x40
 8002a70:	e010      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a72:	2320      	movs	r3, #32
 8002a74:	e00e      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a76:	2310      	movs	r3, #16
 8002a78:	e00c      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	e00a      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a7e:	230a      	movs	r3, #10
 8002a80:	e008      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a82:	2308      	movs	r3, #8
 8002a84:	e006      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a86:	2306      	movs	r3, #6
 8002a88:	e004      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e002      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e000      	b.n	8002a94 <UART_SetConfig+0x418>
 8002a92:	2301      	movs	r3, #1
 8002a94:	0019      	movs	r1, r3
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7fd fb32 	bl	8000100 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	005a      	lsls	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	18d2      	adds	r2, r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0019      	movs	r1, r3
 8002aae:	0010      	movs	r0, r2
 8002ab0:	f7fd fb26 	bl	8000100 <__udivsi3>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	617b      	str	r3, [r7, #20]
        break;
 8002aba:	e065      	b.n	8002b88 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d04c      	beq.n	8002b5e <UART_SetConfig+0x4e2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d045      	beq.n	8002b58 <UART_SetConfig+0x4dc>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d03e      	beq.n	8002b52 <UART_SetConfig+0x4d6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d038      	beq.n	8002b4e <UART_SetConfig+0x4d2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d031      	beq.n	8002b48 <UART_SetConfig+0x4cc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d02b      	beq.n	8002b44 <UART_SetConfig+0x4c8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d025      	beq.n	8002b40 <UART_SetConfig+0x4c4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b07      	cmp	r3, #7
 8002afa:	d01e      	beq.n	8002b3a <UART_SetConfig+0x4be>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d017      	beq.n	8002b34 <UART_SetConfig+0x4b8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d010      	beq.n	8002b2e <UART_SetConfig+0x4b2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2b0a      	cmp	r3, #10
 8002b12:	d009      	beq.n	8002b28 <UART_SetConfig+0x4ac>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2b0b      	cmp	r3, #11
 8002b1a:	d102      	bne.n	8002b22 <UART_SetConfig+0x4a6>
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	e01f      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	025b      	lsls	r3, r3, #9
 8002b26:	e01c      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	e019      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	e016      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	e013      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	e010      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b40:	4bb9      	ldr	r3, [pc, #740]	; (8002e28 <UART_SetConfig+0x7ac>)
 8002b42:	e00e      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b44:	4bb9      	ldr	r3, [pc, #740]	; (8002e2c <UART_SetConfig+0x7b0>)
 8002b46:	e00c      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	019b      	lsls	r3, r3, #6
 8002b4c:	e009      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b4e:	4bb8      	ldr	r3, [pc, #736]	; (8002e30 <UART_SetConfig+0x7b4>)
 8002b50:	e007      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	01db      	lsls	r3, r3, #7
 8002b56:	e004      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	e001      	b.n	8002b62 <UART_SetConfig+0x4e6>
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	025b      	lsls	r3, r3, #9
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6852      	ldr	r2, [r2, #4]
 8002b66:	0852      	lsrs	r2, r2, #1
 8002b68:	189a      	adds	r2, r3, r2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	0019      	movs	r1, r3
 8002b70:	0010      	movs	r0, r2
 8002b72:	f7fd fac5 	bl	8000100 <__udivsi3>
 8002b76:	0003      	movs	r3, r0
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	617b      	str	r3, [r7, #20]
        break;
 8002b7c:	e004      	b.n	8002b88 <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 8002b7e:	231e      	movs	r3, #30
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
        break;
 8002b86:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b0f      	cmp	r3, #15
 8002b8c:	d91b      	bls.n	8002bc6 <UART_SetConfig+0x54a>
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	4aa8      	ldr	r2, [pc, #672]	; (8002e34 <UART_SetConfig+0x7b8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d817      	bhi.n	8002bc6 <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2207      	movs	r2, #7
 8002bac:	4013      	ands	r3, r2
 8002bae:	b299      	uxth	r1, r3
 8002bb0:	183b      	adds	r3, r7, r0
 8002bb2:	183a      	adds	r2, r7, r0
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	183a      	adds	r2, r7, r0
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	e1c5      	b.n	8002f52 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8002bc6:	231e      	movs	r3, #30
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e1c0      	b.n	8002f52 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8002bd0:	231f      	movs	r3, #31
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d100      	bne.n	8002bdc <UART_SetConfig+0x560>
 8002bda:	e06c      	b.n	8002cb6 <UART_SetConfig+0x63a>
 8002bdc:	dc02      	bgt.n	8002be4 <UART_SetConfig+0x568>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <UART_SetConfig+0x576>
 8002be2:	e1a1      	b.n	8002f28 <UART_SetConfig+0x8ac>
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d100      	bne.n	8002bea <UART_SetConfig+0x56e>
 8002be8:	e0bc      	b.n	8002d64 <UART_SetConfig+0x6e8>
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d100      	bne.n	8002bf0 <UART_SetConfig+0x574>
 8002bee:	e13b      	b.n	8002e68 <UART_SetConfig+0x7ec>
 8002bf0:	e19a      	b.n	8002f28 <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf2:	f7fe ff0b 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d044      	beq.n	8002c8c <UART_SetConfig+0x610>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d03e      	beq.n	8002c88 <UART_SetConfig+0x60c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d038      	beq.n	8002c84 <UART_SetConfig+0x608>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d032      	beq.n	8002c80 <UART_SetConfig+0x604>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d02c      	beq.n	8002c7c <UART_SetConfig+0x600>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d026      	beq.n	8002c78 <UART_SetConfig+0x5fc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d020      	beq.n	8002c74 <UART_SetConfig+0x5f8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b07      	cmp	r3, #7
 8002c38:	d01a      	beq.n	8002c70 <UART_SetConfig+0x5f4>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d014      	beq.n	8002c6c <UART_SetConfig+0x5f0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d00e      	beq.n	8002c68 <UART_SetConfig+0x5ec>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b0a      	cmp	r3, #10
 8002c50:	d008      	beq.n	8002c64 <UART_SetConfig+0x5e8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b0b      	cmp	r3, #11
 8002c58:	d102      	bne.n	8002c60 <UART_SetConfig+0x5e4>
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	e016      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e014      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	e012      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c68:	2340      	movs	r3, #64	; 0x40
 8002c6a:	e010      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e00e      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c70:	2310      	movs	r3, #16
 8002c72:	e00c      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c74:	230c      	movs	r3, #12
 8002c76:	e00a      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c78:	230a      	movs	r3, #10
 8002c7a:	e008      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	e006      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c80:	2306      	movs	r3, #6
 8002c82:	e004      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c84:	2304      	movs	r3, #4
 8002c86:	e002      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e000      	b.n	8002c8e <UART_SetConfig+0x612>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	0019      	movs	r1, r3
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7fd fa35 	bl	8000100 <__udivsi3>
 8002c96:	0003      	movs	r3, r0
 8002c98:	001a      	movs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	18d2      	adds	r2, r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f7fd fa29 	bl	8000100 <__udivsi3>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	617b      	str	r3, [r7, #20]
        break;
 8002cb4:	e13d      	b.n	8002f32 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d043      	beq.n	8002d46 <UART_SetConfig+0x6ca>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d03d      	beq.n	8002d42 <UART_SetConfig+0x6c6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d037      	beq.n	8002d3e <UART_SetConfig+0x6c2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d031      	beq.n	8002d3a <UART_SetConfig+0x6be>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d02b      	beq.n	8002d36 <UART_SetConfig+0x6ba>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d025      	beq.n	8002d32 <UART_SetConfig+0x6b6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d01f      	beq.n	8002d2e <UART_SetConfig+0x6b2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2b07      	cmp	r3, #7
 8002cf4:	d019      	beq.n	8002d2a <UART_SetConfig+0x6ae>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d013      	beq.n	8002d26 <UART_SetConfig+0x6aa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2b09      	cmp	r3, #9
 8002d04:	d00d      	beq.n	8002d22 <UART_SetConfig+0x6a6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b0a      	cmp	r3, #10
 8002d0c:	d007      	beq.n	8002d1e <UART_SetConfig+0x6a2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b0b      	cmp	r3, #11
 8002d14:	d101      	bne.n	8002d1a <UART_SetConfig+0x69e>
 8002d16:	4b48      	ldr	r3, [pc, #288]	; (8002e38 <UART_SetConfig+0x7bc>)
 8002d18:	e016      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d1a:	4b48      	ldr	r3, [pc, #288]	; (8002e3c <UART_SetConfig+0x7c0>)
 8002d1c:	e014      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <UART_SetConfig+0x7c4>)
 8002d20:	e012      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d22:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <UART_SetConfig+0x7c8>)
 8002d24:	e010      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d26:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <UART_SetConfig+0x7cc>)
 8002d28:	e00e      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d2a:	4b48      	ldr	r3, [pc, #288]	; (8002e4c <UART_SetConfig+0x7d0>)
 8002d2c:	e00c      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d2e:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <UART_SetConfig+0x7d4>)
 8002d30:	e00a      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <UART_SetConfig+0x7d8>)
 8002d34:	e008      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d36:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <UART_SetConfig+0x7dc>)
 8002d38:	e006      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <UART_SetConfig+0x7e0>)
 8002d3c:	e004      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d3e:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <UART_SetConfig+0x7e4>)
 8002d40:	e002      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d42:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <UART_SetConfig+0x7e8>)
 8002d44:	e000      	b.n	8002d48 <UART_SetConfig+0x6cc>
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <UART_SetConfig+0x7c0>)
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6852      	ldr	r2, [r2, #4]
 8002d4c:	0852      	lsrs	r2, r2, #1
 8002d4e:	189a      	adds	r2, r3, r2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	0019      	movs	r1, r3
 8002d56:	0010      	movs	r0, r2
 8002d58:	f7fd f9d2 	bl	8000100 <__udivsi3>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	617b      	str	r3, [r7, #20]
        break;
 8002d62:	e0e6      	b.n	8002f32 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d64:	f7fe fdc6 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d044      	beq.n	8002dfe <UART_SetConfig+0x782>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d03e      	beq.n	8002dfa <UART_SetConfig+0x77e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d038      	beq.n	8002df6 <UART_SetConfig+0x77a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d032      	beq.n	8002df2 <UART_SetConfig+0x776>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d02c      	beq.n	8002dee <UART_SetConfig+0x772>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d026      	beq.n	8002dea <UART_SetConfig+0x76e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b06      	cmp	r3, #6
 8002da2:	d020      	beq.n	8002de6 <UART_SetConfig+0x76a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b07      	cmp	r3, #7
 8002daa:	d01a      	beq.n	8002de2 <UART_SetConfig+0x766>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d014      	beq.n	8002dde <UART_SetConfig+0x762>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d00e      	beq.n	8002dda <UART_SetConfig+0x75e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b0a      	cmp	r3, #10
 8002dc2:	d008      	beq.n	8002dd6 <UART_SetConfig+0x75a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2b0b      	cmp	r3, #11
 8002dca:	d102      	bne.n	8002dd2 <UART_SetConfig+0x756>
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	e016      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e014      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	e012      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dda:	2340      	movs	r3, #64	; 0x40
 8002ddc:	e010      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dde:	2320      	movs	r3, #32
 8002de0:	e00e      	b.n	8002e00 <UART_SetConfig+0x784>
 8002de2:	2310      	movs	r3, #16
 8002de4:	e00c      	b.n	8002e00 <UART_SetConfig+0x784>
 8002de6:	230c      	movs	r3, #12
 8002de8:	e00a      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dea:	230a      	movs	r3, #10
 8002dec:	e008      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dee:	2308      	movs	r3, #8
 8002df0:	e006      	b.n	8002e00 <UART_SetConfig+0x784>
 8002df2:	2306      	movs	r3, #6
 8002df4:	e004      	b.n	8002e00 <UART_SetConfig+0x784>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e002      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e000      	b.n	8002e00 <UART_SetConfig+0x784>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	0019      	movs	r1, r3
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7fd f97c 	bl	8000100 <__udivsi3>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	18d2      	adds	r2, r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0019      	movs	r1, r3
 8002e1a:	0010      	movs	r0, r2
 8002e1c:	f7fd f970 	bl	8000100 <__udivsi3>
 8002e20:	0003      	movs	r3, r0
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	617b      	str	r3, [r7, #20]
        break;
 8002e26:	e084      	b.n	8002f32 <UART_SetConfig+0x8b6>
 8002e28:	00001554 	.word	0x00001554
 8002e2c:	00001998 	.word	0x00001998
 8002e30:	00002aaa 	.word	0x00002aaa
 8002e34:	0000ffff 	.word	0x0000ffff
 8002e38:	0000f424 	.word	0x0000f424
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	0001e848 	.word	0x0001e848
 8002e44:	0003d090 	.word	0x0003d090
 8002e48:	0007a120 	.word	0x0007a120
 8002e4c:	000f4240 	.word	0x000f4240
 8002e50:	00145855 	.word	0x00145855
 8002e54:	00186a00 	.word	0x00186a00
 8002e58:	001e8480 	.word	0x001e8480
 8002e5c:	0028b0aa 	.word	0x0028b0aa
 8002e60:	003d0900 	.word	0x003d0900
 8002e64:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d04b      	beq.n	8002f08 <UART_SetConfig+0x88c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d044      	beq.n	8002f02 <UART_SetConfig+0x886>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d03d      	beq.n	8002efc <UART_SetConfig+0x880>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d037      	beq.n	8002ef8 <UART_SetConfig+0x87c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d030      	beq.n	8002ef2 <UART_SetConfig+0x876>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d02a      	beq.n	8002eee <UART_SetConfig+0x872>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d024      	beq.n	8002eea <UART_SetConfig+0x86e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	d01d      	beq.n	8002ee4 <UART_SetConfig+0x868>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d016      	beq.n	8002ede <UART_SetConfig+0x862>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2b09      	cmp	r3, #9
 8002eb6:	d00f      	beq.n	8002ed8 <UART_SetConfig+0x85c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b0a      	cmp	r3, #10
 8002ebe:	d008      	beq.n	8002ed2 <UART_SetConfig+0x856>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b0b      	cmp	r3, #11
 8002ec6:	d101      	bne.n	8002ecc <UART_SetConfig+0x850>
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	e01f      	b.n	8002f0c <UART_SetConfig+0x890>
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	e01c      	b.n	8002f0c <UART_SetConfig+0x890>
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	e019      	b.n	8002f0c <UART_SetConfig+0x890>
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	e016      	b.n	8002f0c <UART_SetConfig+0x890>
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	e013      	b.n	8002f0c <UART_SetConfig+0x890>
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	e010      	b.n	8002f0c <UART_SetConfig+0x890>
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <UART_SetConfig+0x900>)
 8002eec:	e00e      	b.n	8002f0c <UART_SetConfig+0x890>
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <UART_SetConfig+0x904>)
 8002ef0:	e00c      	b.n	8002f0c <UART_SetConfig+0x890>
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	015b      	lsls	r3, r3, #5
 8002ef6:	e009      	b.n	8002f0c <UART_SetConfig+0x890>
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <UART_SetConfig+0x908>)
 8002efa:	e007      	b.n	8002f0c <UART_SetConfig+0x890>
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	019b      	lsls	r3, r3, #6
 8002f00:	e004      	b.n	8002f0c <UART_SetConfig+0x890>
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	01db      	lsls	r3, r3, #7
 8002f06:	e001      	b.n	8002f0c <UART_SetConfig+0x890>
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	0852      	lsrs	r2, r2, #1
 8002f12:	189a      	adds	r2, r3, r2
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0019      	movs	r1, r3
 8002f1a:	0010      	movs	r0, r2
 8002f1c:	f7fd f8f0 	bl	8000100 <__udivsi3>
 8002f20:	0003      	movs	r3, r0
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	617b      	str	r3, [r7, #20]
        break;
 8002f26:	e004      	b.n	8002f32 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 8002f28:	231e      	movs	r3, #30
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
        break;
 8002f30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b0f      	cmp	r3, #15
 8002f36:	d908      	bls.n	8002f4a <UART_SetConfig+0x8ce>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <UART_SetConfig+0x90c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d804      	bhi.n	8002f4a <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	e003      	b.n	8002f52 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8002f4a:	231e      	movs	r3, #30
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	226a      	movs	r2, #106	; 0x6a
 8002f56:	2101      	movs	r1, #1
 8002f58:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2268      	movs	r2, #104	; 0x68
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002f6e:	231e      	movs	r3, #30
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	781b      	ldrb	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b008      	add	sp, #32
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	00000aaa 	.word	0x00000aaa
 8002f80:	00000ccc 	.word	0x00000ccc
 8002f84:	00001555 	.word	0x00001555
 8002f88:	0000ffff 	.word	0x0000ffff

08002f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a4a      	ldr	r2, [pc, #296]	; (80030d0 <UART_AdvFeatureConfig+0x144>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d00b      	beq.n	8002fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a43      	ldr	r2, [pc, #268]	; (80030d4 <UART_AdvFeatureConfig+0x148>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	2204      	movs	r2, #4
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d00b      	beq.n	8002ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a3b      	ldr	r2, [pc, #236]	; (80030d8 <UART_AdvFeatureConfig+0x14c>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2208      	movs	r2, #8
 8003000:	4013      	ands	r3, r2
 8003002:	d00b      	beq.n	800301c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a34      	ldr	r2, [pc, #208]	; (80030dc <UART_AdvFeatureConfig+0x150>)
 800300c:	4013      	ands	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	2210      	movs	r2, #16
 8003022:	4013      	ands	r3, r2
 8003024:	d00b      	beq.n	800303e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <UART_AdvFeatureConfig+0x154>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	2220      	movs	r2, #32
 8003044:	4013      	ands	r3, r2
 8003046:	d00b      	beq.n	8003060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <UART_AdvFeatureConfig+0x158>)
 8003050:	4013      	ands	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2240      	movs	r2, #64	; 0x40
 8003066:	4013      	ands	r3, r2
 8003068:	d01d      	beq.n	80030a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <UART_AdvFeatureConfig+0x15c>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	035b      	lsls	r3, r3, #13
 800308a:	429a      	cmp	r2, r3
 800308c:	d10b      	bne.n	80030a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a15      	ldr	r2, [pc, #84]	; (80030ec <UART_AdvFeatureConfig+0x160>)
 8003096:	4013      	ands	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	4013      	ands	r3, r2
 80030ae:	d00b      	beq.n	80030c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <UART_AdvFeatureConfig+0x164>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  }
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	fffdffff 	.word	0xfffdffff
 80030d4:	fffeffff 	.word	0xfffeffff
 80030d8:	fffbffff 	.word	0xfffbffff
 80030dc:	ffff7fff 	.word	0xffff7fff
 80030e0:	ffffefff 	.word	0xffffefff
 80030e4:	ffffdfff 	.word	0xffffdfff
 80030e8:	ffefffff 	.word	0xffefffff
 80030ec:	ff9fffff 	.word	0xff9fffff
 80030f0:	fff7ffff 	.word	0xfff7ffff

080030f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2288      	movs	r2, #136	; 0x88
 8003100:	2100      	movs	r1, #0
 8003102:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003104:	f7fd fcb4 	bl	8000a70 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2208      	movs	r2, #8
 8003114:	4013      	ands	r3, r2
 8003116:	2b08      	cmp	r3, #8
 8003118:	d10d      	bne.n	8003136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	0399      	lsls	r1, r3, #14
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <UART_CheckIdleState+0x90>)
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	0013      	movs	r3, r2
 8003128:	2200      	movs	r2, #0
 800312a:	f000 f82d 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d001      	beq.n	8003136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e021      	b.n	800317a <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2204      	movs	r2, #4
 800313e:	4013      	ands	r3, r2
 8003140:	2b04      	cmp	r3, #4
 8003142:	d10d      	bne.n	8003160 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	03d9      	lsls	r1, r3, #15
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <UART_CheckIdleState+0x90>)
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	0013      	movs	r3, r2
 8003152:	2200      	movs	r2, #0
 8003154:	f000 f818 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d001      	beq.n	8003160 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e00c      	b.n	800317a <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	2120      	movs	r1, #32
 8003166:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2284      	movs	r2, #132	; 0x84
 800316c:	2120      	movs	r1, #32
 800316e:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	227c      	movs	r2, #124	; 0x7c
 8003174:	2100      	movs	r1, #0
 8003176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	01ffffff 	.word	0x01ffffff

08003188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	1dfb      	adds	r3, r7, #7
 8003196:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003198:	e02b      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	3301      	adds	r3, #1
 800319e:	d028      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a0:	f7fd fc66 	bl	8000a70 <HAL_GetTick>
 80031a4:	0002      	movs	r2, r0
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11d      	bne.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4916      	ldr	r1, [pc, #88]	; (800321c <UART_WaitOnFlagUntilTimeout+0x94>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	438a      	bics	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	2120      	movs	r1, #32
 80031dc:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2284      	movs	r2, #132	; 0x84
 80031e2:	2120      	movs	r1, #32
 80031e4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	227c      	movs	r2, #124	; 0x7c
 80031ea:	2100      	movs	r1, #0
 80031ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00f      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	425a      	negs	r2, r3
 8003202:	4153      	adcs	r3, r2
 8003204:	b2db      	uxtb	r3, r3
 8003206:	001a      	movs	r2, r3
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d0c4      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	fffffe5f 	.word	0xfffffe5f

08003220 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	227c      	movs	r2, #124	; 0x7c
 800322c:	5c9b      	ldrb	r3, [r3, r2]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_UARTEx_DisableFifoMode+0x16>
 8003232:	2302      	movs	r3, #2
 8003234:	e027      	b.n	8003286 <HAL_UARTEx_DisableFifoMode+0x66>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	227c      	movs	r2, #124	; 0x7c
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	2124      	movs	r1, #36	; 0x24
 8003244:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	438a      	bics	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003262:	4013      	ands	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	2120      	movs	r1, #32
 800327a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	227c      	movs	r2, #124	; 0x7c
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	dfffffff 	.word	0xdfffffff

08003294 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	227c      	movs	r2, #124	; 0x7c
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e02e      	b.n	800330a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	227c      	movs	r2, #124	; 0x7c
 80032b0:	2101      	movs	r1, #1
 80032b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	2124      	movs	r1, #36	; 0x24
 80032ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	08d9      	lsrs	r1, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f854 	bl	8003398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	2120      	movs	r1, #32
 80032fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	227c      	movs	r2, #124	; 0x7c
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b004      	add	sp, #16
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	227c      	movs	r2, #124	; 0x7c
 8003322:	5c9b      	ldrb	r3, [r3, r2]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003328:	2302      	movs	r3, #2
 800332a:	e02f      	b.n	800338c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	227c      	movs	r2, #124	; 0x7c
 8003330:	2101      	movs	r1, #1
 8003332:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	2124      	movs	r1, #36	; 0x24
 800333a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2101      	movs	r1, #1
 8003350:	438a      	bics	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800335c:	4013      	ands	r3, r2
 800335e:	0019      	movs	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 f813 	bl	8003398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	2120      	movs	r1, #32
 8003380:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	227c      	movs	r2, #124	; 0x7c
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b004      	add	sp, #16
 8003392:	bd80      	pop	{r7, pc}
 8003394:	f1ffffff 	.word	0xf1ffffff

08003398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80033a0:	2314      	movs	r3, #20
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <UARTEx_SetNbDataToProcess+0xcc>)
 80033a6:	ca03      	ldmia	r2!, {r0, r1}
 80033a8:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80033aa:	230c      	movs	r3, #12
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <UARTEx_SetNbDataToProcess+0xd0>)
 80033b0:	ca03      	ldmia	r2!, {r0, r1}
 80033b2:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d108      	bne.n	80033ce <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	226a      	movs	r2, #106	; 0x6a
 80033c0:	2101      	movs	r1, #1
 80033c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2268      	movs	r2, #104	; 0x68
 80033c8:	2101      	movs	r1, #1
 80033ca:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033cc:	e046      	b.n	800345c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80033ce:	261f      	movs	r6, #31
 80033d0:	19bb      	adds	r3, r7, r6
 80033d2:	2208      	movs	r2, #8
 80033d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80033d6:	201e      	movs	r0, #30
 80033d8:	183b      	adds	r3, r7, r0
 80033da:	2208      	movs	r2, #8
 80033dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	0e5b      	lsrs	r3, r3, #25
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	241d      	movs	r4, #29
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	2107      	movs	r1, #7
 80033ee:	400a      	ands	r2, r1
 80033f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	0f5b      	lsrs	r3, r3, #29
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	251c      	movs	r5, #28
 80033fe:	197b      	adds	r3, r7, r5
 8003400:	2107      	movs	r1, #7
 8003402:	400a      	ands	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003406:	183b      	adds	r3, r7, r0
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	197a      	adds	r2, r7, r5
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	2114      	movs	r1, #20
 8003410:	1879      	adds	r1, r7, r1
 8003412:	5c8a      	ldrb	r2, [r1, r2]
 8003414:	435a      	muls	r2, r3
 8003416:	0010      	movs	r0, r2
 8003418:	197b      	adds	r3, r7, r5
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	250c      	movs	r5, #12
 800341e:	197a      	adds	r2, r7, r5
 8003420:	5cd3      	ldrb	r3, [r2, r3]
 8003422:	0019      	movs	r1, r3
 8003424:	f7fc fef6 	bl	8000214 <__divsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	b299      	uxth	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	226a      	movs	r2, #106	; 0x6a
 8003430:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003432:	19bb      	adds	r3, r7, r6
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	193a      	adds	r2, r7, r4
 8003438:	7812      	ldrb	r2, [r2, #0]
 800343a:	2114      	movs	r1, #20
 800343c:	1879      	adds	r1, r7, r1
 800343e:	5c8a      	ldrb	r2, [r1, r2]
 8003440:	435a      	muls	r2, r3
 8003442:	0010      	movs	r0, r2
 8003444:	193b      	adds	r3, r7, r4
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	197a      	adds	r2, r7, r5
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	0019      	movs	r1, r3
 800344e:	f7fc fee1 	bl	8000214 <__divsi3>
 8003452:	0003      	movs	r3, r0
 8003454:	b299      	uxth	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2268      	movs	r2, #104	; 0x68
 800345a:	5299      	strh	r1, [r3, r2]
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b009      	add	sp, #36	; 0x24
 8003462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003464:	080034dc 	.word	0x080034dc
 8003468:	080034e4 	.word	0x080034e4

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	2600      	movs	r6, #0
 8003470:	4d0c      	ldr	r5, [pc, #48]	; (80034a4 <__libc_init_array+0x38>)
 8003472:	4c0d      	ldr	r4, [pc, #52]	; (80034a8 <__libc_init_array+0x3c>)
 8003474:	1b64      	subs	r4, r4, r5
 8003476:	10a4      	asrs	r4, r4, #2
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	2600      	movs	r6, #0
 800347e:	f000 f821 	bl	80034c4 <_init>
 8003482:	4d0a      	ldr	r5, [pc, #40]	; (80034ac <__libc_init_array+0x40>)
 8003484:	4c0a      	ldr	r4, [pc, #40]	; (80034b0 <__libc_init_array+0x44>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	00b3      	lsls	r3, r6, #2
 8003492:	58eb      	ldr	r3, [r5, r3]
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	00b3      	lsls	r3, r6, #2
 800349c:	58eb      	ldr	r3, [r5, r3]
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	0800354c 	.word	0x0800354c
 80034a8:	0800354c 	.word	0x0800354c
 80034ac:	0800354c 	.word	0x0800354c
 80034b0:	08003550 	.word	0x08003550

080034b4 <memset>:
 80034b4:	0003      	movs	r3, r0
 80034b6:	1812      	adds	r2, r2, r0
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d100      	bne.n	80034be <memset+0xa>
 80034bc:	4770      	bx	lr
 80034be:	7019      	strb	r1, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	e7f9      	b.n	80034b8 <memset+0x4>

080034c4 <_init>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr

080034d0 <_fini>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr
