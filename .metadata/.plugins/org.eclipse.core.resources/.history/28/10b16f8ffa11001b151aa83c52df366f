
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bbc  08003bbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bbc  08003bbc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bbc  08003bbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08003bd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003bd0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c49d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bdf  00000000  00000000  0002c4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0002e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0002ed58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001538c  00000000  00000000  0002f918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e16  00000000  00000000  00044ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087abe  00000000  00000000  0004eaba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d68  00000000  00000000  000d65f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003b18 	.word	0x08003b18

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003b18 	.word	0x08003b18

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 fbf5 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f827 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 f985 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800040e:	f000 f901 	bl	8000614 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000412:	f000 f881 	bl	8000518 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000416:	f000 f94b 	bl	80006b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char *msg = "Hello world!\r\n";
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <main+0x4c>)
 800041c:	60fb      	str	r3, [r7, #12]
  char *Llow = "0";
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <main+0x50>)
 8000420:	60bb      	str	r3, [r7, #8]
  char *Lhigh = "75\r\n";
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <main+0x54>)
 8000424:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3, (uint8_t*)Llow, strlen(Llow), 1);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fe69 	bl	8000100 <strlen>
 800042e:	0003      	movs	r3, r0
 8000430:	b29a      	uxth	r2, r3
 8000432:	68b9      	ldr	r1, [r7, #8]
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <main+0x58>)
 8000436:	2301      	movs	r3, #1
 8000438:	f002 fb9e 	bl	8002b78 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800043c:	23fa      	movs	r3, #250	; 0xfa
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fc59 	bl	8000cf8 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)Llow, strlen(Llow), 1);
 8000446:	e7ee      	b.n	8000426 <main+0x2a>
 8000448:	08003b30 	.word	0x08003b30
 800044c:	08003b40 	.word	0x08003b40
 8000450:	08003b44 	.word	0x08003b44
 8000454:	20000028 	.word	0x20000028

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b099      	sub	sp, #100	; 0x64
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	242c      	movs	r4, #44	; 0x2c
 8000460:	193b      	adds	r3, r7, r4
 8000462:	0018      	movs	r0, r3
 8000464:	2334      	movs	r3, #52	; 0x34
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f003 fb4d 	bl	8003b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046e:	231c      	movs	r3, #28
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	0018      	movs	r0, r3
 8000474:	2310      	movs	r3, #16
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 fb45 	bl	8003b08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047e:	003b      	movs	r3, r7
 8000480:	0018      	movs	r0, r3
 8000482:	231c      	movs	r3, #28
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f003 fb3e 	bl	8003b08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	0018      	movs	r0, r3
 8000492:	f000 ff21 	bl	80012d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2202      	movs	r2, #2
 800049a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0052      	lsls	r2, r2, #1
 80004a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2240      	movs	r2, #64	; 0x40
 80004ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 ff59 	bl	8001370 <HAL_RCC_OscConfig>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f9ed 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c6:	211c      	movs	r1, #28
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2207      	movs	r2, #7
 80004cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2100      	movs	r1, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fa59 	bl	800199c <HAL_RCC_ClockConfig>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ee:	f000 f9d7 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2202      	movs	r2, #2
 80004f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004f8:	003b      	movs	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fbf5 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800050a:	f000 f9c9 	bl	80008a0 <Error_Handler>
  }
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b019      	add	sp, #100	; 0x64
 8000514:	bd90      	pop	{r4, r7, pc}
	...

08000518 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	2320      	movs	r3, #32
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	0018      	movs	r0, r3
 8000524:	2310      	movs	r3, #16
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f003 faed 	bl	8003b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052e:	2314      	movs	r3, #20
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	0018      	movs	r0, r3
 8000534:	230c      	movs	r3, #12
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f003 fae5 	bl	8003b08 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	0018      	movs	r0, r3
 8000542:	2310      	movs	r3, #16
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f003 fade 	bl	8003b08 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800054c:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <MX_TIM3_Init+0xf0>)
 800054e:	4a2f      	ldr	r2, [pc, #188]	; (800060c <MX_TIM3_Init+0xf4>)
 8000550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400;
 8000552:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <MX_TIM3_Init+0xf0>)
 8000554:	22c8      	movs	r2, #200	; 0xc8
 8000556:	0152      	lsls	r2, r2, #5
 8000558:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <MX_TIM3_Init+0xf0>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <MX_TIM3_Init+0xf0>)
 8000562:	4a2b      	ldr	r2, [pc, #172]	; (8000610 <MX_TIM3_Init+0xf8>)
 8000564:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000566:	4b28      	ldr	r3, [pc, #160]	; (8000608 <MX_TIM3_Init+0xf0>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <MX_TIM3_Init+0xf0>)
 800056e:	2200      	movs	r2, #0
 8000570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000572:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_TIM3_Init+0xf0>)
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fcf1 	bl	8001f5c <HAL_TIM_Base_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800057e:	f000 f98f 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000582:	2120      	movs	r1, #32
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0152      	lsls	r2, r2, #5
 800058a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800058c:	187a      	adds	r2, r7, r1
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_TIM3_Init+0xf0>)
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f001 ff12 	bl	80023bc <HAL_TIM_ConfigClockSource>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800059c:	f000 f980 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_TIM3_Init+0xf0>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fd06 	bl	8001fb4 <HAL_TIM_IC_Init>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80005ac:	f000 f978 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b0:	2114      	movs	r1, #20
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005be:	187a      	adds	r2, r7, r1
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_TIM3_Init+0xf0>)
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 fa13 	bl	80029f0 <HAL_TIMEx_MasterConfigSynchronization>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80005ce:	f000 f967 	bl	80008a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005ea:	1d39      	adds	r1, r7, #4
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_TIM3_Init+0xf0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fe45 	bl	8002280 <HAL_TIM_IC_ConfigChannel>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80005fa:	f000 f951 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b00c      	add	sp, #48	; 0x30
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	200000b4 	.word	0x200000b4
 800060c:	40000400 	.word	0x40000400
 8000610:	0000ffff 	.word	0x0000ffff

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <MX_USART2_UART_Init+0x98>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000620:	22e1      	movs	r2, #225	; 0xe1
 8000622:	0252      	lsls	r2, r2, #9
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 800065e:	0018      	movs	r0, r3
 8000660:	f002 fa34 	bl	8002acc <HAL_UART_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000668:	f000 f91a 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 800066e:	2100      	movs	r1, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f003 f939 	bl	80038e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800067a:	f000 f911 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000680:	2100      	movs	r1, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f003 f970 	bl	8003968 <HAL_UARTEx_SetRxFifoThreshold>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800068c:	f000 f908 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_USART2_UART_Init+0x94>)
 8000692:	0018      	movs	r0, r3
 8000694:	f003 f8ee 	bl	8003874 <HAL_UARTEx_DisableFifoMode>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800069c:	f000 f900 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	200000f4 	.word	0x200000f4
 80006ac:	40004400 	.word	0x40004400

080006b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_USART3_UART_Init+0x64>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006bc:	22e1      	movs	r2, #225	; 0xe1
 80006be:	0252      	lsls	r2, r2, #9
 80006c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <MX_USART3_UART_Init+0x60>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 f9e6 	bl	8002acc <HAL_UART_Init>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000704:	f000 f8cc 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	20000028 	.word	0x20000028
 8000714:	40004800 	.word	0x40004800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	; 0x2c
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	2414      	movs	r4, #20
 8000720:	193b      	adds	r3, r7, r4
 8000722:	0018      	movs	r0, r3
 8000724:	2314      	movs	r3, #20
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f003 f9ed 	bl	8003b08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b57      	ldr	r3, [pc, #348]	; (800088c <MX_GPIO_Init+0x174>)
 8000730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000732:	4b56      	ldr	r3, [pc, #344]	; (800088c <MX_GPIO_Init+0x174>)
 8000734:	2104      	movs	r1, #4
 8000736:	430a      	orrs	r2, r1
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
 800073a:	4b54      	ldr	r3, [pc, #336]	; (800088c <MX_GPIO_Init+0x174>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	2204      	movs	r2, #4
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b51      	ldr	r3, [pc, #324]	; (800088c <MX_GPIO_Init+0x174>)
 8000748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800074a:	4b50      	ldr	r3, [pc, #320]	; (800088c <MX_GPIO_Init+0x174>)
 800074c:	2120      	movs	r1, #32
 800074e:	430a      	orrs	r2, r1
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
 8000752:	4b4e      	ldr	r3, [pc, #312]	; (800088c <MX_GPIO_Init+0x174>)
 8000754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000756:	2220      	movs	r2, #32
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <MX_GPIO_Init+0x174>)
 8000760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000762:	4b4a      	ldr	r3, [pc, #296]	; (800088c <MX_GPIO_Init+0x174>)
 8000764:	2101      	movs	r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_GPIO_Init+0x174>)
 800076c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076e:	2201      	movs	r2, #1
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_GPIO_Init+0x174>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <MX_GPIO_Init+0x174>)
 800077c:	2102      	movs	r1, #2
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <MX_GPIO_Init+0x174>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	2202      	movs	r2, #2
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LED_GREEN_Pin, GPIO_PIN_RESET);
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	2200      	movs	r2, #0
 8000794:	2132      	movs	r1, #50	; 0x32
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fd28 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2212      	movs	r2, #18
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2201      	movs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	193a      	adds	r2, r7, r4
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fbb1 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2220      	movs	r2, #32
 80007c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2201      	movs	r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2202      	movs	r2, #2
 80007d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80007da:	193a      	adds	r2, r7, r4
 80007dc:	23a0      	movs	r3, #160	; 0xa0
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fb9e 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007e8:	0021      	movs	r1, r4
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2210      	movs	r2, #16
 80007ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	4a27      	ldr	r2, [pc, #156]	; (8000890 <MX_GPIO_Init+0x178>)
 80007f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	000c      	movs	r4, r1
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	4a24      	ldr	r2, [pc, #144]	; (8000894 <MX_GPIO_Init+0x17c>)
 8000802:	0019      	movs	r1, r3
 8000804:	0010      	movs	r0, r2
 8000806:	f000 fb8d 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080a:	0021      	movs	r1, r4
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2220      	movs	r2, #32
 8000810:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <MX_GPIO_Init+0x180>)
 8000816:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2201      	movs	r2, #1
 800081c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	000c      	movs	r4, r1
 8000820:	187b      	adds	r3, r7, r1
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_GPIO_Init+0x17c>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f000 fb7c 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082c:	0021      	movs	r1, r4
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	000c      	movs	r4, r1
 8000842:	187b      	adds	r3, r7, r1
 8000844:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_GPIO_Init+0x184>)
 8000846:	0019      	movs	r1, r3
 8000848:	0010      	movs	r0, r2
 800084a:	f000 fb6b 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800084e:	0021      	movs	r1, r4
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <MX_GPIO_Init+0x180>)
 800085c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2201      	movs	r2, #1
 8000862:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	187a      	adds	r2, r7, r1
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fb59 	bl	8000f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2007      	movs	r0, #7
 8000878:	f000 fb22 	bl	8000ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800087c:	2007      	movs	r0, #7
 800087e:	f000 fb34 	bl	8000eea <HAL_NVIC_EnableIRQ>

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b00b      	add	sp, #44	; 0x2c
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40021000 	.word	0x40021000
 8000890:	10210000 	.word	0x10210000
 8000894:	50000800 	.word	0x50000800
 8000898:	10310000 	.word	0x10310000
 800089c:	50000400 	.word	0x50000400

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_MspInit+0x4c>)
 80008b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_MspInit+0x4c>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	641a      	str	r2, [r3, #64]	; 0x40
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_MspInit+0x4c>)
 80008cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x4c>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0549      	lsls	r1, r1, #21
 80008d4:	430a      	orrs	r2, r1
 80008d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_MspInit+0x4c>)
 80008da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	055b      	lsls	r3, r3, #21
 80008e0:	4013      	ands	r3, r2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008e6:	23c0      	movs	r3, #192	; 0xc0
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fa26 	bl	8000d3c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	2314      	movs	r3, #20
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	0018      	movs	r0, r3
 800090a:	2314      	movs	r3, #20
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f003 f8fa 	bl	8003b08 <memset>
  if(htim_base->Instance==TIM3)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <HAL_TIM_Base_MspInit+0x98>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d136      	bne.n	800098c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <HAL_TIM_Base_MspInit+0x9c>)
 8000920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_TIM_Base_MspInit+0x9c>)
 8000924:	2102      	movs	r1, #2
 8000926:	430a      	orrs	r2, r1
 8000928:	63da      	str	r2, [r3, #60]	; 0x3c
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_TIM_Base_MspInit+0x9c>)
 800092c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092e:	2202      	movs	r2, #2
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_TIM_Base_MspInit+0x9c>)
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_TIM_Base_MspInit+0x9c>)
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_TIM_Base_MspInit+0x9c>)
 8000944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800094e:	2114      	movs	r1, #20
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2240      	movs	r2, #64	; 0x40
 8000954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2202      	movs	r2, #2
 800095a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2201      	movs	r2, #1
 800096c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	187a      	adds	r2, r7, r1
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fad4 	bl	8000f24 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2010      	movs	r0, #16
 8000982:	f000 fa9d 	bl	8000ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000986:	2010      	movs	r0, #16
 8000988:	f000 faaf 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b00a      	add	sp, #40	; 0x28
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40000400 	.word	0x40000400
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08d      	sub	sp, #52	; 0x34
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	231c      	movs	r3, #28
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	0018      	movs	r0, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f003 f8aa 	bl	8003b08 <memset>
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_UART_MspInit+0x140>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d131      	bne.n	8000a22 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 80009c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c2:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0289      	lsls	r1, r1, #10
 80009c8:	430a      	orrs	r2, r1
 80009ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 80009ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	029b      	lsls	r3, r3, #10
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f2:	211c      	movs	r1, #28
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2201      	movs	r2, #1
 8000a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fa82 	bl	8000f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a20:	e058      	b.n	8000ad4 <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART3)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <HAL_UART_MspInit+0x148>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d153      	bne.n	8000ad4 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	02c9      	lsls	r1, r1, #11
 8000a36:	430a      	orrs	r2, r1
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	02db      	lsls	r3, r3, #11
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a4e:	2104      	movs	r1, #4
 8000a50:	430a      	orrs	r2, r1
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a66:	2102      	movs	r1, #2
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0x144>)
 8000a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a70:	2202      	movs	r2, #2
 8000a72:	4013      	ands	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a78:	211c      	movs	r1, #28
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2202      	movs	r2, #2
 8000a86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	000c      	movs	r4, r1
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_UART_MspInit+0x14c>)
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	0010      	movs	r0, r2
 8000aa4:	f000 fa3e 	bl	8000f24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2204      	movs	r2, #4
 8000aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_UART_MspInit+0x150>)
 8000acc:	0019      	movs	r1, r3
 8000ace:	0010      	movs	r0, r2
 8000ad0:	f000 fa28 	bl	8000f24 <HAL_GPIO_Init>
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b00d      	add	sp, #52	; 0x34
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40004800 	.word	0x40004800
 8000ae8:	50000800 	.word	0x50000800
 8000aec:	50000400 	.word	0x50000400

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f8d4 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_10)){
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <EXTI4_15_IRQHandler+0x44>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	4013      	ands	r3, r2
 8000b32:	d105      	bne.n	8000b40 <EXTI4_15_IRQHandler+0x1c>
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <EXTI4_15_IRQHandler+0x44>)
 8000b36:	691a      	ldr	r2, [r3, #16]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d005      	beq.n	8000b4c <EXTI4_15_IRQHandler+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000b40:	23a0      	movs	r3, #160	; 0xa0
 8000b42:	05db      	lsls	r3, r3, #23
 8000b44:	2110      	movs	r1, #16
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fb6d 	bl	8001226 <HAL_GPIO_TogglePin>
//		__NOP();
//	}


  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f000 fb85 	bl	800125c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b52:	2020      	movs	r0, #32
 8000b54:	f000 fb82 	bl	800125c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fb7d 	bl	800125c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021800 	.word	0x40021800

08000b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <TIM3_IRQHandler+0x14>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fa52 	bl	800201c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	200000b4 	.word	0x200000b4

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <SystemInit+0x14>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	0512      	lsls	r2, r2, #20
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ba0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ba2:	e003      	b.n	8000bac <LoopCopyDataInit>

08000ba4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ba6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ba8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000baa:	3104      	adds	r1, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <LoopForever+0xa>)
  ldr r3, =_edata
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000bb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bb4:	d3f6      	bcc.n	8000ba4 <CopyDataInit>
  ldr r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000bb8:	e002      	b.n	8000bc0 <LoopFillZerobss>

08000bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  str  r3, [r2]
 8000bbc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbe:	3204      	adds	r2, #4

08000bc0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <LoopForever+0x16>)
  cmp r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bc4:	d3f9      	bcc.n	8000bba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bc6:	f7ff ffdd 	bl	8000b84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bca:	f002 ff79 	bl	8003ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fc15 	bl	80003fc <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   r0, =_estack
 8000bd4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000bd8:	08003bc4 	.word	0x08003bc4
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000be4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000be8:	20000184 	.word	0x20000184

08000bec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x3c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Init+0x3c>)
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	0049      	lsls	r1, r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f810 	bl	8000c30 <HAL_InitTick>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e001      	b.n	8000c20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fe46 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <HAL_InitTick+0x88>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d02b      	beq.n	8000ca0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_InitTick+0x8c>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <HAL_InitTick+0x88>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	23fa      	movs	r3, #250	; 0xfa
 8000c54:	0098      	lsls	r0, r3, #2
 8000c56:	f7ff fa5b 	bl	8000110 <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0020      	movs	r0, r4
 8000c60:	f7ff fa56 	bl	8000110 <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 f94f 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d112      	bne.n	8000c96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d80a      	bhi.n	8000c8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f91e 	bl	8000ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_InitTick+0x90>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e00d      	b.n	8000ca8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e008      	b.n	8000ca8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c96:	230f      	movs	r3, #15
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e003      	b.n	8000ca8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b005      	add	sp, #20
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <HAL_IncTick+0x18>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <HAL_IncTick+0x1c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	18d2      	adds	r2, r2, r3
 8000cd2:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <HAL_IncTick+0x18>)
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000180 	.word	0x20000180
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000180 	.word	0x20000180

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff fff0 	bl	8000ce4 <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	d004      	beq.n	8000d1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_Delay+0x40>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	18d3      	adds	r3, r2, r3
 8000d1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	f7ff ffe1 	bl	8000ce4 <HAL_GetTick>
 8000d22:	0002      	movs	r2, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d8f7      	bhi.n	8000d1e <HAL_Delay+0x26>
  {
  }
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40010000 	.word	0x40010000
 8000d64:	fffff9ff 	.word	0xfffff9ff

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7a:	d809      	bhi.n	8000d90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	001a      	movs	r2, r3
 8000d82:	231f      	movs	r3, #31
 8000d84:	401a      	ands	r2, r3
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_EnableIRQ+0x30>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4091      	lsls	r1, r2
 8000d8c:	000a      	movs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
  }
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b7f      	cmp	r3, #127	; 0x7f
 8000db0:	d828      	bhi.n	8000e04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	33c0      	adds	r3, #192	; 0xc0
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	589b      	ldr	r3, [r3, r2]
 8000dc2:	1dfa      	adds	r2, r7, #7
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	2203      	movs	r2, #3
 8000dca:	400a      	ands	r2, r1
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	21ff      	movs	r1, #255	; 0xff
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	401a      	ands	r2, r3
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	2303      	movs	r3, #3
 8000dea:	4003      	ands	r3, r0
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e02:	e031      	b.n	8000e68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	400b      	ands	r3, r1
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3306      	adds	r3, #6
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1dfa      	adds	r2, r7, #7
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	0011      	movs	r1, r2
 8000e24:	2203      	movs	r2, #3
 8000e26:	400a      	ands	r2, r1
 8000e28:	00d2      	lsls	r2, r2, #3
 8000e2a:	21ff      	movs	r1, #255	; 0xff
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	401a      	ands	r2, r3
 8000e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	019b      	lsls	r3, r3, #6
 8000e3a:	22ff      	movs	r2, #255	; 0xff
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	2303      	movs	r3, #3
 8000e46:	4003      	ands	r3, r0
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001c      	movs	r4, r3
 8000e54:	230f      	movs	r3, #15
 8000e56:	4023      	ands	r3, r4
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	3306      	adds	r3, #6
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	18c3      	adds	r3, r0, r3
 8000e64:	3304      	adds	r3, #4
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b003      	add	sp, #12
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <SysTick_Config+0x40>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d901      	bls.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e010      	b.n	8000eb0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <SysTick_Config+0x44>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	3a01      	subs	r2, #1
 8000e94:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff ff7d 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SysTick_Config+0x44>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x44>)
 8000eaa:	2207      	movs	r2, #7
 8000eac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	00ffffff 	.word	0x00ffffff
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	210f      	movs	r1, #15
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	1c02      	adds	r2, r0, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ff33 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ffaf 	bl	8000e78 <SysTick_Config>
 8000f1a:	0003      	movs	r3, r0
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e147      	b.n	80011c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	000a      	movs	r2, r1
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d100      	bne.n	8000f4c <HAL_GPIO_Init+0x28>
 8000f4a:	e138      	b.n	80011be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x38>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b12      	cmp	r3, #18
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	58d3      	ldr	r3, [r2, r3]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	4013      	ands	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2107      	movs	r1, #7
 8000f88:	400b      	ands	r3, r1
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	6939      	ldr	r1, [r7, #16]
 8000fa2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	0013      	movs	r3, r2
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d00b      	beq.n	8000ff8 <HAL_GPIO_Init+0xd4>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fec:	2b11      	cmp	r3, #17
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b12      	cmp	r3, #18
 8000ff6:	d130      	bne.n	800105a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102e:	2201      	movs	r2, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	2201      	movs	r2, #1
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	43da      	mvns	r2, r3
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	055b      	lsls	r3, r3, #21
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_GPIO_Init+0x174>
 8001096:	e092      	b.n	80011be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001098:	4a50      	ldr	r2, [pc, #320]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3318      	adds	r3, #24
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	589b      	ldr	r3, [r3, r2]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	220f      	movs	r2, #15
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	43da      	mvns	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x1ca>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a45      	ldr	r2, [pc, #276]	; (80011e0 <HAL_GPIO_Init+0x2bc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x1c6>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a44      	ldr	r2, [pc, #272]	; (80011e4 <HAL_GPIO_Init+0x2c0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x1c2>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a43      	ldr	r2, [pc, #268]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x1be>
 80010de:	2303      	movs	r3, #3
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x1cc>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x1cc>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x1cc>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x1cc>
 80010ee:	2300      	movs	r3, #0
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	2103      	movs	r1, #3
 80010f4:	400a      	ands	r2, r1
 80010f6:	00d2      	lsls	r2, r2, #3
 80010f8:	4093      	lsls	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001100:	4936      	ldr	r1, [pc, #216]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3318      	adds	r3, #24
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800110e:	4a33      	ldr	r2, [pc, #204]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	58d3      	ldr	r3, [r2, r3]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43da      	mvns	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	025b      	lsls	r3, r3, #9
 8001128:	4013      	ands	r3, r2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001134:	4929      	ldr	r1, [pc, #164]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 800113e:	2384      	movs	r3, #132	; 0x84
 8001140:	58d3      	ldr	r3, [r2, r3]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	029b      	lsls	r3, r3, #10
 8001156:	4013      	ands	r3, r2
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001162:	491e      	ldr	r1, [pc, #120]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 8001164:	2284      	movs	r2, #132	; 0x84
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	035b      	lsls	r3, r3, #13
 8001182:	4013      	ands	r3, r2
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43da      	mvns	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	039b      	lsls	r3, r3, #14
 80011ac:	4013      	ands	r3, r2
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	40da      	lsrs	r2, r3
 80011cc:	1e13      	subs	r3, r2, #0
 80011ce:	d000      	beq.n	80011d2 <HAL_GPIO_Init+0x2ae>
 80011d0:	e6b0      	b.n	8000f34 <HAL_GPIO_Init+0x10>
  }
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b006      	add	sp, #24
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40021800 	.word	0x40021800
 80011e0:	50000400 	.word	0x50000400
 80011e4:	50000800 	.word	0x50000800
 80011e8:	50000c00 	.word	0x50000c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	0008      	movs	r0, r1
 80011f6:	0011      	movs	r1, r2
 80011f8:	1cbb      	adds	r3, r7, #2
 80011fa:	1c02      	adds	r2, r0, #0
 80011fc:	801a      	strh	r2, [r3, #0]
 80011fe:	1c7b      	adds	r3, r7, #1
 8001200:	1c0a      	adds	r2, r1, #0
 8001202:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001204:	1c7b      	adds	r3, r7, #1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d004      	beq.n	8001216 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001216:	1cbb      	adds	r3, r7, #2
 8001218:	881a      	ldrh	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	000a      	movs	r2, r1
 8001230:	1cbb      	adds	r3, r7, #2
 8001232:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	1cba      	adds	r2, r7, #2
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	4013      	ands	r3, r2
 800123e:	d004      	beq.n	800124a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001240:	1cbb      	adds	r3, r7, #2
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_TogglePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124a:	1cbb      	adds	r3, r7, #2
 800124c:	881a      	ldrh	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	0002      	movs	r2, r0
 8001264:	1dbb      	adds	r3, r7, #6
 8001266:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	1dba      	adds	r2, r7, #6
 800126e:	8812      	ldrh	r2, [r2, #0]
 8001270:	4013      	ands	r3, r2
 8001272:	d008      	beq.n	8001286 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001276:	1dba      	adds	r2, r7, #6
 8001278:	8812      	ldrh	r2, [r2, #0]
 800127a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	0018      	movs	r0, r3
 8001282:	f000 f815 	bl	80012b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	1dba      	adds	r2, r7, #6
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	4013      	ands	r3, r2
 8001290:	d008      	beq.n	80012a4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001294:	1dba      	adds	r2, r7, #6
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800129a:	1dbb      	adds	r3, r7, #6
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 f810 	bl	80012c4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021800 	.word	0x40021800

080012b0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	0002      	movs	r2, r0
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	1dbb      	adds	r3, r7, #6
 80012ce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d11f      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	0013      	movs	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	189b      	adds	r3, r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4912      	ldr	r1, [pc, #72]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800130a:	0018      	movs	r0, r3
 800130c:	f7fe ff00 	bl	8000110 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001316:	e008      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3b01      	subs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e001      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e009      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	401a      	ands	r2, r3
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	429a      	cmp	r2, r3
 800133a:	d0ed      	beq.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b004      	add	sp, #16
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	40007000 	.word	0x40007000
 800134c:	fffff9ff 	.word	0xfffff9ff
 8001350:	20000000 	.word	0x20000000
 8001354:	000f4240 	.word	0x000f4240

08001358 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <LL_RCC_GetAPB1Prescaler+0x14>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	23e0      	movs	r3, #224	; 0xe0
 8001362:	01db      	lsls	r3, r3, #7
 8001364:	4013      	ands	r3, r2
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e2f9      	b.n	8001976 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2201      	movs	r2, #1
 8001388:	4013      	ands	r3, r2
 800138a:	d100      	bne.n	800138e <HAL_RCC_OscConfig+0x1e>
 800138c:	e07c      	b.n	8001488 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138e:	4bc3      	ldr	r3, [pc, #780]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2238      	movs	r2, #56	; 0x38
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001398:	4bc0      	ldr	r3, [pc, #768]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2203      	movs	r2, #3
 800139e:	4013      	ands	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d102      	bne.n	80013ae <HAL_RCC_OscConfig+0x3e>
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d002      	beq.n	80013b4 <HAL_RCC_OscConfig+0x44>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d10b      	bne.n	80013cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	4bb9      	ldr	r3, [pc, #740]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d062      	beq.n	8001486 <HAL_RCC_OscConfig+0x116>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d15e      	bne.n	8001486 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e2d4      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x78>
 80013d8:	4bb0      	ldr	r3, [pc, #704]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4baf      	ldr	r3, [pc, #700]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	0249      	lsls	r1, r1, #9
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e020      	b.n	800142a <HAL_RCC_OscConfig+0xba>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	23a0      	movs	r3, #160	; 0xa0
 80013ee:	02db      	lsls	r3, r3, #11
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d10e      	bne.n	8001412 <HAL_RCC_OscConfig+0xa2>
 80013f4:	4ba9      	ldr	r3, [pc, #676]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4ba8      	ldr	r3, [pc, #672]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	02c9      	lsls	r1, r1, #11
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4ba6      	ldr	r3, [pc, #664]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4ba5      	ldr	r3, [pc, #660]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0249      	lsls	r1, r1, #9
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e00b      	b.n	800142a <HAL_RCC_OscConfig+0xba>
 8001412:	4ba2      	ldr	r3, [pc, #648]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4ba1      	ldr	r3, [pc, #644]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001418:	49a1      	ldr	r1, [pc, #644]	; (80016a0 <HAL_RCC_OscConfig+0x330>)
 800141a:	400a      	ands	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	4b9f      	ldr	r3, [pc, #636]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b9e      	ldr	r3, [pc, #632]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001424:	499f      	ldr	r1, [pc, #636]	; (80016a4 <HAL_RCC_OscConfig+0x334>)
 8001426:	400a      	ands	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d014      	beq.n	800145c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fc57 	bl	8000ce4 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc52 	bl	8000ce4 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e293      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4b93      	ldr	r3, [pc, #588]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	029b      	lsls	r3, r3, #10
 8001456:	4013      	ands	r3, r2
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xcc>
 800145a:	e015      	b.n	8001488 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc42 	bl	8000ce4 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001466:	f7ff fc3d 	bl	8000ce4 <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	; 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e27e      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001478:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0xf6>
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d100      	bne.n	8001494 <HAL_RCC_OscConfig+0x124>
 8001492:	e099      	b.n	80015c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001494:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2238      	movs	r2, #56	; 0x38
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800149e:	4b7f      	ldr	r3, [pc, #508]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2203      	movs	r2, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d102      	bne.n	80014b4 <HAL_RCC_OscConfig+0x144>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d002      	beq.n	80014ba <HAL_RCC_OscConfig+0x14a>
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d135      	bne.n	8001526 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ba:	4b78      	ldr	r3, [pc, #480]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4013      	ands	r3, r2
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x162>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e251      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b72      	ldr	r3, [pc, #456]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a74      	ldr	r2, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014d8:	4013      	ands	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	021a      	lsls	r2, r3, #8
 80014e2:	4b6e      	ldr	r3, [pc, #440]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d112      	bne.n	8001514 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014ee:	4b6b      	ldr	r3, [pc, #428]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0x33c>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0adb      	lsrs	r3, r3, #11
 8001508:	2207      	movs	r2, #7
 800150a:	4013      	ands	r3, r2
 800150c:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x340>)
 800150e:	40da      	lsrs	r2, r3
 8001510:	4b68      	ldr	r3, [pc, #416]	; (80016b4 <HAL_RCC_OscConfig+0x344>)
 8001512:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x348>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fb89 	bl	8000c30 <HAL_InitTick>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d051      	beq.n	80015c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e227      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d030      	beq.n	8001590 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x33c>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001542:	4b56      	ldr	r3, [pc, #344]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b55      	ldr	r3, [pc, #340]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0049      	lsls	r1, r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fbc8 	bl	8000ce4 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fbc3 	bl	8000ce4 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e204      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4013      	ands	r3, r2
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800157e:	4013      	ands	r3, r2
 8001580:	0019      	movs	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	021a      	lsls	r2, r3, #8
 8001588:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e01b      	b.n	80015c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001596:	4949      	ldr	r1, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x34c>)
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fba2 	bl	8000ce4 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fb9d 	bl	8000ce4 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1de      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4013      	ands	r3, r2
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x236>
 80015c4:	e000      	b.n	80015c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2208      	movs	r2, #8
 80015ce:	4013      	ands	r3, r2
 80015d0:	d047      	beq.n	8001662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2238      	movs	r2, #56	; 0x38
 80015d8:	4013      	ands	r3, r2
 80015da:	2b18      	cmp	r3, #24
 80015dc:	d10a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d03c      	beq.n	8001662 <HAL_RCC_OscConfig+0x2f2>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d138      	bne.n	8001662 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e1c0      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d019      	beq.n	8001630 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 80015fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fb6c 	bl	8000ce4 <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fb67 	bl	8000ce4 <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1a8      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001628:	2202      	movs	r2, #2
 800162a:	4013      	ands	r3, r2
 800162c:	d0f1      	beq.n	8001612 <HAL_RCC_OscConfig+0x2a2>
 800162e:	e018      	b.n	8001662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001632:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001636:	2101      	movs	r1, #1
 8001638:	438a      	bics	r2, r1
 800163a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb52 	bl	8000ce4 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fb4d 	bl	8000ce4 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e18e      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	2202      	movs	r2, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d1f1      	bne.n	8001646 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2204      	movs	r2, #4
 8001668:	4013      	ands	r3, r2
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x2fe>
 800166c:	e0c6      	b.n	80017fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	231f      	movs	r3, #31
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2238      	movs	r2, #56	; 0x38
 800167c:	4013      	ands	r3, r2
 800167e:	2b20      	cmp	r3, #32
 8001680:	d11e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x32c>)
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x31e>
 800168c:	e0b6      	b.n	80017fc <HAL_RCC_OscConfig+0x48c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d000      	beq.n	8001698 <HAL_RCC_OscConfig+0x328>
 8001696:	e0b1      	b.n	80017fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e16c      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
 800169c:	40021000 	.word	0x40021000
 80016a0:	fffeffff 	.word	0xfffeffff
 80016a4:	fffbffff 	.word	0xfffbffff
 80016a8:	ffff80ff 	.word	0xffff80ff
 80016ac:	ffffc7ff 	.word	0xffffc7ff
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004
 80016bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016c0:	4baf      	ldr	r3, [pc, #700]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80016c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	055b      	lsls	r3, r3, #21
 80016c8:	4013      	ands	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x360>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x362>
 80016d0:	2300      	movs	r3, #0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d011      	beq.n	80016fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4baa      	ldr	r3, [pc, #680]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80016d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016da:	4ba9      	ldr	r3, [pc, #676]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0549      	lsls	r1, r1, #21
 80016e0:	430a      	orrs	r2, r1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016e4:	4ba6      	ldr	r3, [pc, #664]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80016e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016f2:	231f      	movs	r3, #31
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4ba2      	ldr	r3, [pc, #648]	; (8001984 <HAL_RCC_OscConfig+0x614>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4013      	ands	r3, r2
 8001704:	d11a      	bne.n	800173c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001706:	4b9f      	ldr	r3, [pc, #636]	; (8001984 <HAL_RCC_OscConfig+0x614>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b9e      	ldr	r3, [pc, #632]	; (8001984 <HAL_RCC_OscConfig+0x614>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0049      	lsls	r1, r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001714:	f7ff fae6 	bl	8000ce4 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff fae1 	bl	8000ce4 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e122      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	4b94      	ldr	r3, [pc, #592]	; (8001984 <HAL_RCC_OscConfig+0x614>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4013      	ands	r3, r2
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x3e2>
 8001744:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001748:	4b8d      	ldr	r3, [pc, #564]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 800174a:	2101      	movs	r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x41c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x404>
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 800175c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001760:	2104      	movs	r1, #4
 8001762:	430a      	orrs	r2, r1
 8001764:	65da      	str	r2, [r3, #92]	; 0x5c
 8001766:	4b86      	ldr	r3, [pc, #536]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 800176c:	2101      	movs	r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	65da      	str	r2, [r3, #92]	; 0x5c
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0x41c>
 8001774:	4b82      	ldr	r3, [pc, #520]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001778:	4b81      	ldr	r3, [pc, #516]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 800177a:	2101      	movs	r1, #1
 800177c:	438a      	bics	r2, r1
 800177e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001780:	4b7f      	ldr	r3, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001782:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001784:	4b7e      	ldr	r3, [pc, #504]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001786:	2104      	movs	r1, #4
 8001788:	438a      	bics	r2, r1
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d014      	beq.n	80017be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff faa6 	bl	8000ce4 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff faa1 	bl	8000ce4 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4a77      	ldr	r2, [pc, #476]	; (8001988 <HAL_RCC_OscConfig+0x618>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0e1      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	4b73      	ldr	r3, [pc, #460]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x42e>
 80017bc:	e013      	b.n	80017e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff fa91 	bl	8000ce4 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c6:	e009      	b.n	80017dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff fa8c 	bl	8000ce4 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	4a6d      	ldr	r2, [pc, #436]	; (8001988 <HAL_RCC_OscConfig+0x618>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0cc      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017e6:	231f      	movs	r3, #31
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b63      	ldr	r3, [pc, #396]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80017f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017f4:	4b62      	ldr	r3, [pc, #392]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80017f6:	4965      	ldr	r1, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x61c>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <HAL_RCC_OscConfig+0x496>
 8001804:	e0b6      	b.n	8001974 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001806:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2238      	movs	r2, #56	; 0x38
 800180c:	4013      	ands	r3, r2
 800180e:	2b10      	cmp	r3, #16
 8001810:	d100      	bne.n	8001814 <HAL_RCC_OscConfig+0x4a4>
 8001812:	e07e      	b.n	8001912 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d153      	bne.n	80018c4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001822:	495b      	ldr	r1, [pc, #364]	; (8001990 <HAL_RCC_OscConfig+0x620>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fa5c 	bl	8000ce4 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fa57 	bl	8000ce4 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e098      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	049b      	lsls	r3, r3, #18
 800184c:	4013      	ands	r3, r2
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <HAL_RCC_OscConfig+0x624>)
 8001856:	4013      	ands	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	431a      	orrs	r2, r3
 8001878:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 800187a:	430a      	orrs	r2, r1
 800187c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187e:	4b40      	ldr	r3, [pc, #256]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0449      	lsls	r1, r1, #17
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800188c:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	0549      	lsls	r1, r1, #21
 8001896:	430a      	orrs	r2, r1
 8001898:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fa23 	bl	8000ce4 <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff fa1e 	bl	8000ce4 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e05f      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	049b      	lsls	r3, r3, #18
 80018be:	4013      	ands	r3, r2
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x534>
 80018c2:	e057      	b.n	8001974 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80018ca:	4931      	ldr	r1, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x620>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80018d6:	2103      	movs	r1, #3
 80018d8:	438a      	bics	r2, r1
 80018da:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b27      	ldr	r3, [pc, #156]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 80018e2:	492d      	ldr	r1, [pc, #180]	; (8001998 <HAL_RCC_OscConfig+0x628>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f9fc 	bl	8000ce4 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff f9f7 	bl	8000ce4 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e038      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	049b      	lsls	r3, r3, #18
 800190c:	4013      	ands	r3, r2
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x582>
 8001910:	e030      	b.n	8001974 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e02b      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_RCC_OscConfig+0x610>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2203      	movs	r2, #3
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	429a      	cmp	r2, r3
 8001930:	d11e      	bne.n	8001970 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2270      	movs	r2, #112	; 0x70
 8001936:	401a      	ands	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d117      	bne.n	8001970 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	23fe      	movs	r3, #254	; 0xfe
 8001944:	01db      	lsls	r3, r3, #7
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d10e      	bne.n	8001970 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	23f8      	movs	r3, #248	; 0xf8
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	401a      	ands	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	0f5b      	lsrs	r3, r3, #29
 8001966:	075a      	lsls	r2, r3, #29
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b008      	add	sp, #32
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	40021000 	.word	0x40021000
 8001984:	40007000 	.word	0x40007000
 8001988:	00001388 	.word	0x00001388
 800198c:	efffffff 	.word	0xefffffff
 8001990:	feffffff 	.word	0xfeffffff
 8001994:	1fc1808c 	.word	0x1fc1808c
 8001998:	effeffff 	.word	0xeffeffff

0800199c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0e9      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2207      	movs	r2, #7
 80019b6:	4013      	ands	r3, r2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d91e      	bls.n	80019fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2207      	movs	r2, #7
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d0:	f7ff f988 	bl	8000ce4 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f983 	bl	8000ce4 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a6a      	ldr	r2, [pc, #424]	; (8001b90 <HAL_RCC_ClockConfig+0x1f4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0ca      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2207      	movs	r2, #7
 80019f4:	4013      	ands	r3, r2
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d015      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d006      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a10:	4b60      	ldr	r3, [pc, #384]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	21e0      	movs	r1, #224	; 0xe0
 8001a18:	01c9      	lsls	r1, r1, #7
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4a5d      	ldr	r2, [pc, #372]	; (8001b98 <HAL_RCC_ClockConfig+0x1fc>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d057      	beq.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d12b      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e097      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	049b      	lsls	r3, r3, #18
 8001a64:	4013      	ands	r3, r2
 8001a66:	d11f      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e08b      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a74:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d113      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e07f      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8c:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e074      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e06d      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2207      	movs	r2, #7
 8001aae:	4393      	bics	r3, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001abc:	f7ff f912 	bl	8000ce4 <HAL_GetTick>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac4:	e009      	b.n	8001ada <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac6:	f7ff f90d 	bl	8000ce4 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <HAL_RCC_ClockConfig+0x1f4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e054      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2238      	movs	r2, #56	; 0x38
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1ec      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2207      	movs	r2, #7
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d21e      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2207      	movs	r2, #7
 8001b00:	4393      	bics	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff f8ea 	bl	8000ce4 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7ff f8e5 	bl	8000ce4 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <HAL_RCC_ClockConfig+0x1f4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e02c      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4013      	ands	r3, r2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1ee      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <HAL_RCC_ClockConfig+0x200>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b56:	f000 f829 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b5a:	0001      	movs	r1, r0
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	220f      	movs	r2, #15
 8001b64:	401a      	ands	r2, r3
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_RCC_ClockConfig+0x204>)
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	58d3      	ldr	r3, [r2, r3]
 8001b6c:	221f      	movs	r2, #31
 8001b6e:	4013      	ands	r3, r2
 8001b70:	000a      	movs	r2, r1
 8001b72:	40da      	lsrs	r2, r3
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x208>)
 8001b76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCC_ClockConfig+0x20c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff f857 	bl	8000c30 <HAL_InitTick>
 8001b82:	0003      	movs	r3, r0
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b004      	add	sp, #16
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	00001388 	.word	0x00001388
 8001b94:	40021000 	.word	0x40021000
 8001b98:	fffff0ff 	.word	0xfffff0ff
 8001b9c:	ffff8fff 	.word	0xffff8fff
 8001ba0:	08003b5c 	.word	0x08003b5c
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2238      	movs	r2, #56	; 0x38
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d10f      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0adb      	lsrs	r3, r3, #11
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	4835      	ldr	r0, [pc, #212]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bd2:	f7fe fa9d 	bl	8000110 <__udivsi3>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e05d      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2238      	movs	r2, #56	; 0x38
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_RCC_GetSysClockFreq+0x100>)
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	e054      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2238      	movs	r2, #56	; 0x38
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d138      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	4824      	ldr	r0, [pc, #144]	; (8001cac <HAL_RCC_GetSysClockFreq+0x100>)
 8001c1c:	f7fe fa78 	bl	8000110 <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	0019      	movs	r1, r3
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	227f      	movs	r2, #127	; 0x7f
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	434b      	muls	r3, r1
 8001c30:	617b      	str	r3, [r7, #20]
        break;
 8001c32:	e00d      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	481c      	ldr	r0, [pc, #112]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c38:	f7fe fa6a 	bl	8000110 <__udivsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	227f      	movs	r2, #127	; 0x7f
 8001c48:	4013      	ands	r3, r2
 8001c4a:	434b      	muls	r3, r1
 8001c4c:	617b      	str	r3, [r7, #20]
        break;
 8001c4e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0f5b      	lsrs	r3, r3, #29
 8001c56:	2207      	movs	r2, #7
 8001c58:	4013      	ands	r3, r2
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	6978      	ldr	r0, [r7, #20]
 8001c62:	f7fe fa55 	bl	8000110 <__udivsi3>
 8001c66:	0003      	movs	r3, r0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	e015      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2238      	movs	r2, #56	; 0x38
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d103      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2238      	movs	r2, #56	; 0x38
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b18      	cmp	r3, #24
 8001c8a:	d103      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c8c:	23fa      	movs	r3, #250	; 0xfa
 8001c8e:	01db      	lsls	r3, r3, #7
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	e001      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c98:	693b      	ldr	r3, [r7, #16]
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b006      	add	sp, #24
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200

08001cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cc8:	f7ff fff2 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001ccc:	0004      	movs	r4, r0
 8001cce:	f7ff fb43 	bl	8001358 <LL_RCC_GetAPB1Prescaler>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	0b1a      	lsrs	r2, r3, #12
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	58d3      	ldr	r3, [r2, r3]
 8001cdc:	221f      	movs	r2, #31
 8001cde:	4013      	ands	r3, r2
 8001ce0:	40dc      	lsrs	r4, r3
 8001ce2:	0023      	movs	r3, r4
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	08003b9c 	.word	0x08003b9c

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cf8:	2313      	movs	r3, #19
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d00:	2312      	movs	r3, #18
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	029b      	lsls	r3, r3, #10
 8001d10:	4013      	ands	r3, r2
 8001d12:	d100      	bne.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d14:	e0a4      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d16:	2311      	movs	r3, #17
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	055b      	lsls	r3, r3, #21
 8001d26:	4013      	ands	r3, r2
 8001d28:	d111      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d2e:	4b83      	ldr	r3, [pc, #524]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	0549      	lsls	r1, r1, #21
 8001d34:	430a      	orrs	r2, r1
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d38:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	055b      	lsls	r3, r3, #21
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d46:	2311      	movs	r3, #17
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4e:	4b7c      	ldr	r3, [pc, #496]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	0049      	lsls	r1, r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe ffc2 	bl	8000ce4 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d64:	e00b      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7fe ffbd 	bl	8000ce4 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d904      	bls.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001d74:	2313      	movs	r3, #19
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
        break;
 8001d7c:	e005      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d0ed      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001d8a:	2313      	movs	r3, #19
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d154      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d94:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d98:	23c0      	movs	r3, #192	; 0xc0
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d019      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d014      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	4a63      	ldr	r2, [pc, #396]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dba:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0249      	lsls	r1, r1, #9
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dcc:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dce:	495e      	ldr	r1, [pc, #376]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d016      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe ff7f 	bl	8000ce4 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dea:	e00c      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7fe ff7a 	bl	8000ce4 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4a55      	ldr	r2, [pc, #340]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d904      	bls.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001dfc:	2313      	movs	r3, #19
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2203      	movs	r2, #3
 8001e02:	701a      	strb	r2, [r3, #0]
            break;
 8001e04:	e004      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e06:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d0ed      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001e10:	2313      	movs	r3, #19
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	4a49      	ldr	r2, [pc, #292]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e2e:	e00c      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e30:	2312      	movs	r3, #18
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2213      	movs	r2, #19
 8001e36:	18ba      	adds	r2, r7, r2
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e005      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2213      	movs	r2, #19
 8001e44:	18ba      	adds	r2, r7, r2
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e4a:	2311      	movs	r3, #17
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e5a:	493d      	ldr	r1, [pc, #244]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4393      	bics	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2202      	movs	r2, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	220c      	movs	r2, #12
 8001e8e:	4393      	bics	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	4a2a      	ldr	r2, [pc, #168]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	01db      	lsls	r3, r3, #7
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d015      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	0899      	lsrs	r1, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	05db      	lsls	r3, r3, #23
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	0249      	lsls	r1, r1, #9
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4013      	ands	r3, r2
 8001efc:	d016      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	01db      	lsls	r3, r3, #7
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0249      	lsls	r1, r1, #9
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001f2c:	2312      	movs	r3, #18
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	781b      	ldrb	r3, [r3, #0]
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b006      	add	sp, #24
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	fffffcff 	.word	0xfffffcff
 8001f48:	fffeffff 	.word	0xfffeffff
 8001f4c:	00001388 	.word	0x00001388
 8001f50:	efffffff 	.word	0xefffffff
 8001f54:	ffffcfff 	.word	0xffffcfff
 8001f58:	ffff3fff 	.word	0xffff3fff

08001f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e01e      	b.n	8001fac <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223d      	movs	r2, #61	; 0x3d
 8001f72:	5c9b      	ldrb	r3, [r3, r2]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	223c      	movs	r2, #60	; 0x3c
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7fe fcb9 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	223d      	movs	r2, #61	; 0x3d
 8001f8e:	2102      	movs	r1, #2
 8001f90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	f000 faf5 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	223d      	movs	r2, #61	; 0x3d
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e01e      	b.n	8002004 <HAL_TIM_IC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223d      	movs	r2, #61	; 0x3d
 8001fca:	5c9b      	ldrb	r3, [r3, r2]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	223c      	movs	r2, #60	; 0x3c
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f815 	bl	800200c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	223d      	movs	r2, #61	; 0x3d
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	f000 fac9 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223d      	movs	r2, #61	; 0x3d
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d124      	bne.n	800207c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d11d      	bne.n	800207c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2203      	movs	r2, #3
 8002046:	4252      	negs	r2, r2
 8002048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2203      	movs	r2, #3
 8002058:	4013      	ands	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 fa7c 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8002064:	e007      	b.n	8002076 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 fa6f 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 fa7b 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2204      	movs	r2, #4
 8002084:	4013      	ands	r3, r2
 8002086:	2b04      	cmp	r3, #4
 8002088:	d125      	bne.n	80020d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2204      	movs	r2, #4
 8002092:	4013      	ands	r3, r2
 8002094:	2b04      	cmp	r3, #4
 8002096:	d11e      	bne.n	80020d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2205      	movs	r2, #5
 800209e:	4252      	negs	r2, r2
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 fa4f 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 80020be:	e007      	b.n	80020d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fa42 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fa4e 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2208      	movs	r2, #8
 80020de:	4013      	ands	r3, r2
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d124      	bne.n	800212e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2208      	movs	r2, #8
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d11d      	bne.n	800212e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2209      	movs	r2, #9
 80020f8:	4252      	negs	r2, r2
 80020fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2204      	movs	r2, #4
 8002100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2203      	movs	r2, #3
 800210a:	4013      	ands	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 fa23 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8002116:	e007      	b.n	8002128 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 fa16 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fa22 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2210      	movs	r2, #16
 8002136:	4013      	ands	r3, r2
 8002138:	2b10      	cmp	r3, #16
 800213a:	d125      	bne.n	8002188 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2210      	movs	r2, #16
 8002144:	4013      	ands	r3, r2
 8002146:	2b10      	cmp	r3, #16
 8002148:	d11e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2211      	movs	r2, #17
 8002150:	4252      	negs	r2, r2
 8002152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2208      	movs	r2, #8
 8002158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4013      	ands	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f9f6 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8002170:	e007      	b.n	8002182 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f9e9 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 f9f5 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2201      	movs	r2, #1
 8002190:	4013      	ands	r3, r2
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10f      	bne.n	80021b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d108      	bne.n	80021b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2202      	movs	r2, #2
 80021aa:	4252      	negs	r2, r2
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 f9c3 	bl	800253c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	4013      	ands	r3, r2
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d10f      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	d108      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2281      	movs	r2, #129	; 0x81
 80021d8:	4252      	negs	r2, r2
 80021da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 fc64 	bl	8002aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	401a      	ands	r2, r3
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d10e      	bne.n	8002216 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	4013      	ands	r3, r2
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d107      	bne.n	8002216 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_TIM_IRQHandler+0x260>)
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fc53 	bl	8002abc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2240      	movs	r2, #64	; 0x40
 800221e:	4013      	ands	r3, r2
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d10f      	bne.n	8002244 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	4013      	ands	r3, r2
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d108      	bne.n	8002244 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2241      	movs	r2, #65	; 0x41
 8002238:	4252      	negs	r2, r2
 800223a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f99c 	bl	800257c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2220      	movs	r2, #32
 800224c:	4013      	ands	r3, r2
 800224e:	2b20      	cmp	r3, #32
 8002250:	d10f      	bne.n	8002272 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	4013      	ands	r3, r2
 800225c:	2b20      	cmp	r3, #32
 800225e:	d108      	bne.n	8002272 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2221      	movs	r2, #33	; 0x21
 8002266:	4252      	negs	r2, r2
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 fc15 	bl	8002a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	fffffeff 	.word	0xfffffeff

08002280 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	223c      	movs	r2, #60	; 0x3c
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002296:	2302      	movs	r3, #2
 8002298:	e08a      	b.n	80023b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	223c      	movs	r2, #60	; 0x3c
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	223d      	movs	r2, #61	; 0x3d
 80022a6:	2102      	movs	r1, #2
 80022a8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11b      	bne.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f000 f9da 	bl	8002678 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	210c      	movs	r1, #12
 80022d0:	438a      	bics	r2, r1
 80022d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6999      	ldr	r1, [r3, #24]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	619a      	str	r2, [r3, #24]
 80022e6:	e05a      	b.n	800239e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d11c      	bne.n	8002328 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f000 fa41 	bl	8002784 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	492a      	ldr	r1, [pc, #168]	; (80023b8 <HAL_TIM_IC_ConfigChannel+0x138>)
 800230e:	400a      	ands	r2, r1
 8002310:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6999      	ldr	r1, [r3, #24]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	619a      	str	r2, [r3, #24]
 8002326:	e03a      	b.n	800239e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11b      	bne.n	8002366 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6819      	ldr	r1, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f000 fa95 	bl	800286c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	210c      	movs	r1, #12
 800234e:	438a      	bics	r2, r1
 8002350:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69d9      	ldr	r1, [r3, #28]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	61da      	str	r2, [r3, #28]
 8002364:	e01b      	b.n	800239e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6819      	ldr	r1, [r3, #0]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f000 fab9 	bl	80028ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <HAL_TIM_IC_ConfigChannel+0x138>)
 8002386:	400a      	ands	r2, r1
 8002388:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69d9      	ldr	r1, [r3, #28]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	223d      	movs	r2, #61	; 0x3d
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	223c      	movs	r2, #60	; 0x3c
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	fffff3ff 	.word	0xfffff3ff

080023bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	223c      	movs	r2, #60	; 0x3c
 80023ca:	5c9b      	ldrb	r3, [r3, r2]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_TIM_ConfigClockSource+0x18>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e0ab      	b.n	800252c <HAL_TIM_ConfigClockSource+0x170>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	223c      	movs	r2, #60	; 0x3c
 80023d8:	2101      	movs	r1, #1
 80023da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	223d      	movs	r2, #61	; 0x3d
 80023e0:	2102      	movs	r1, #2
 80023e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a51      	ldr	r2, [pc, #324]	; (8002534 <HAL_TIM_ConfigClockSource+0x178>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a50      	ldr	r2, [pc, #320]	; (8002538 <HAL_TIM_ConfigClockSource+0x17c>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d100      	bne.n	800240e <HAL_TIM_ConfigClockSource+0x52>
 800240c:	e06b      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0x12a>
 800240e:	d80e      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x72>
 8002410:	2b10      	cmp	r3, #16
 8002412:	d100      	bne.n	8002416 <HAL_TIM_ConfigClockSource+0x5a>
 8002414:	e077      	b.n	8002506 <HAL_TIM_ConfigClockSource+0x14a>
 8002416:	d803      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x64>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d100      	bne.n	800241e <HAL_TIM_ConfigClockSource+0x62>
 800241c:	e073      	b.n	8002506 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800241e:	e07c      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002420:	2b20      	cmp	r3, #32
 8002422:	d100      	bne.n	8002426 <HAL_TIM_ConfigClockSource+0x6a>
 8002424:	e06f      	b.n	8002506 <HAL_TIM_ConfigClockSource+0x14a>
 8002426:	2b30      	cmp	r3, #48	; 0x30
 8002428:	d100      	bne.n	800242c <HAL_TIM_ConfigClockSource+0x70>
 800242a:	e06c      	b.n	8002506 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800242c:	e075      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800242e:	2b70      	cmp	r3, #112	; 0x70
 8002430:	d00e      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0x94>
 8002432:	d804      	bhi.n	800243e <HAL_TIM_ConfigClockSource+0x82>
 8002434:	2b50      	cmp	r3, #80	; 0x50
 8002436:	d036      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0xea>
 8002438:	2b60      	cmp	r3, #96	; 0x60
 800243a:	d044      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800243c:	e06d      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0152      	lsls	r2, r2, #5
 8002442:	4293      	cmp	r3, r2
 8002444:	d068      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0x15c>
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0192      	lsls	r2, r2, #6
 800244a:	4293      	cmp	r3, r2
 800244c:	d017      	beq.n	800247e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800244e:	e064      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f000 faa6 	bl	80029b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2277      	movs	r2, #119	; 0x77
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
      break;
 800247c:	e04d      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f000 fa8f 	bl	80029b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	01c9      	lsls	r1, r1, #7
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
      break;
 80024a4:	e039      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	001a      	movs	r2, r3
 80024b4:	f000 f938 	bl	8002728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2150      	movs	r1, #80	; 0x50
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fa5a 	bl	8002978 <TIM_ITRx_SetConfig>
      break;
 80024c4:	e029      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	001a      	movs	r2, r3
 80024d4:	f000 f998 	bl	8002808 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2160      	movs	r1, #96	; 0x60
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 fa4a 	bl	8002978 <TIM_ITRx_SetConfig>
      break;
 80024e4:	e019      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	001a      	movs	r2, r3
 80024f4:	f000 f918 	bl	8002728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa3a 	bl	8002978 <TIM_ITRx_SetConfig>
      break;
 8002504:	e009      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0019      	movs	r1, r3
 8002510:	0010      	movs	r0, r2
 8002512:	f000 fa31 	bl	8002978 <TIM_ITRx_SetConfig>
      break;
 8002516:	e000      	b.n	800251a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002518:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	223d      	movs	r2, #61	; 0x3d
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	223c      	movs	r2, #60	; 0x3c
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bd80      	pop	{r7, pc}
 8002534:	ffceff88 	.word	0xffceff88
 8002538:	ffff00ff 	.word	0xffff00ff

0800253c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a2f      	ldr	r2, [pc, #188]	; (800265c <TIM_Base_SetConfig+0xd0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <TIM_Base_SetConfig+0x20>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <TIM_Base_SetConfig+0xd4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d108      	bne.n	80025be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2270      	movs	r2, #112	; 0x70
 80025b0:	4393      	bics	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <TIM_Base_SetConfig+0xd0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a25      	ldr	r2, [pc, #148]	; (8002660 <TIM_Base_SetConfig+0xd4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00f      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a24      	ldr	r2, [pc, #144]	; (8002664 <TIM_Base_SetConfig+0xd8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00b      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a23      	ldr	r2, [pc, #140]	; (8002668 <TIM_Base_SetConfig+0xdc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a22      	ldr	r2, [pc, #136]	; (800266c <TIM_Base_SetConfig+0xe0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d003      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a21      	ldr	r2, [pc, #132]	; (8002670 <TIM_Base_SetConfig+0xe4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d108      	bne.n	8002600 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <TIM_Base_SetConfig+0xe8>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	4393      	bics	r3, r2
 8002606:	001a      	movs	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <TIM_Base_SetConfig+0xd0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0xba>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <TIM_Base_SetConfig+0xdc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0xba>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a0c      	ldr	r2, [pc, #48]	; (800266c <TIM_Base_SetConfig+0xe0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0xba>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <TIM_Base_SetConfig+0xe4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d103      	bne.n	800264e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	615a      	str	r2, [r3, #20]
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b004      	add	sp, #16
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40002000 	.word	0x40002000
 8002668:	40014000 	.word	0x40014000
 800266c:	40014400 	.word	0x40014400
 8002670:	40014800 	.word	0x40014800
 8002674:	fffffcff 	.word	0xfffffcff

08002678 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2201      	movs	r2, #1
 800268c:	4393      	bics	r3, r2
 800268e:	001a      	movs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <TIM_TI1_SetConfig+0xa4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <TIM_TI1_SetConfig+0x40>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <TIM_TI1_SetConfig+0xa8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_TI1_SetConfig+0x40>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <TIM_TI1_SetConfig+0xac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <TIM_TI1_SetConfig+0x44>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <TIM_TI1_SetConfig+0x46>
 80026bc:	2300      	movs	r3, #0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2203      	movs	r2, #3
 80026c6:	4393      	bics	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e003      	b.n	80026dc <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	22f0      	movs	r2, #240	; 0xf0
 80026e0:	4393      	bics	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	22ff      	movs	r2, #255	; 0xff
 80026ea:	4013      	ands	r3, r2
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	220a      	movs	r2, #10
 80026f6:	4393      	bics	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	220a      	movs	r2, #10
 80026fe:	4013      	ands	r3, r2
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	621a      	str	r2, [r3, #32]
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b006      	add	sp, #24
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40000400 	.word	0x40000400
 8002724:	40014000 	.word	0x40014000

08002728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	2201      	movs	r2, #1
 8002740:	4393      	bics	r3, r2
 8002742:	001a      	movs	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	22f0      	movs	r2, #240	; 0xf0
 8002752:	4393      	bics	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	220a      	movs	r2, #10
 8002764:	4393      	bics	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	621a      	str	r2, [r3, #32]
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b006      	add	sp, #24
 8002782:	bd80      	pop	{r7, pc}

08002784 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	2210      	movs	r2, #16
 8002798:	4393      	bics	r3, r2
 800279a:	001a      	movs	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4a14      	ldr	r2, [pc, #80]	; (8002800 <TIM_TI2_SetConfig+0x7c>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a10      	ldr	r2, [pc, #64]	; (8002804 <TIM_TI2_SetConfig+0x80>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	031b      	lsls	r3, r3, #12
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	22a0      	movs	r2, #160	; 0xa0
 80027d8:	4393      	bics	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	22a0      	movs	r2, #160	; 0xa0
 80027e2:	4013      	ands	r3, r2
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	621a      	str	r2, [r3, #32]
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b006      	add	sp, #24
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	fffffcff 	.word	0xfffffcff
 8002804:	ffff0fff 	.word	0xffff0fff

08002808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	2210      	movs	r2, #16
 800281a:	4393      	bics	r3, r2
 800281c:	001a      	movs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <TIM_TI2_ConfigInputStage+0x60>)
 8002832:	4013      	ands	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	031b      	lsls	r3, r3, #12
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	22a0      	movs	r2, #160	; 0xa0
 8002844:	4393      	bics	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b006      	add	sp, #24
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	ffff0fff 	.word	0xffff0fff

0800286c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <TIM_TI3_SetConfig+0x78>)
 8002880:	401a      	ands	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2203      	movs	r2, #3
 8002896:	4393      	bics	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	22f0      	movs	r2, #240	; 0xf0
 80028a6:	4393      	bics	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	4013      	ands	r3, r2
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <TIM_TI3_SetConfig+0x7c>)
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	021a      	lsls	r2, r3, #8
 80028c4:	23a0      	movs	r3, #160	; 0xa0
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	621a      	str	r2, [r3, #32]
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b006      	add	sp, #24
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	fffffeff 	.word	0xfffffeff
 80028e8:	fffff5ff 	.word	0xfffff5ff

080028ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <TIM_TI4_SetConfig+0x7c>)
 8002900:	401a      	ands	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <TIM_TI4_SetConfig+0x80>)
 8002916:	4013      	ands	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <TIM_TI4_SetConfig+0x84>)
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	031b      	lsls	r3, r3, #12
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	0c1b      	lsrs	r3, r3, #16
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <TIM_TI4_SetConfig+0x88>)
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	031a      	lsls	r2, r3, #12
 8002946:	23a0      	movs	r3, #160	; 0xa0
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	4013      	ands	r3, r2
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b006      	add	sp, #24
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	ffffefff 	.word	0xffffefff
 800296c:	fffffcff 	.word	0xfffffcff
 8002970:	ffff0fff 	.word	0xffff0fff
 8002974:	ffff5fff 	.word	0xffff5fff

08002978 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <TIM_ITRx_SetConfig+0x34>)
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	2207      	movs	r2, #7
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	609a      	str	r2, [r3, #8]
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	ffcfff8f 	.word	0xffcfff8f

080029b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <TIM_ETR_SetConfig+0x3c>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	021a      	lsls	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	609a      	str	r2, [r3, #8]
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b006      	add	sp, #24
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	ffff00ff 	.word	0xffff00ff

080029f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223c      	movs	r2, #60	; 0x3c
 80029fe:	5c9b      	ldrb	r3, [r3, r2]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e040      	b.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	223c      	movs	r2, #60	; 0x3c
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	223d      	movs	r2, #61	; 0x3d
 8002a14:	2102      	movs	r1, #2
 8002a16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d108      	bne.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2270      	movs	r2, #112	; 0x70
 8002a48:	4393      	bics	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223d      	movs	r2, #61	; 0x3d
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	223c      	movs	r2, #60	; 0x3c
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	ff0fffff 	.word	0xff0fffff

08002a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e046      	b.n	8002b6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	589b      	ldr	r3, [r3, r2]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	227c      	movs	r2, #124	; 0x7c
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7fd ff52 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	2124      	movs	r1, #36	; 0x24
 8002afe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f8dc 	bl	8002cd0 <UART_SetConfig>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e024      	b.n	8002b6c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fd57 	bl	80035e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	490d      	ldr	r1, [pc, #52]	; (8002b74 <HAL_UART_Init+0xa8>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	212a      	movs	r1, #42	; 0x2a
 8002b4e:	438a      	bics	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f000 fdef 	bl	8003748 <UART_CheckIdleState>
 8002b6a:	0003      	movs	r3, r0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	ffffb7ff 	.word	0xffffb7ff

08002b78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	589b      	ldr	r3, [r3, r2]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d000      	beq.n	8002b94 <HAL_UART_Transmit+0x1c>
 8002b92:	e097      	b.n	8002cc4 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_UART_Transmit+0x2a>
 8002b9a:	1dbb      	adds	r3, r7, #6
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e08f      	b.n	8002cc6 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	015b      	lsls	r3, r3, #5
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d109      	bne.n	8002bc6 <HAL_UART_Transmit+0x4e>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d001      	beq.n	8002bc6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	227c      	movs	r2, #124	; 0x7c
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_UART_Transmit+0x5c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e078      	b.n	8002cc6 <HAL_UART_Transmit+0x14e>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	227c      	movs	r2, #124	; 0x7c
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2288      	movs	r2, #136	; 0x88
 8002be0:	2100      	movs	r1, #0
 8002be2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	2121      	movs	r1, #33	; 0x21
 8002bea:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe f87a 	bl	8000ce4 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1dba      	adds	r2, r7, #6
 8002bf8:	2154      	movs	r1, #84	; 0x54
 8002bfa:	8812      	ldrh	r2, [r2, #0]
 8002bfc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1dba      	adds	r2, r7, #6
 8002c02:	2156      	movs	r1, #86	; 0x56
 8002c04:	8812      	ldrh	r2, [r2, #0]
 8002c06:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	015b      	lsls	r3, r3, #5
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d108      	bne.n	8002c26 <HAL_UART_Transmit+0xae>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e003      	b.n	8002c2e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c2e:	e02c      	b.n	8002c8a <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	0013      	movs	r3, r2
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	f000 fdcd 	bl	80037dc <UART_WaitOnFlagUntilTimeout>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e03d      	b.n	8002cc6 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	001a      	movs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	05d2      	lsls	r2, r2, #23
 8002c5c:	0dd2      	lsrs	r2, r2, #23
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	3302      	adds	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e007      	b.n	8002c78 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2256      	movs	r2, #86	; 0x56
 8002c7c:	5a9b      	ldrh	r3, [r3, r2]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b299      	uxth	r1, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2256      	movs	r2, #86	; 0x56
 8002c88:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2256      	movs	r2, #86	; 0x56
 8002c8e:	5a9b      	ldrh	r3, [r3, r2]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1cc      	bne.n	8002c30 <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2140      	movs	r1, #64	; 0x40
 8002ca4:	f000 fd9a 	bl	80037dc <UART_WaitOnFlagUntilTimeout>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00a      	b.n	8002cc6 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	2120      	movs	r1, #32
 8002cb6:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	227c      	movs	r2, #124	; 0x7c
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b008      	add	sp, #32
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cdc:	231e      	movs	r3, #30
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4aba      	ldr	r2, [pc, #744]	; (8002ffc <UART_SetConfig+0x32c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4ab6      	ldr	r2, [pc, #728]	; (8003000 <UART_SetConfig+0x330>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4aad      	ldr	r2, [pc, #692]	; (8003004 <UART_SetConfig+0x334>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	220f      	movs	r2, #15
 8002d66:	4393      	bics	r3, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4aa3      	ldr	r2, [pc, #652]	; (8003008 <UART_SetConfig+0x338>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d125      	bne.n	8002dcc <UART_SetConfig+0xfc>
 8002d80:	4ba2      	ldr	r3, [pc, #648]	; (800300c <UART_SetConfig+0x33c>)
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	2203      	movs	r2, #3
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d00f      	beq.n	8002dac <UART_SetConfig+0xdc>
 8002d8c:	d304      	bcc.n	8002d98 <UART_SetConfig+0xc8>
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d007      	beq.n	8002da2 <UART_SetConfig+0xd2>
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d00f      	beq.n	8002db6 <UART_SetConfig+0xe6>
 8002d96:	e013      	b.n	8002dc0 <UART_SetConfig+0xf0>
 8002d98:	231f      	movs	r3, #31
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e05a      	b.n	8002e58 <UART_SetConfig+0x188>
 8002da2:	231f      	movs	r3, #31
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2202      	movs	r2, #2
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e055      	b.n	8002e58 <UART_SetConfig+0x188>
 8002dac:	231f      	movs	r3, #31
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2204      	movs	r2, #4
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e050      	b.n	8002e58 <UART_SetConfig+0x188>
 8002db6:	231f      	movs	r3, #31
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2208      	movs	r2, #8
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e04b      	b.n	8002e58 <UART_SetConfig+0x188>
 8002dc0:	231f      	movs	r3, #31
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	e045      	b.n	8002e58 <UART_SetConfig+0x188>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a8f      	ldr	r2, [pc, #572]	; (8003010 <UART_SetConfig+0x340>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d128      	bne.n	8002e28 <UART_SetConfig+0x158>
 8002dd6:	4b8d      	ldr	r3, [pc, #564]	; (800300c <UART_SetConfig+0x33c>)
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	220c      	movs	r2, #12
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d012      	beq.n	8002e08 <UART_SetConfig+0x138>
 8002de2:	d802      	bhi.n	8002dea <UART_SetConfig+0x11a>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <UART_SetConfig+0x124>
 8002de8:	e018      	b.n	8002e1c <UART_SetConfig+0x14c>
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d007      	beq.n	8002dfe <UART_SetConfig+0x12e>
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d00f      	beq.n	8002e12 <UART_SetConfig+0x142>
 8002df2:	e013      	b.n	8002e1c <UART_SetConfig+0x14c>
 8002df4:	231f      	movs	r3, #31
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e02c      	b.n	8002e58 <UART_SetConfig+0x188>
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2202      	movs	r2, #2
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	e027      	b.n	8002e58 <UART_SetConfig+0x188>
 8002e08:	231f      	movs	r3, #31
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e022      	b.n	8002e58 <UART_SetConfig+0x188>
 8002e12:	231f      	movs	r3, #31
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	2208      	movs	r2, #8
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e01d      	b.n	8002e58 <UART_SetConfig+0x188>
 8002e1c:	231f      	movs	r3, #31
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2210      	movs	r2, #16
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	e017      	b.n	8002e58 <UART_SetConfig+0x188>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a79      	ldr	r2, [pc, #484]	; (8003014 <UART_SetConfig+0x344>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d104      	bne.n	8002e3c <UART_SetConfig+0x16c>
 8002e32:	231f      	movs	r3, #31
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	e00d      	b.n	8002e58 <UART_SetConfig+0x188>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a75      	ldr	r2, [pc, #468]	; (8003018 <UART_SetConfig+0x348>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d104      	bne.n	8002e50 <UART_SetConfig+0x180>
 8002e46:	231f      	movs	r3, #31
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e003      	b.n	8002e58 <UART_SetConfig+0x188>
 8002e50:	231f      	movs	r3, #31
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2210      	movs	r2, #16
 8002e56:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d000      	beq.n	8002e66 <UART_SetConfig+0x196>
 8002e64:	e1de      	b.n	8003224 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8002e66:	231f      	movs	r3, #31
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d100      	bne.n	8002e72 <UART_SetConfig+0x1a2>
 8002e70:	e06c      	b.n	8002f4c <UART_SetConfig+0x27c>
 8002e72:	dc02      	bgt.n	8002e7a <UART_SetConfig+0x1aa>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <UART_SetConfig+0x1b8>
 8002e78:	e1ab      	b.n	80031d2 <UART_SetConfig+0x502>
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d100      	bne.n	8002e80 <UART_SetConfig+0x1b0>
 8002e7e:	e0e5      	b.n	800304c <UART_SetConfig+0x37c>
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d100      	bne.n	8002e86 <UART_SetConfig+0x1b6>
 8002e84:	e144      	b.n	8003110 <UART_SetConfig+0x440>
 8002e86:	e1a4      	b.n	80031d2 <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e88:	f7fe ff1c 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d044      	beq.n	8002f22 <UART_SetConfig+0x252>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d03e      	beq.n	8002f1e <UART_SetConfig+0x24e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d038      	beq.n	8002f1a <UART_SetConfig+0x24a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d032      	beq.n	8002f16 <UART_SetConfig+0x246>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d02c      	beq.n	8002f12 <UART_SetConfig+0x242>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d026      	beq.n	8002f0e <UART_SetConfig+0x23e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d020      	beq.n	8002f0a <UART_SetConfig+0x23a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	d01a      	beq.n	8002f06 <UART_SetConfig+0x236>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d014      	beq.n	8002f02 <UART_SetConfig+0x232>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	d00e      	beq.n	8002efe <UART_SetConfig+0x22e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b0a      	cmp	r3, #10
 8002ee6:	d008      	beq.n	8002efa <UART_SetConfig+0x22a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b0b      	cmp	r3, #11
 8002eee:	d102      	bne.n	8002ef6 <UART_SetConfig+0x226>
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	e016      	b.n	8002f24 <UART_SetConfig+0x254>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e014      	b.n	8002f24 <UART_SetConfig+0x254>
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	e012      	b.n	8002f24 <UART_SetConfig+0x254>
 8002efe:	2340      	movs	r3, #64	; 0x40
 8002f00:	e010      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f02:	2320      	movs	r3, #32
 8002f04:	e00e      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f06:	2310      	movs	r3, #16
 8002f08:	e00c      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f0a:	230c      	movs	r3, #12
 8002f0c:	e00a      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f0e:	230a      	movs	r3, #10
 8002f10:	e008      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f12:	2308      	movs	r3, #8
 8002f14:	e006      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f16:	2306      	movs	r3, #6
 8002f18:	e004      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	e002      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e000      	b.n	8002f24 <UART_SetConfig+0x254>
 8002f22:	2301      	movs	r3, #1
 8002f24:	0019      	movs	r1, r3
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7fd f8f2 	bl	8000110 <__udivsi3>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	005a      	lsls	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	18d2      	adds	r2, r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	0010      	movs	r0, r2
 8002f40:	f7fd f8e6 	bl	8000110 <__udivsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	617b      	str	r3, [r7, #20]
        break;
 8002f4a:	e147      	b.n	80031dc <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d043      	beq.n	8002fdc <UART_SetConfig+0x30c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d03d      	beq.n	8002fd8 <UART_SetConfig+0x308>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d037      	beq.n	8002fd4 <UART_SetConfig+0x304>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d031      	beq.n	8002fd0 <UART_SetConfig+0x300>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d02b      	beq.n	8002fcc <UART_SetConfig+0x2fc>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d025      	beq.n	8002fc8 <UART_SetConfig+0x2f8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d01f      	beq.n	8002fc4 <UART_SetConfig+0x2f4>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2b07      	cmp	r3, #7
 8002f8a:	d019      	beq.n	8002fc0 <UART_SetConfig+0x2f0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d013      	beq.n	8002fbc <UART_SetConfig+0x2ec>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d00d      	beq.n	8002fb8 <UART_SetConfig+0x2e8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2b0a      	cmp	r3, #10
 8002fa2:	d007      	beq.n	8002fb4 <UART_SetConfig+0x2e4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b0b      	cmp	r3, #11
 8002faa:	d101      	bne.n	8002fb0 <UART_SetConfig+0x2e0>
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <UART_SetConfig+0x34c>)
 8002fae:	e016      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <UART_SetConfig+0x350>)
 8002fb2:	e014      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <UART_SetConfig+0x354>)
 8002fb6:	e012      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <UART_SetConfig+0x358>)
 8002fba:	e010      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <UART_SetConfig+0x35c>)
 8002fbe:	e00e      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <UART_SetConfig+0x360>)
 8002fc2:	e00c      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <UART_SetConfig+0x364>)
 8002fc6:	e00a      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <UART_SetConfig+0x368>)
 8002fca:	e008      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <UART_SetConfig+0x36c>)
 8002fce:	e006      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <UART_SetConfig+0x370>)
 8002fd2:	e004      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <UART_SetConfig+0x374>)
 8002fd6:	e002      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <UART_SetConfig+0x378>)
 8002fda:	e000      	b.n	8002fde <UART_SetConfig+0x30e>
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <UART_SetConfig+0x350>)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6852      	ldr	r2, [r2, #4]
 8002fe2:	0852      	lsrs	r2, r2, #1
 8002fe4:	189a      	adds	r2, r3, r2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0019      	movs	r1, r3
 8002fec:	0010      	movs	r0, r2
 8002fee:	f7fd f88f 	bl	8000110 <__udivsi3>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	617b      	str	r3, [r7, #20]
        break;
 8002ff8:	e0f0      	b.n	80031dc <UART_SetConfig+0x50c>
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	cfff69f3 	.word	0xcfff69f3
 8003000:	ffffcfff 	.word	0xffffcfff
 8003004:	11fff4ff 	.word	0x11fff4ff
 8003008:	40013800 	.word	0x40013800
 800300c:	40021000 	.word	0x40021000
 8003010:	40004400 	.word	0x40004400
 8003014:	40004800 	.word	0x40004800
 8003018:	40004c00 	.word	0x40004c00
 800301c:	0001e848 	.word	0x0001e848
 8003020:	01e84800 	.word	0x01e84800
 8003024:	0003d090 	.word	0x0003d090
 8003028:	0007a120 	.word	0x0007a120
 800302c:	000f4240 	.word	0x000f4240
 8003030:	001e8480 	.word	0x001e8480
 8003034:	0028b0aa 	.word	0x0028b0aa
 8003038:	0030d400 	.word	0x0030d400
 800303c:	003d0900 	.word	0x003d0900
 8003040:	00516154 	.word	0x00516154
 8003044:	007a1200 	.word	0x007a1200
 8003048:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800304c:	f7fe fdae 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8003050:	0003      	movs	r3, r0
 8003052:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d044      	beq.n	80030e6 <UART_SetConfig+0x416>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d03e      	beq.n	80030e2 <UART_SetConfig+0x412>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b02      	cmp	r3, #2
 800306a:	d038      	beq.n	80030de <UART_SetConfig+0x40e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b03      	cmp	r3, #3
 8003072:	d032      	beq.n	80030da <UART_SetConfig+0x40a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b04      	cmp	r3, #4
 800307a:	d02c      	beq.n	80030d6 <UART_SetConfig+0x406>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b05      	cmp	r3, #5
 8003082:	d026      	beq.n	80030d2 <UART_SetConfig+0x402>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b06      	cmp	r3, #6
 800308a:	d020      	beq.n	80030ce <UART_SetConfig+0x3fe>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b07      	cmp	r3, #7
 8003092:	d01a      	beq.n	80030ca <UART_SetConfig+0x3fa>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b08      	cmp	r3, #8
 800309a:	d014      	beq.n	80030c6 <UART_SetConfig+0x3f6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2b09      	cmp	r3, #9
 80030a2:	d00e      	beq.n	80030c2 <UART_SetConfig+0x3f2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2b0a      	cmp	r3, #10
 80030aa:	d008      	beq.n	80030be <UART_SetConfig+0x3ee>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2b0b      	cmp	r3, #11
 80030b2:	d102      	bne.n	80030ba <UART_SetConfig+0x3ea>
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	e016      	b.n	80030e8 <UART_SetConfig+0x418>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e014      	b.n	80030e8 <UART_SetConfig+0x418>
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	e012      	b.n	80030e8 <UART_SetConfig+0x418>
 80030c2:	2340      	movs	r3, #64	; 0x40
 80030c4:	e010      	b.n	80030e8 <UART_SetConfig+0x418>
 80030c6:	2320      	movs	r3, #32
 80030c8:	e00e      	b.n	80030e8 <UART_SetConfig+0x418>
 80030ca:	2310      	movs	r3, #16
 80030cc:	e00c      	b.n	80030e8 <UART_SetConfig+0x418>
 80030ce:	230c      	movs	r3, #12
 80030d0:	e00a      	b.n	80030e8 <UART_SetConfig+0x418>
 80030d2:	230a      	movs	r3, #10
 80030d4:	e008      	b.n	80030e8 <UART_SetConfig+0x418>
 80030d6:	2308      	movs	r3, #8
 80030d8:	e006      	b.n	80030e8 <UART_SetConfig+0x418>
 80030da:	2306      	movs	r3, #6
 80030dc:	e004      	b.n	80030e8 <UART_SetConfig+0x418>
 80030de:	2304      	movs	r3, #4
 80030e0:	e002      	b.n	80030e8 <UART_SetConfig+0x418>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e000      	b.n	80030e8 <UART_SetConfig+0x418>
 80030e6:	2301      	movs	r3, #1
 80030e8:	0019      	movs	r1, r3
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7fd f810 	bl	8000110 <__udivsi3>
 80030f0:	0003      	movs	r3, r0
 80030f2:	005a      	lsls	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	18d2      	adds	r2, r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	0019      	movs	r1, r3
 8003102:	0010      	movs	r0, r2
 8003104:	f7fd f804 	bl	8000110 <__udivsi3>
 8003108:	0003      	movs	r3, r0
 800310a:	b29b      	uxth	r3, r3
 800310c:	617b      	str	r3, [r7, #20]
        break;
 800310e:	e065      	b.n	80031dc <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d04c      	beq.n	80031b2 <UART_SetConfig+0x4e2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	2b01      	cmp	r3, #1
 800311e:	d045      	beq.n	80031ac <UART_SetConfig+0x4dc>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b02      	cmp	r3, #2
 8003126:	d03e      	beq.n	80031a6 <UART_SetConfig+0x4d6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2b03      	cmp	r3, #3
 800312e:	d038      	beq.n	80031a2 <UART_SetConfig+0x4d2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2b04      	cmp	r3, #4
 8003136:	d031      	beq.n	800319c <UART_SetConfig+0x4cc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b05      	cmp	r3, #5
 800313e:	d02b      	beq.n	8003198 <UART_SetConfig+0x4c8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b06      	cmp	r3, #6
 8003146:	d025      	beq.n	8003194 <UART_SetConfig+0x4c4>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2b07      	cmp	r3, #7
 800314e:	d01e      	beq.n	800318e <UART_SetConfig+0x4be>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b08      	cmp	r3, #8
 8003156:	d017      	beq.n	8003188 <UART_SetConfig+0x4b8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b09      	cmp	r3, #9
 800315e:	d010      	beq.n	8003182 <UART_SetConfig+0x4b2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b0a      	cmp	r3, #10
 8003166:	d009      	beq.n	800317c <UART_SetConfig+0x4ac>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b0b      	cmp	r3, #11
 800316e:	d102      	bne.n	8003176 <UART_SetConfig+0x4a6>
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	e01f      	b.n	80031b6 <UART_SetConfig+0x4e6>
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	025b      	lsls	r3, r3, #9
 800317a:	e01c      	b.n	80031b6 <UART_SetConfig+0x4e6>
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	e019      	b.n	80031b6 <UART_SetConfig+0x4e6>
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	e016      	b.n	80031b6 <UART_SetConfig+0x4e6>
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	e013      	b.n	80031b6 <UART_SetConfig+0x4e6>
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	e010      	b.n	80031b6 <UART_SetConfig+0x4e6>
 8003194:	4bb9      	ldr	r3, [pc, #740]	; (800347c <UART_SetConfig+0x7ac>)
 8003196:	e00e      	b.n	80031b6 <UART_SetConfig+0x4e6>
 8003198:	4bb9      	ldr	r3, [pc, #740]	; (8003480 <UART_SetConfig+0x7b0>)
 800319a:	e00c      	b.n	80031b6 <UART_SetConfig+0x4e6>
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	019b      	lsls	r3, r3, #6
 80031a0:	e009      	b.n	80031b6 <UART_SetConfig+0x4e6>
 80031a2:	4bb8      	ldr	r3, [pc, #736]	; (8003484 <UART_SetConfig+0x7b4>)
 80031a4:	e007      	b.n	80031b6 <UART_SetConfig+0x4e6>
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	01db      	lsls	r3, r3, #7
 80031aa:	e004      	b.n	80031b6 <UART_SetConfig+0x4e6>
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	e001      	b.n	80031b6 <UART_SetConfig+0x4e6>
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	025b      	lsls	r3, r3, #9
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6852      	ldr	r2, [r2, #4]
 80031ba:	0852      	lsrs	r2, r2, #1
 80031bc:	189a      	adds	r2, r3, r2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	0019      	movs	r1, r3
 80031c4:	0010      	movs	r0, r2
 80031c6:	f7fc ffa3 	bl	8000110 <__udivsi3>
 80031ca:	0003      	movs	r3, r0
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	617b      	str	r3, [r7, #20]
        break;
 80031d0:	e004      	b.n	80031dc <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 80031d2:	231e      	movs	r3, #30
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
        break;
 80031da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	d91b      	bls.n	800321a <UART_SetConfig+0x54a>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4aa8      	ldr	r2, [pc, #672]	; (8003488 <UART_SetConfig+0x7b8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d817      	bhi.n	800321a <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	200a      	movs	r0, #10
 80031f0:	183b      	adds	r3, r7, r0
 80031f2:	210f      	movs	r1, #15
 80031f4:	438a      	bics	r2, r1
 80031f6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2207      	movs	r2, #7
 8003200:	4013      	ands	r3, r2
 8003202:	b299      	uxth	r1, r3
 8003204:	183b      	adds	r3, r7, r0
 8003206:	183a      	adds	r2, r7, r0
 8003208:	8812      	ldrh	r2, [r2, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	183a      	adds	r2, r7, r0
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	e1c5      	b.n	80035a6 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800321a:	231e      	movs	r3, #30
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e1c0      	b.n	80035a6 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8003224:	231f      	movs	r3, #31
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d100      	bne.n	8003230 <UART_SetConfig+0x560>
 800322e:	e06c      	b.n	800330a <UART_SetConfig+0x63a>
 8003230:	dc02      	bgt.n	8003238 <UART_SetConfig+0x568>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <UART_SetConfig+0x576>
 8003236:	e1a1      	b.n	800357c <UART_SetConfig+0x8ac>
 8003238:	2b04      	cmp	r3, #4
 800323a:	d100      	bne.n	800323e <UART_SetConfig+0x56e>
 800323c:	e0bc      	b.n	80033b8 <UART_SetConfig+0x6e8>
 800323e:	2b08      	cmp	r3, #8
 8003240:	d100      	bne.n	8003244 <UART_SetConfig+0x574>
 8003242:	e13b      	b.n	80034bc <UART_SetConfig+0x7ec>
 8003244:	e19a      	b.n	800357c <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003246:	f7fe fd3d 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 800324a:	0003      	movs	r3, r0
 800324c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d044      	beq.n	80032e0 <UART_SetConfig+0x610>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b01      	cmp	r3, #1
 800325c:	d03e      	beq.n	80032dc <UART_SetConfig+0x60c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b02      	cmp	r3, #2
 8003264:	d038      	beq.n	80032d8 <UART_SetConfig+0x608>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b03      	cmp	r3, #3
 800326c:	d032      	beq.n	80032d4 <UART_SetConfig+0x604>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b04      	cmp	r3, #4
 8003274:	d02c      	beq.n	80032d0 <UART_SetConfig+0x600>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b05      	cmp	r3, #5
 800327c:	d026      	beq.n	80032cc <UART_SetConfig+0x5fc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b06      	cmp	r3, #6
 8003284:	d020      	beq.n	80032c8 <UART_SetConfig+0x5f8>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b07      	cmp	r3, #7
 800328c:	d01a      	beq.n	80032c4 <UART_SetConfig+0x5f4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b08      	cmp	r3, #8
 8003294:	d014      	beq.n	80032c0 <UART_SetConfig+0x5f0>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b09      	cmp	r3, #9
 800329c:	d00e      	beq.n	80032bc <UART_SetConfig+0x5ec>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b0a      	cmp	r3, #10
 80032a4:	d008      	beq.n	80032b8 <UART_SetConfig+0x5e8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b0b      	cmp	r3, #11
 80032ac:	d102      	bne.n	80032b4 <UART_SetConfig+0x5e4>
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	e016      	b.n	80032e2 <UART_SetConfig+0x612>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e014      	b.n	80032e2 <UART_SetConfig+0x612>
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	e012      	b.n	80032e2 <UART_SetConfig+0x612>
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	e010      	b.n	80032e2 <UART_SetConfig+0x612>
 80032c0:	2320      	movs	r3, #32
 80032c2:	e00e      	b.n	80032e2 <UART_SetConfig+0x612>
 80032c4:	2310      	movs	r3, #16
 80032c6:	e00c      	b.n	80032e2 <UART_SetConfig+0x612>
 80032c8:	230c      	movs	r3, #12
 80032ca:	e00a      	b.n	80032e2 <UART_SetConfig+0x612>
 80032cc:	230a      	movs	r3, #10
 80032ce:	e008      	b.n	80032e2 <UART_SetConfig+0x612>
 80032d0:	2308      	movs	r3, #8
 80032d2:	e006      	b.n	80032e2 <UART_SetConfig+0x612>
 80032d4:	2306      	movs	r3, #6
 80032d6:	e004      	b.n	80032e2 <UART_SetConfig+0x612>
 80032d8:	2304      	movs	r3, #4
 80032da:	e002      	b.n	80032e2 <UART_SetConfig+0x612>
 80032dc:	2302      	movs	r3, #2
 80032de:	e000      	b.n	80032e2 <UART_SetConfig+0x612>
 80032e0:	2301      	movs	r3, #1
 80032e2:	0019      	movs	r1, r3
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7fc ff13 	bl	8000110 <__udivsi3>
 80032ea:	0003      	movs	r3, r0
 80032ec:	001a      	movs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	18d2      	adds	r2, r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	0019      	movs	r1, r3
 80032fc:	0010      	movs	r0, r2
 80032fe:	f7fc ff07 	bl	8000110 <__udivsi3>
 8003302:	0003      	movs	r3, r0
 8003304:	b29b      	uxth	r3, r3
 8003306:	617b      	str	r3, [r7, #20]
        break;
 8003308:	e13d      	b.n	8003586 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d043      	beq.n	800339a <UART_SetConfig+0x6ca>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b01      	cmp	r3, #1
 8003318:	d03d      	beq.n	8003396 <UART_SetConfig+0x6c6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b02      	cmp	r3, #2
 8003320:	d037      	beq.n	8003392 <UART_SetConfig+0x6c2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b03      	cmp	r3, #3
 8003328:	d031      	beq.n	800338e <UART_SetConfig+0x6be>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b04      	cmp	r3, #4
 8003330:	d02b      	beq.n	800338a <UART_SetConfig+0x6ba>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b05      	cmp	r3, #5
 8003338:	d025      	beq.n	8003386 <UART_SetConfig+0x6b6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b06      	cmp	r3, #6
 8003340:	d01f      	beq.n	8003382 <UART_SetConfig+0x6b2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b07      	cmp	r3, #7
 8003348:	d019      	beq.n	800337e <UART_SetConfig+0x6ae>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b08      	cmp	r3, #8
 8003350:	d013      	beq.n	800337a <UART_SetConfig+0x6aa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b09      	cmp	r3, #9
 8003358:	d00d      	beq.n	8003376 <UART_SetConfig+0x6a6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b0a      	cmp	r3, #10
 8003360:	d007      	beq.n	8003372 <UART_SetConfig+0x6a2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b0b      	cmp	r3, #11
 8003368:	d101      	bne.n	800336e <UART_SetConfig+0x69e>
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <UART_SetConfig+0x7bc>)
 800336c:	e016      	b.n	800339c <UART_SetConfig+0x6cc>
 800336e:	4b48      	ldr	r3, [pc, #288]	; (8003490 <UART_SetConfig+0x7c0>)
 8003370:	e014      	b.n	800339c <UART_SetConfig+0x6cc>
 8003372:	4b48      	ldr	r3, [pc, #288]	; (8003494 <UART_SetConfig+0x7c4>)
 8003374:	e012      	b.n	800339c <UART_SetConfig+0x6cc>
 8003376:	4b48      	ldr	r3, [pc, #288]	; (8003498 <UART_SetConfig+0x7c8>)
 8003378:	e010      	b.n	800339c <UART_SetConfig+0x6cc>
 800337a:	4b48      	ldr	r3, [pc, #288]	; (800349c <UART_SetConfig+0x7cc>)
 800337c:	e00e      	b.n	800339c <UART_SetConfig+0x6cc>
 800337e:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <UART_SetConfig+0x7d0>)
 8003380:	e00c      	b.n	800339c <UART_SetConfig+0x6cc>
 8003382:	4b48      	ldr	r3, [pc, #288]	; (80034a4 <UART_SetConfig+0x7d4>)
 8003384:	e00a      	b.n	800339c <UART_SetConfig+0x6cc>
 8003386:	4b48      	ldr	r3, [pc, #288]	; (80034a8 <UART_SetConfig+0x7d8>)
 8003388:	e008      	b.n	800339c <UART_SetConfig+0x6cc>
 800338a:	4b48      	ldr	r3, [pc, #288]	; (80034ac <UART_SetConfig+0x7dc>)
 800338c:	e006      	b.n	800339c <UART_SetConfig+0x6cc>
 800338e:	4b48      	ldr	r3, [pc, #288]	; (80034b0 <UART_SetConfig+0x7e0>)
 8003390:	e004      	b.n	800339c <UART_SetConfig+0x6cc>
 8003392:	4b48      	ldr	r3, [pc, #288]	; (80034b4 <UART_SetConfig+0x7e4>)
 8003394:	e002      	b.n	800339c <UART_SetConfig+0x6cc>
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <UART_SetConfig+0x7e8>)
 8003398:	e000      	b.n	800339c <UART_SetConfig+0x6cc>
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <UART_SetConfig+0x7c0>)
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6852      	ldr	r2, [r2, #4]
 80033a0:	0852      	lsrs	r2, r2, #1
 80033a2:	189a      	adds	r2, r3, r2
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0019      	movs	r1, r3
 80033aa:	0010      	movs	r0, r2
 80033ac:	f7fc feb0 	bl	8000110 <__udivsi3>
 80033b0:	0003      	movs	r3, r0
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	617b      	str	r3, [r7, #20]
        break;
 80033b6:	e0e6      	b.n	8003586 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b8:	f7fe fbf8 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 80033bc:	0003      	movs	r3, r0
 80033be:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d044      	beq.n	8003452 <UART_SetConfig+0x782>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d03e      	beq.n	800344e <UART_SetConfig+0x77e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d038      	beq.n	800344a <UART_SetConfig+0x77a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d032      	beq.n	8003446 <UART_SetConfig+0x776>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d02c      	beq.n	8003442 <UART_SetConfig+0x772>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d026      	beq.n	800343e <UART_SetConfig+0x76e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d020      	beq.n	800343a <UART_SetConfig+0x76a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d01a      	beq.n	8003436 <UART_SetConfig+0x766>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2b08      	cmp	r3, #8
 8003406:	d014      	beq.n	8003432 <UART_SetConfig+0x762>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2b09      	cmp	r3, #9
 800340e:	d00e      	beq.n	800342e <UART_SetConfig+0x75e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b0a      	cmp	r3, #10
 8003416:	d008      	beq.n	800342a <UART_SetConfig+0x75a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2b0b      	cmp	r3, #11
 800341e:	d102      	bne.n	8003426 <UART_SetConfig+0x756>
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	e016      	b.n	8003454 <UART_SetConfig+0x784>
 8003426:	2301      	movs	r3, #1
 8003428:	e014      	b.n	8003454 <UART_SetConfig+0x784>
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	e012      	b.n	8003454 <UART_SetConfig+0x784>
 800342e:	2340      	movs	r3, #64	; 0x40
 8003430:	e010      	b.n	8003454 <UART_SetConfig+0x784>
 8003432:	2320      	movs	r3, #32
 8003434:	e00e      	b.n	8003454 <UART_SetConfig+0x784>
 8003436:	2310      	movs	r3, #16
 8003438:	e00c      	b.n	8003454 <UART_SetConfig+0x784>
 800343a:	230c      	movs	r3, #12
 800343c:	e00a      	b.n	8003454 <UART_SetConfig+0x784>
 800343e:	230a      	movs	r3, #10
 8003440:	e008      	b.n	8003454 <UART_SetConfig+0x784>
 8003442:	2308      	movs	r3, #8
 8003444:	e006      	b.n	8003454 <UART_SetConfig+0x784>
 8003446:	2306      	movs	r3, #6
 8003448:	e004      	b.n	8003454 <UART_SetConfig+0x784>
 800344a:	2304      	movs	r3, #4
 800344c:	e002      	b.n	8003454 <UART_SetConfig+0x784>
 800344e:	2302      	movs	r3, #2
 8003450:	e000      	b.n	8003454 <UART_SetConfig+0x784>
 8003452:	2301      	movs	r3, #1
 8003454:	0019      	movs	r1, r3
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fc fe5a 	bl	8000110 <__udivsi3>
 800345c:	0003      	movs	r3, r0
 800345e:	001a      	movs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	18d2      	adds	r2, r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0019      	movs	r1, r3
 800346e:	0010      	movs	r0, r2
 8003470:	f7fc fe4e 	bl	8000110 <__udivsi3>
 8003474:	0003      	movs	r3, r0
 8003476:	b29b      	uxth	r3, r3
 8003478:	617b      	str	r3, [r7, #20]
        break;
 800347a:	e084      	b.n	8003586 <UART_SetConfig+0x8b6>
 800347c:	00001554 	.word	0x00001554
 8003480:	00001998 	.word	0x00001998
 8003484:	00002aaa 	.word	0x00002aaa
 8003488:	0000ffff 	.word	0x0000ffff
 800348c:	0000f424 	.word	0x0000f424
 8003490:	00f42400 	.word	0x00f42400
 8003494:	0001e848 	.word	0x0001e848
 8003498:	0003d090 	.word	0x0003d090
 800349c:	0007a120 	.word	0x0007a120
 80034a0:	000f4240 	.word	0x000f4240
 80034a4:	00145855 	.word	0x00145855
 80034a8:	00186a00 	.word	0x00186a00
 80034ac:	001e8480 	.word	0x001e8480
 80034b0:	0028b0aa 	.word	0x0028b0aa
 80034b4:	003d0900 	.word	0x003d0900
 80034b8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d04b      	beq.n	800355c <UART_SetConfig+0x88c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d044      	beq.n	8003556 <UART_SetConfig+0x886>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d03d      	beq.n	8003550 <UART_SetConfig+0x880>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d037      	beq.n	800354c <UART_SetConfig+0x87c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d030      	beq.n	8003546 <UART_SetConfig+0x876>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d02a      	beq.n	8003542 <UART_SetConfig+0x872>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d024      	beq.n	800353e <UART_SetConfig+0x86e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2b07      	cmp	r3, #7
 80034fa:	d01d      	beq.n	8003538 <UART_SetConfig+0x868>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b08      	cmp	r3, #8
 8003502:	d016      	beq.n	8003532 <UART_SetConfig+0x862>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b09      	cmp	r3, #9
 800350a:	d00f      	beq.n	800352c <UART_SetConfig+0x85c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b0a      	cmp	r3, #10
 8003512:	d008      	beq.n	8003526 <UART_SetConfig+0x856>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2b0b      	cmp	r3, #11
 800351a:	d101      	bne.n	8003520 <UART_SetConfig+0x850>
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	e01f      	b.n	8003560 <UART_SetConfig+0x890>
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	e01c      	b.n	8003560 <UART_SetConfig+0x890>
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	e019      	b.n	8003560 <UART_SetConfig+0x890>
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	e016      	b.n	8003560 <UART_SetConfig+0x890>
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	e013      	b.n	8003560 <UART_SetConfig+0x890>
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	e010      	b.n	8003560 <UART_SetConfig+0x890>
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <UART_SetConfig+0x900>)
 8003540:	e00e      	b.n	8003560 <UART_SetConfig+0x890>
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <UART_SetConfig+0x904>)
 8003544:	e00c      	b.n	8003560 <UART_SetConfig+0x890>
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	015b      	lsls	r3, r3, #5
 800354a:	e009      	b.n	8003560 <UART_SetConfig+0x890>
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <UART_SetConfig+0x908>)
 800354e:	e007      	b.n	8003560 <UART_SetConfig+0x890>
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	019b      	lsls	r3, r3, #6
 8003554:	e004      	b.n	8003560 <UART_SetConfig+0x890>
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	01db      	lsls	r3, r3, #7
 800355a:	e001      	b.n	8003560 <UART_SetConfig+0x890>
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6852      	ldr	r2, [r2, #4]
 8003564:	0852      	lsrs	r2, r2, #1
 8003566:	189a      	adds	r2, r3, r2
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	0019      	movs	r1, r3
 800356e:	0010      	movs	r0, r2
 8003570:	f7fc fdce 	bl	8000110 <__udivsi3>
 8003574:	0003      	movs	r3, r0
 8003576:	b29b      	uxth	r3, r3
 8003578:	617b      	str	r3, [r7, #20]
        break;
 800357a:	e004      	b.n	8003586 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 800357c:	231e      	movs	r3, #30
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
        break;
 8003584:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d908      	bls.n	800359e <UART_SetConfig+0x8ce>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <UART_SetConfig+0x90c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d804      	bhi.n	800359e <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e003      	b.n	80035a6 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800359e:	231e      	movs	r3, #30
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	226a      	movs	r2, #106	; 0x6a
 80035aa:	2101      	movs	r1, #1
 80035ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2268      	movs	r2, #104	; 0x68
 80035b2:	2101      	movs	r1, #1
 80035b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80035c2:	231e      	movs	r3, #30
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b008      	add	sp, #32
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	00000aaa 	.word	0x00000aaa
 80035d4:	00000ccc 	.word	0x00000ccc
 80035d8:	00001555 	.word	0x00001555
 80035dc:	0000ffff 	.word	0x0000ffff

080035e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00b      	beq.n	800360a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a4a      	ldr	r2, [pc, #296]	; (8003724 <UART_AdvFeatureConfig+0x144>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	2202      	movs	r2, #2
 8003610:	4013      	ands	r3, r2
 8003612:	d00b      	beq.n	800362c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a43      	ldr	r2, [pc, #268]	; (8003728 <UART_AdvFeatureConfig+0x148>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	2204      	movs	r2, #4
 8003632:	4013      	ands	r3, r2
 8003634:	d00b      	beq.n	800364e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a3b      	ldr	r2, [pc, #236]	; (800372c <UART_AdvFeatureConfig+0x14c>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	2208      	movs	r2, #8
 8003654:	4013      	ands	r3, r2
 8003656:	d00b      	beq.n	8003670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a34      	ldr	r2, [pc, #208]	; (8003730 <UART_AdvFeatureConfig+0x150>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	2210      	movs	r2, #16
 8003676:	4013      	ands	r3, r2
 8003678:	d00b      	beq.n	8003692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <UART_AdvFeatureConfig+0x154>)
 8003682:	4013      	ands	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	2220      	movs	r2, #32
 8003698:	4013      	ands	r3, r2
 800369a:	d00b      	beq.n	80036b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4a25      	ldr	r2, [pc, #148]	; (8003738 <UART_AdvFeatureConfig+0x158>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	4013      	ands	r3, r2
 80036bc:	d01d      	beq.n	80036fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <UART_AdvFeatureConfig+0x15c>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	035b      	lsls	r3, r3, #13
 80036de:	429a      	cmp	r2, r3
 80036e0:	d10b      	bne.n	80036fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <UART_AdvFeatureConfig+0x160>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	4013      	ands	r3, r2
 8003702:	d00b      	beq.n	800371c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <UART_AdvFeatureConfig+0x164>)
 800370c:	4013      	ands	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fffdffff 	.word	0xfffdffff
 8003728:	fffeffff 	.word	0xfffeffff
 800372c:	fffbffff 	.word	0xfffbffff
 8003730:	ffff7fff 	.word	0xffff7fff
 8003734:	ffffefff 	.word	0xffffefff
 8003738:	ffffdfff 	.word	0xffffdfff
 800373c:	ffefffff 	.word	0xffefffff
 8003740:	ff9fffff 	.word	0xff9fffff
 8003744:	fff7ffff 	.word	0xfff7ffff

08003748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2288      	movs	r2, #136	; 0x88
 8003754:	2100      	movs	r1, #0
 8003756:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003758:	f7fd fac4 	bl	8000ce4 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2208      	movs	r2, #8
 8003768:	4013      	ands	r3, r2
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10d      	bne.n	800378a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	0399      	lsls	r1, r3, #14
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <UART_CheckIdleState+0x90>)
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	0013      	movs	r3, r2
 800377c:	2200      	movs	r2, #0
 800377e:	f000 f82d 	bl	80037dc <UART_WaitOnFlagUntilTimeout>
 8003782:	1e03      	subs	r3, r0, #0
 8003784:	d001      	beq.n	800378a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e021      	b.n	80037ce <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2204      	movs	r2, #4
 8003792:	4013      	ands	r3, r2
 8003794:	2b04      	cmp	r3, #4
 8003796:	d10d      	bne.n	80037b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	03d9      	lsls	r1, r3, #15
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <UART_CheckIdleState+0x90>)
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	0013      	movs	r3, r2
 80037a6:	2200      	movs	r2, #0
 80037a8:	f000 f818 	bl	80037dc <UART_WaitOnFlagUntilTimeout>
 80037ac:	1e03      	subs	r3, r0, #0
 80037ae:	d001      	beq.n	80037b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e00c      	b.n	80037ce <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	2120      	movs	r1, #32
 80037ba:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2284      	movs	r2, #132	; 0x84
 80037c0:	2120      	movs	r1, #32
 80037c2:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	227c      	movs	r2, #124	; 0x7c
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	01ffffff 	.word	0x01ffffff

080037dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ec:	e02b      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3301      	adds	r3, #1
 80037f2:	d028      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7fd fa76 	bl	8000ce4 <HAL_GetTick>
 80037f8:	0002      	movs	r2, r0
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11d      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003816:	400a      	ands	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2101      	movs	r1, #1
 8003826:	438a      	bics	r2, r1
 8003828:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	2120      	movs	r1, #32
 8003830:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2284      	movs	r2, #132	; 0x84
 8003836:	2120      	movs	r1, #32
 8003838:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	227c      	movs	r2, #124	; 0x7c
 800383e:	2100      	movs	r1, #0
 8003840:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	425a      	negs	r2, r3
 8003856:	4153      	adcs	r3, r2
 8003858:	b2db      	uxtb	r3, r3
 800385a:	001a      	movs	r2, r3
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d0c4      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b004      	add	sp, #16
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	fffffe5f 	.word	0xfffffe5f

08003874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	227c      	movs	r2, #124	; 0x7c
 8003880:	5c9b      	ldrb	r3, [r3, r2]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_UARTEx_DisableFifoMode+0x16>
 8003886:	2302      	movs	r3, #2
 8003888:	e027      	b.n	80038da <HAL_UARTEx_DisableFifoMode+0x66>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	227c      	movs	r2, #124	; 0x7c
 800388e:	2101      	movs	r1, #1
 8003890:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	2124      	movs	r1, #36	; 0x24
 8003898:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	438a      	bics	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	2120      	movs	r1, #32
 80038ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	227c      	movs	r2, #124	; 0x7c
 80038d4:	2100      	movs	r1, #0
 80038d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	dfffffff 	.word	0xdfffffff

080038e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	227c      	movs	r2, #124	; 0x7c
 80038f6:	5c9b      	ldrb	r3, [r3, r2]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e02e      	b.n	800395e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	227c      	movs	r2, #124	; 0x7c
 8003904:	2101      	movs	r1, #1
 8003906:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	2124      	movs	r1, #36	; 0x24
 800390e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2101      	movs	r1, #1
 8003924:	438a      	bics	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	08d9      	lsrs	r1, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0018      	movs	r0, r3
 8003940:	f000 f854 	bl	80039ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	2120      	movs	r1, #32
 8003952:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	227c      	movs	r2, #124	; 0x7c
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b004      	add	sp, #16
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	227c      	movs	r2, #124	; 0x7c
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e02f      	b.n	80039e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	227c      	movs	r2, #124	; 0x7c
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	2124      	movs	r1, #36	; 0x24
 800398e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2101      	movs	r1, #1
 80039a4:	438a      	bics	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	0019      	movs	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 f813 	bl	80039ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2280      	movs	r2, #128	; 0x80
 80039d2:	2120      	movs	r1, #32
 80039d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	227c      	movs	r2, #124	; 0x7c
 80039da:	2100      	movs	r1, #0
 80039dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	f1ffffff 	.word	0xf1ffffff

080039ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80039f4:	2314      	movs	r3, #20
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	4a2f      	ldr	r2, [pc, #188]	; (8003ab8 <UARTEx_SetNbDataToProcess+0xcc>)
 80039fa:	ca03      	ldmia	r2!, {r0, r1}
 80039fc:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80039fe:	230c      	movs	r3, #12
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	4a2e      	ldr	r2, [pc, #184]	; (8003abc <UARTEx_SetNbDataToProcess+0xd0>)
 8003a04:	ca03      	ldmia	r2!, {r0, r1}
 8003a06:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d108      	bne.n	8003a22 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	226a      	movs	r2, #106	; 0x6a
 8003a14:	2101      	movs	r1, #1
 8003a16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2268      	movs	r2, #104	; 0x68
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a20:	e046      	b.n	8003ab0 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a22:	261f      	movs	r6, #31
 8003a24:	19bb      	adds	r3, r7, r6
 8003a26:	2208      	movs	r2, #8
 8003a28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a2a:	201e      	movs	r0, #30
 8003a2c:	183b      	adds	r3, r7, r0
 8003a2e:	2208      	movs	r2, #8
 8003a30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	0e5b      	lsrs	r3, r3, #25
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	241d      	movs	r4, #29
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	2107      	movs	r1, #7
 8003a42:	400a      	ands	r2, r1
 8003a44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	0f5b      	lsrs	r3, r3, #29
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	251c      	movs	r5, #28
 8003a52:	197b      	adds	r3, r7, r5
 8003a54:	2107      	movs	r1, #7
 8003a56:	400a      	ands	r2, r1
 8003a58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003a5a:	183b      	adds	r3, r7, r0
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	197a      	adds	r2, r7, r5
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	2114      	movs	r1, #20
 8003a64:	1879      	adds	r1, r7, r1
 8003a66:	5c8a      	ldrb	r2, [r1, r2]
 8003a68:	435a      	muls	r2, r3
 8003a6a:	0010      	movs	r0, r2
 8003a6c:	197b      	adds	r3, r7, r5
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	250c      	movs	r5, #12
 8003a72:	197a      	adds	r2, r7, r5
 8003a74:	5cd3      	ldrb	r3, [r2, r3]
 8003a76:	0019      	movs	r1, r3
 8003a78:	f7fc fbd4 	bl	8000224 <__divsi3>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	b299      	uxth	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	226a      	movs	r2, #106	; 0x6a
 8003a84:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003a86:	19bb      	adds	r3, r7, r6
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	193a      	adds	r2, r7, r4
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	2114      	movs	r1, #20
 8003a90:	1879      	adds	r1, r7, r1
 8003a92:	5c8a      	ldrb	r2, [r1, r2]
 8003a94:	435a      	muls	r2, r3
 8003a96:	0010      	movs	r0, r2
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	197a      	adds	r2, r7, r5
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	f7fc fbbf 	bl	8000224 <__divsi3>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	b299      	uxth	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2268      	movs	r2, #104	; 0x68
 8003aae:	5299      	strh	r1, [r3, r2]
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b009      	add	sp, #36	; 0x24
 8003ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab8:	08003b4c 	.word	0x08003b4c
 8003abc:	08003b54 	.word	0x08003b54

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	4d0c      	ldr	r5, [pc, #48]	; (8003af8 <__libc_init_array+0x38>)
 8003ac6:	4c0d      	ldr	r4, [pc, #52]	; (8003afc <__libc_init_array+0x3c>)
 8003ac8:	1b64      	subs	r4, r4, r5
 8003aca:	10a4      	asrs	r4, r4, #2
 8003acc:	42a6      	cmp	r6, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	f000 f821 	bl	8003b18 <_init>
 8003ad6:	4d0a      	ldr	r5, [pc, #40]	; (8003b00 <__libc_init_array+0x40>)
 8003ad8:	4c0a      	ldr	r4, [pc, #40]	; (8003b04 <__libc_init_array+0x44>)
 8003ada:	1b64      	subs	r4, r4, r5
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	42a6      	cmp	r6, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	00b3      	lsls	r3, r6, #2
 8003ae6:	58eb      	ldr	r3, [r5, r3]
 8003ae8:	4798      	blx	r3
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	00b3      	lsls	r3, r6, #2
 8003af0:	58eb      	ldr	r3, [r5, r3]
 8003af2:	4798      	blx	r3
 8003af4:	3601      	adds	r6, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	08003bbc 	.word	0x08003bbc
 8003afc:	08003bbc 	.word	0x08003bbc
 8003b00:	08003bbc 	.word	0x08003bbc
 8003b04:	08003bc0 	.word	0x08003bc0

08003b08 <memset>:
 8003b08:	0003      	movs	r3, r0
 8003b0a:	1812      	adds	r2, r2, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	7019      	strb	r1, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <_init>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr

08003b24 <_fini>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr
